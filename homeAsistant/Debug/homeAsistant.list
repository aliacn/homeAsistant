
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800705c  0800705c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800705c  0800705c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800705c  0800705c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000005c  080070c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080070c0  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ebf  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c9  00000000  00000000  00032f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  00036500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf25  00000000  00000000  0003722d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015952  00000000  00000000  00054152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad7f3  00000000  00000000  00069aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d2c  00000000  00000000  00117298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f80 	.word	0x08006f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006f80 	.word	0x08006f80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000a6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a76:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000a7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a7e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f80e 	bl	8000ab2 <Lcd_init>

	return lcd;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	461d      	mov	r5, r3
 8000a9a:	f107 0410 	add.w	r4, r7, #16
 8000a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aa6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}

08000ab2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7d9b      	ldrb	r3, [r3, #22]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000ac2:	2133      	movs	r1, #51	; 0x33
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f87b 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000aca:	2132      	movs	r1, #50	; 0x32
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f877 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000ad2:	2128      	movs	r1, #40	; 0x28
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f873 	bl	8000bc0 <lcd_write_command>
 8000ada:	e003      	b.n	8000ae4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000adc:	2138      	movs	r1, #56	; 0x38
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f86e 	bl	8000bc0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f86a 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000aec:	210c      	movs	r1, #12
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f866 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000af4:	2106      	movs	r1, #6
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f862 	bl	8000bc0 <lcd_write_command>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <Lcd_int+0x2c>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fd8e 	bl	8006638 <siprintf>

	Lcd_string(lcd, buffer);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f806 	bl	8000b34 <Lcd_string>
}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08006f98 	.word	0x08006f98

08000b34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e00a      	b.n	8000b5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f864 	bl	8000c1c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	7bfc      	ldrb	r4, [r7, #15]
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d3ed      	bcc.n	8000b44 <Lcd_string+0x10>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
	...

08000b74 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
 8000b80:	4613      	mov	r3, r2
 8000b82:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <Lcd_cursor+0x30>)
 8000b88:	5cd2      	ldrb	r2, [r2, r3]
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3b80      	subs	r3, #128	; 0x80
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f812 	bl	8000bc0 <lcd_write_command>
	#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08006fec 	.word	0x08006fec

08000ba8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f804 	bl	8000bc0 <lcd_write_command>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6898      	ldr	r0, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	899b      	ldrh	r3, [r3, #12]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f002 f8d4 	bl	8002d84 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7d9b      	ldrb	r3, [r3, #22]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f842 	bl	8000c78 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f839 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000c06:	e005      	b.n	8000c14 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f832 	bl	8000c78 <lcd_write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4619      	mov	r1, r3
 8000c34:	f002 f8a6 	bl	8002d84 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d9b      	ldrb	r3, [r3, #22]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d111      	bne.n	8000c64 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2204      	movs	r2, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f814 	bl	8000c78 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f80b 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000c62:	e005      	b.n	8000c70 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2208      	movs	r2, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f804 	bl	8000c78 <lcd_write>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	4613      	mov	r3, r2
 8000c86:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e019      	b.n	8000cc2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	8819      	ldrh	r1, [r3, #0]
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	fa42 f303 	asr.w	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f002 f864 	bl	8002d84 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3e1      	bcc.n	8000c8e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6918      	ldr	r0, [r3, #16]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	8a9b      	ldrh	r3, [r3, #20]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f002 f855 	bl	8002d84 <HAL_GPIO_WritePin>
	DELAY(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 ff56 	bl	8001b8c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6918      	ldr	r0, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8a9b      	ldrh	r3, [r3, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	f002 f84a 	bl	8002d84 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 fedf 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f9b3 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fbcb 	bl	80014a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d0a:	f000 faad 	bl	8001268 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d0e:	f000 fa6d 	bl	80011ec <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d12:	f000 fa0f 	bl	8001134 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 fb93 	bl	8001440 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb1b 	bl	8001354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000d1e:	48c0      	ldr	r0, [pc, #768]	; (8001020 <main+0x328>)
 8000d20:	f003 fdcc 	bl	80048bc <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	48be      	ldr	r0, [pc, #760]	; (8001024 <main+0x32c>)
 8000d2c:	f002 f82a 	bl	8002d84 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d30:	2108      	movs	r1, #8
 8000d32:	48bd      	ldr	r0, [pc, #756]	; (8001028 <main+0x330>)
 8000d34:	f003 fe70 	bl	8004a18 <HAL_TIM_PWM_Start>

  //HAL_ADC_Start (&hadc1);

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 8000d38:	4bbc      	ldr	r3, [pc, #752]	; (800102c <main+0x334>)
 8000d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 8000d44:	4aba      	ldr	r2, [pc, #744]	; (8001030 <main+0x338>)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000d52:	4638      	mov	r0, r7
 8000d54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	2310      	movs	r3, #16
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	4baf      	ldr	r3, [pc, #700]	; (8001024 <main+0x32c>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2320      	movs	r3, #32
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4bad      	ldr	r3, [pc, #692]	; (8001024 <main+0x32c>)
 8000d6e:	f7ff fe75 	bl	8000a5c <Lcd_create>
 8000d72:	f107 0418 	add.w	r4, r7, #24
 8000d76:	463d      	mov	r5, r7
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d80:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd,0,4);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2204      	movs	r2, #4
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fef1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"Ali ACAN");
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	49a7      	ldr	r1, [pc, #668]	; (8001034 <main+0x33c>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fecb 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fee4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd," Mikro İslemci");
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	49a1      	ldr	r1, [pc, #644]	; (8001038 <main+0x340>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff febe 	bl	8000b34 <Lcd_string>
  HAL_Delay(1000);
 8000db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dbc:	f000 fee6 	bl	8001b8c <HAL_Delay>
  Lcd_clear(&lcd);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff feef 	bl	8000ba8 <Lcd_clear>
  Lcd_cursor(&lcd,0,9);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2209      	movs	r2, #9
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fece 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"PIR :");
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4997      	ldr	r1, [pc, #604]	; (800103c <main+0x344>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fea8 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fec1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"LIGHT:");
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4992      	ldr	r1, [pc, #584]	; (8001040 <main+0x348>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe9b 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,0,0);
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff feb4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"D:");
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	498c      	ldr	r1, [pc, #560]	; (8001044 <main+0x34c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fe8e 	bl	8000b34 <Lcd_string>

 // HAL_ADC_Start_DMA(&hadc1,adc_values, 2);
  HAL_ADC_Start(&hadc1);
 8000e18:	488b      	ldr	r0, [pc, #556]	; (8001048 <main+0x350>)
 8000e1a:	f001 f861 	bl	8001ee0 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_PollForConversion (&hadc1,1000);
 8000e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e22:	4889      	ldr	r0, [pc, #548]	; (8001048 <main+0x350>)
 8000e24:	f001 f8ca 	bl	8001fbc <HAL_ADC_PollForConversion>
	  	lightValue = HAL_ADC_GetValue (&hadc1);
 8000e28:	4887      	ldr	r0, [pc, #540]	; (8001048 <main+0x350>)
 8000e2a:	f001 f985 	bl	8002138 <HAL_ADC_GetValue>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a86      	ldr	r2, [pc, #536]	; (800104c <main+0x354>)
 8000e32:	6013      	str	r3, [r2, #0]
	  	Lcd_cursor(&lcd,1,7);
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	2207      	movs	r2, #7
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe99 	bl	8000b74 <Lcd_cursor>
	  	Lcd_int(&lcd,lightValue);
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <main+0x354>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe58 	bl	8000b04 <Lcd_int>

	  	if (lightValue>2800)
 8000e54:	4b7d      	ldr	r3, [pc, #500]	; (800104c <main+0x354>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000e5c:	d907      	bls.n	8000e6e <main+0x176>
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f001 ff8c 	bl	8002d84 <HAL_GPIO_WritePin>
 8000e6c:	e006      	b.n	8000e7c <main+0x184>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f001 ff84 	bl	8002d84 <HAL_GPIO_WritePin>
	  	}


	  	Lcd_cursor(&lcd,0,13);
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	220d      	movs	r2, #13
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe75 	bl	8000b74 <Lcd_cursor>
	  	Lcd_string(&lcd,"OFF");
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4970      	ldr	r1, [pc, #448]	; (8001050 <main+0x358>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe4f 	bl	8000b34 <Lcd_string>
	  	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4862      	ldr	r0, [pc, #392]	; (8001024 <main+0x32c>)
 8000e9c:	f001 ff72 	bl	8002d84 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	486b      	ldr	r0, [pc, #428]	; (8001054 <main+0x35c>)
 8000ea6:	f001 ff6d 	bl	8002d84 <HAL_GPIO_WritePin>
	  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) // if the pin is HIGH
 8000eaa:	2102      	movs	r1, #2
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 ff50 	bl	8002d54 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d01a      	beq.n	8000ef0 <main+0x1f8>
	  	  {
	  		 Lcd_cursor(&lcd,0,13);
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	220d      	movs	r2, #13
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fe56 	bl	8000b74 <Lcd_cursor>
	  		 Lcd_string(&lcd," ON");
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4962      	ldr	r1, [pc, #392]	; (8001058 <main+0x360>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe30 	bl	8000b34 <Lcd_string>
	  		 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	485e      	ldr	r0, [pc, #376]	; (8001054 <main+0x35c>)
 8000eda:	f001 ff53 	bl	8002d84 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4850      	ldr	r0, [pc, #320]	; (8001024 <main+0x32c>)
 8000ee4:	f001 ff4e 	bl	8002d84 <HAL_GPIO_WritePin>
	  		 HAL_Delay(500);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eec:	f000 fe4e 	bl	8001b8c <HAL_Delay>
	  	  }

	  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	484b      	ldr	r0, [pc, #300]	; (8001024 <main+0x32c>)
 8000ef8:	f001 ff44 	bl	8002d84 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000efc:	4b48      	ldr	r3, [pc, #288]	; (8001020 <main+0x328>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
	  	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f04:	bf00      	nop
 8000f06:	4b46      	ldr	r3, [pc, #280]	; (8001020 <main+0x328>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d9fa      	bls.n	8000f06 <main+0x20e>
	     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f16:	4843      	ldr	r0, [pc, #268]	; (8001024 <main+0x32c>)
 8000f18:	f001 ff34 	bl	8002d84 <HAL_GPIO_WritePin>

	     pMillis = HAL_GetTick();
 8000f1c:	f000 fe2a 	bl	8001b74 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <main+0x364>)
 8000f24:	6013      	str	r3, [r2, #0]
	  	 while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000f26:	bf00      	nop
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	483d      	ldr	r0, [pc, #244]	; (8001024 <main+0x32c>)
 8000f2e:	f001 ff11 	bl	8002d54 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d108      	bne.n	8000f4a <main+0x252>
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <main+0x364>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f103 040a 	add.w	r4, r3, #10
 8000f40:	f000 fe18 	bl	8001b74 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	429c      	cmp	r4, r3
 8000f48:	d8ee      	bhi.n	8000f28 <main+0x230>
	     val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <main+0x328>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	4a43      	ldr	r2, [pc, #268]	; (8001060 <main+0x368>)
 8000f52:	6013      	str	r3, [r2, #0]

	     pMillis = HAL_GetTick();
 8000f54:	f000 fe0e 	bl	8001b74 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a40      	ldr	r2, [pc, #256]	; (800105c <main+0x364>)
 8000f5c:	6013      	str	r3, [r2, #0]
	  	 while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000f5e:	bf00      	nop
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	482f      	ldr	r0, [pc, #188]	; (8001024 <main+0x32c>)
 8000f66:	f001 fef5 	bl	8002d54 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <main+0x28a>
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <main+0x364>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f78:	f000 fdfc 	bl	8001b74 <HAL_GetTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	429c      	cmp	r4, r3
 8000f80:	d8ee      	bhi.n	8000f60 <main+0x268>
	     val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <main+0x328>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	4a36      	ldr	r2, [pc, #216]	; (8001064 <main+0x36c>)
 8000f8a:	6013      	str	r3, [r2, #0]

	  	distance = (val2-val1)* 0.034/2;
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <main+0x36c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <main+0x368>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fab4 	bl	8000504 <__aeabi_ui2d>
 8000f9c:	a31e      	add	r3, pc, #120	; (adr r3, 8001018 <main+0x320>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	f7ff fb29 	bl	80005f8 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	f7ff fc49 	bl	800084c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fd2b 	bl	8000a1c <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <main+0x370>)
 8000fcc:	801a      	strh	r2, [r3, #0]
	   	Lcd_cursor(&lcd,0,3);
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fdcc 	bl	8000b74 <Lcd_cursor>
	   	Lcd_int(&lcd,distance);
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <main+0x370>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fd8b 	bl	8000b04 <Lcd_int>

	   	if(distance==200)
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <main+0x370>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2bc8      	cmp	r3, #200	; 0xc8
 8000ff4:	d10a      	bne.n	800100c <main+0x314>
	   	    {
	   	      __HAL_TIM_SET_AUTORELOAD(&htim2, 50*2);
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <main+0x330>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2264      	movs	r2, #100	; 0x64
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <main+0x330>)
 8001000:	2264      	movs	r2, #100	; 0x64
 8001002:	60da      	str	r2, [r3, #12]
	   	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 50);
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <main+0x330>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2232      	movs	r2, #50	; 0x32
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c

	   	    }


	  	HAL_Delay(50);
 800100c:	2032      	movs	r0, #50	; 0x32
 800100e:	f000 fdbd 	bl	8001b8c <HAL_Delay>
	    HAL_ADC_PollForConversion (&hadc1,1000);
 8001012:	e704      	b.n	8000e1e <main+0x126>
 8001014:	f3af 8000 	nop.w
 8001018:	b020c49c 	.word	0xb020c49c
 800101c:	3fa16872 	.word	0x3fa16872
 8001020:	2000011c 	.word	0x2000011c
 8001024:	48000400 	.word	0x48000400
 8001028:	20000168 	.word	0x20000168
 800102c:	08006fd4 	.word	0x08006fd4
 8001030:	08006fe4 	.word	0x08006fe4
 8001034:	08006f9c 	.word	0x08006f9c
 8001038:	08006fa8 	.word	0x08006fa8
 800103c:	08006fb8 	.word	0x08006fb8
 8001040:	08006fc0 	.word	0x08006fc0
 8001044:	08006fc8 	.word	0x08006fc8
 8001048:	20000078 	.word	0x20000078
 800104c:	2000023c 	.word	0x2000023c
 8001050:	08006fcc 	.word	0x08006fcc
 8001054:	48000800 	.word	0x48000800
 8001058:	08006fd0 	.word	0x08006fd0
 800105c:	20000240 	.word	0x20000240
 8001060:	20000244 	.word	0x20000244
 8001064:	20000248 	.word	0x20000248
 8001068:	2000024c 	.word	0x2000024c

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09c      	sub	sp, #112	; 0x70
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001076:	2228      	movs	r2, #40	; 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fafc 	bl	8006678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2234      	movs	r2, #52	; 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f005 faee 	bl	8006678 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800109c:	2303      	movs	r3, #3
 800109e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 ff9a 	bl	8003000 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80010d2:	f000 faaf 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 ffc2 	bl	800407c <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f000 fa99 	bl	8001634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001102:	f241 03a1 	movw	r3, #4257	; 0x10a1
 8001106:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001118:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f9e3 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001128:	f000 fa84 	bl	8001634 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3770      	adds	r7, #112	; 0x70
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800114c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001150:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001166:	2201      	movs	r2, #1
 8001168:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800117a:	2201      	movs	r2, #1
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001186:	2201      	movs	r2, #1
 8001188:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_ADC1_Init+0xb4>)
 8001194:	2208      	movs	r2, #8
 8001196:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_ADC1_Init+0xb4>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011a6:	f000 fd15 	bl	8001bd4 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80011b0:	f000 fa40 	bl	8001634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC1_Init+0xb4>)
 80011d2:	f000 ffbf 	bl	8002154 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011dc:	f000 fa2a 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000078 	.word	0x20000078

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_I2C1_Init+0x74>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <MX_I2C1_Init+0x78>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_I2C1_Init+0x74>)
 80011f8:	f240 220b 	movw	r2, #523	; 0x20b
 80011fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_I2C1_Init+0x74>)
 8001206:	2201      	movs	r2, #1
 8001208:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_I2C1_Init+0x74>)
 800122a:	f001 fdc3 	bl	8002db4 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f9fe 	bl	8001634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <MX_I2C1_Init+0x74>)
 800123c:	f001 fe49 	bl	8002ed2 <HAL_I2CEx_ConfigAnalogFilter>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001246:	f000 f9f5 	bl	8001634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x74>)
 800124e:	f001 fe8b 	bl	8002f68 <HAL_I2CEx_ConfigDigitalFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 f9ec 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000c8 	.word	0x200000c8
 8001264:	40005400 	.word	0x40005400

08001268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM1_Init+0xe4>)
 8001296:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <MX_TIM1_Init+0xe8>)
 8001298:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_TIM1_Init+0xe4>)
 800129c:	2247      	movs	r2, #71	; 0x47
 800129e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM1_Init+0xe4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_TIM1_Init+0xe4>)
 80012a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_TIM1_Init+0xe4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_TIM1_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_TIM1_Init+0xe4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c0:	4822      	ldr	r0, [pc, #136]	; (800134c <MX_TIM1_Init+0xe4>)
 80012c2:	f003 faa3 	bl	800480c <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80012cc:	f000 f9b2 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_TIM1_Init+0xe4>)
 80012de:	f003 ffb1 	bl	8005244 <HAL_TIM_ConfigClockSource>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012e8:	f000 f9a4 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_TIM1_Init+0xe4>)
 80012ee:	f003 fc79 	bl	8004be4 <HAL_TIM_IC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012f8:	f000 f99c 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_TIM1_Init+0xe4>)
 8001310:	f004 fd74 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800131a:	f000 f98b 	bl	8001634 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM1_Init+0xe4>)
 8001336:	f003 fdd5 	bl	8004ee4 <HAL_TIM_IC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001340:	f000 f978 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000011c 	.word	0x2000011c
 8001350:	40012c00 	.word	0x40012c00

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001386:	4b2d      	ldr	r3, [pc, #180]	; (800143c <MX_TIM2_Init+0xe8>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_TIM2_Init+0xe8>)
 8001390:	227f      	movs	r2, #127	; 0x7f
 8001392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <MX_TIM2_Init+0xe8>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_TIM2_Init+0xe8>)
 800139c:	2214      	movs	r2, #20
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_TIM2_Init+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <MX_TIM2_Init+0xe8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ac:	4823      	ldr	r0, [pc, #140]	; (800143c <MX_TIM2_Init+0xe8>)
 80013ae:	f003 fa2d 	bl	800480c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013b8:	f000 f93c 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	481c      	ldr	r0, [pc, #112]	; (800143c <MX_TIM2_Init+0xe8>)
 80013ca:	f003 ff3b 	bl	8005244 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013d4:	f000 f92e 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d8:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_TIM2_Init+0xe8>)
 80013da:	f003 fabb 	bl	8004954 <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013e4:	f000 f926 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_TIM2_Init+0xe8>)
 80013f8:	f004 fd00 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001402:	f000 f917 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	; 0x60
 8001408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM2_Init+0xe8>)
 800141e:	f003 fdfd 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001428:	f000 f904 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM2_Init+0xe8>)
 800142e:	f000 fa27 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8001432:	bf00      	nop
 8001434:	3738      	adds	r7, #56	; 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000168 	.word	0x20000168

08001440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_USART1_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001484:	f004 fd3e 	bl	8005f04 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 f8d1 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001b4 	.word	0x200001b4
 800149c:	40013800 	.word	0x40013800

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <MX_GPIO_Init+0x188>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a5b      	ldr	r2, [pc, #364]	; (8001628 <MX_GPIO_Init+0x188>)
 80014bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <MX_GPIO_Init+0x188>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MX_GPIO_Init+0x188>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <MX_GPIO_Init+0x188>)
 80014d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <MX_GPIO_Init+0x188>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <MX_GPIO_Init+0x188>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <MX_GPIO_Init+0x188>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <MX_GPIO_Init+0x188>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <MX_GPIO_Init+0x188>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a49      	ldr	r2, [pc, #292]	; (8001628 <MX_GPIO_Init+0x188>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <MX_GPIO_Init+0x188>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f240 2183 	movw	r1, #643	; 0x283
 800151c:	4843      	ldr	r0, [pc, #268]	; (800162c <MX_GPIO_Init+0x18c>)
 800151e:	f001 fc31 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f240 6104 	movw	r1, #1540	; 0x604
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f001 fc2a 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001530:	2200      	movs	r2, #0
 8001532:	f24c 2179 	movw	r1, #49785	; 0xc279
 8001536:	483e      	ldr	r0, [pc, #248]	; (8001630 <MX_GPIO_Init+0x190>)
 8001538:	f001 fc24 	bl	8002d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 800153c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <MX_GPIO_Init+0x18c>)
 8001552:	f001 fa8d 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8001556:	2303      	movs	r3, #3
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	482f      	ldr	r0, [pc, #188]	; (800162c <MX_GPIO_Init+0x18c>)
 800156e:	f001 fa7f 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001572:	230a      	movs	r3, #10
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 fa72 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA9 RelayModule_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin;
 800158c:	f240 6304 	movw	r3, #1540	; 0x604
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f001 fa62 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_GPIO_Init+0x190>)
 80015c4:	f001 fa54 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 PB4
                           PB5 PB6 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80015c8:	f24c 2378 	movw	r3, #49784	; 0xc278
 80015cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <MX_GPIO_Init+0x190>)
 80015e2:	f001 fa45 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80015e6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <MX_GPIO_Init+0x18c>)
 8001600:	f001 fa36 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_GPIO_Init+0x190>)
 800161a:	f001 fa29 	bl	8002a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	48000800 	.word	0x48000800
 8001630:	48000400 	.word	0x48000400

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x44>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x44>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x44>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x44>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a8:	d124      	bne.n	80016f4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_ADC_MspInit+0x74>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f001 f9be 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <HAL_I2C_MspInit+0xb8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d145      	bne.n	80017ae <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001758:	2312      	movs	r3, #18
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f001 f97d 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001786:	2304      	movs	r3, #4
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_I2C_MspInit+0xc0>)
 8001792:	f001 f96d 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_I2C_MspInit+0xbc>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000400 	.word	0x48000400

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a25      	ldr	r2, [pc, #148]	; (8001878 <HAL_TIM_Base_MspInit+0xb4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d132      	bne.n	800184c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 80017ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001828:	2306      	movs	r3, #6
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 f91b 	bl	8002a70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201b      	movs	r0, #27
 8001840:	f001 f8df 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001844:	201b      	movs	r0, #27
 8001846:	f001 f8f8 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800184a:	e010      	b.n	800186e <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d10b      	bne.n	800186e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_TIM_Base_MspInit+0xb8>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d11c      	bne.n	80018dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_TIM_MspPostInit+0x64>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_TIM_MspPostInit+0x64>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_TIM_MspPostInit+0x64>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <HAL_TIM_MspPostInit+0x68>)
 80018d8:	f001 f8ca 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000400 	.word	0x48000400

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_UART_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d127      	bne.n	800195e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_UART_MspInit+0x80>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_UART_MspInit+0x80>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_UART_MspInit+0x80>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_UART_MspInit+0x80>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_UART_MspInit+0x80>)
 800192c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_UART_MspInit+0x80>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800193e:	2330      	movs	r3, #48	; 0x30
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194e:	2307      	movs	r3, #7
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_UART_MspInit+0x84>)
 800195a:	f001 f889 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f8c4 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM1_CC_IRQHandler+0x10>)
 80019ce:	f003 f96a 	bl	8004ca6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000011c 	.word	0x2000011c

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f004 fe3c 	bl	8006688 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20004000 	.word	0x20004000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000250 	.word	0x20000250
 8001a44:	200003a0 	.word	0x200003a0

08001a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 fdfb 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff f92b 	bl	8000cf8 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aa4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ab0:	08007064 	.word	0x08007064
  ldr r2, =_sbss
 8001ab4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ab8:	200003a0 	.word	0x200003a0

08001abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 ff8b 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fdb0 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 ffa3 	bl	8002a56 <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b28:	f000 ff6b 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000254 	.word	0x20000254

08001b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000254 	.word	0x20000254

08001b8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_Delay+0x44>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09a      	sub	sp, #104	; 0x68
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e169      	b.n	8001ec8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d176      	bne.n	8001cf4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d152      	bne.n	8001cb4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fd2d 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d13b      	bne.n	8001cb4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fd9f 	bl	8002780 <ADC_Disable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d12f      	bne.n	8001cb4 <HAL_ADC_Init+0xe0>
 8001c54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d12b      	bne.n	8001cb4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c64:	f023 0302 	bic.w	r3, r3, #2
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c7e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c90:	4b8f      	ldr	r3, [pc, #572]	; (8001ed0 <HAL_ADC_Init+0x2fc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a8f      	ldr	r2, [pc, #572]	; (8001ed4 <HAL_ADC_Init+0x300>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0c9a      	lsrs	r2, r3, #18
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca6:	e002      	b.n	8001cae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd0:	d110      	bne.n	8001cf4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f023 0312 	bic.w	r3, r3, #18
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 80d6 	bne.w	8001eae <HAL_ADC_Init+0x2da>
 8001d02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80d1 	bne.w	8001eae <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80c9 	bne.w	8001eae <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d24:	f043 0202 	orr.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_ADC_Init+0x304>)
 8001d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d108      	bne.n	8001d54 <HAL_ADC_Init+0x180>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_Init+0x180>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_Init+0x182>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11c      	bne.n	8001d94 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d010      	beq.n	8001d82 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_ADC_Init+0x1a8>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_Init+0x1a8>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_Init+0x1aa>
 8001d7c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d92:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e5b      	ldrb	r3, [r3, #25]
 8001d98:	035b      	lsls	r3, r3, #13
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_ADC_Init+0x1d4>
 8001da2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da6:	e000      	b.n	8001daa <HAL_ADC_Init+0x1d6>
 8001da8:	2200      	movs	r2, #0
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11b      	bne.n	8001e00 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7e5b      	ldrb	r3, [r3, #25]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	045a      	lsls	r2, r3, #17
 8001dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	663b      	str	r3, [r7, #96]	; 0x60
 8001de2:	e00d      	b.n	8001e00 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d007      	beq.n	8001e18 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	4313      	orrs	r3, r2
 8001e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e14:	4313      	orrs	r3, r2
 8001e16:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7e1b      	ldrb	r3, [r3, #24]
 8001e3e:	039a      	lsls	r2, r3, #14
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_ADC_Init+0x308>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e60:	430b      	orrs	r3, r1
 8001e62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10c      	bne.n	8001e86 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f023 010f 	bic.w	r1, r3, #15
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
 8001e84:	e007      	b.n	8001e96 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020f 	bic.w	r2, r2, #15
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8001eac:	e00a      	b.n	8001ec4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f023 0312 	bic.w	r3, r3, #18
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3768      	adds	r7, #104	; 0x68
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	50000300 	.word	0x50000300
 8001edc:	fff0c007 	.word	0xfff0c007

08001ee0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d158      	bne.n	8001fac <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_Start+0x28>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e054      	b.n	8001fb2 <HAL_ADC_Start+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fbd1 	bl	80026b8 <ADC_Enable>
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d140      	bne.n	8001fa2 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f023 0206 	bic.w	r2, r3, #6
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	221c      	movs	r2, #28
 8001f8e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0204 	orr.w	r2, r2, #4
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001faa:	e001      	b.n	8001fb0 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
 8001fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d102      	bne.n	8001fd8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e02e      	b.n	8002036 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_ADC_PollForConversion+0x178>)
 8001fda:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d112      	bne.n	800200e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11d      	bne.n	8002032 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e08d      	b.n	800212a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07b      	b.n	800212a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002032:	230c      	movs	r3, #12
 8002034:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800203e:	f7ff fd99 	bl	8001b74 <HAL_GetTick>
 8002042:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002044:	e021      	b.n	800208a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204c:	d01d      	beq.n	800208a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_PollForConversion+0xa8>
 8002054:	f7ff fd8e 	bl	8001b74 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d212      	bcs.n	800208a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0204 	orr.w	r2, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04f      	b.n	800212a <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0d6      	beq.n	8002046 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d131      	bne.n	8002116 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d12c      	bne.n	8002116 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d125      	bne.n	8002116 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d112      	bne.n	80020fe <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d112      	bne.n	8002116 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
 80020fc:	e00b      	b.n	8002116 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	50000300 	.word	0x50000300

08002138 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b09b      	sub	sp, #108	; 0x6c
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x22>
 8002172:	2302      	movs	r3, #2
 8002174:	e295      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x54e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8279 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d81c      	bhi.n	80021d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	461a      	mov	r2, r3
 80021aa:	231f      	movs	r3, #31
 80021ac:	4093      	lsls	r3, r2
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4019      	ands	r1, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa00 f203 	lsl.w	r2, r0, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
 80021ce:	e063      	b.n	8002298 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d81e      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	221f      	movs	r2, #31
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4019      	ands	r1, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	3b1e      	subs	r3, #30
 8002208:	fa00 f203 	lsl.w	r2, r0, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
 8002214:	e040      	b.n	8002298 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b0e      	cmp	r3, #14
 800221c:	d81e      	bhi.n	800225c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	3b3c      	subs	r3, #60	; 0x3c
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	3b3c      	subs	r3, #60	; 0x3c
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
 800225a:	e01d      	b.n	8002298 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	3b5a      	subs	r3, #90	; 0x5a
 8002270:	221f      	movs	r2, #31
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	4019      	ands	r1, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	3b5a      	subs	r3, #90	; 0x5a
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80e5 	bne.w	8002472 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d91c      	bls.n	80022ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4019      	ands	r1, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6898      	ldr	r0, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	3b1e      	subs	r3, #30
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	619a      	str	r2, [r3, #24]
 80022e8:	e019      	b.n	800231e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6959      	ldr	r1, [r3, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	2207      	movs	r2, #7
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6898      	ldr	r0, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	3b01      	subs	r3, #1
 800233c:	2b03      	cmp	r3, #3
 800233e:	d84f      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0x28c>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_ADC_ConfigChannel+0x1f4>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800237b 	.word	0x0800237b
 8002350:	0800239d 	.word	0x0800239d
 8002354:	080023bf 	.word	0x080023bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800235e:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_ADC_ConfigChannel+0x468>)
 8002360:	4013      	ands	r3, r2
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	0691      	lsls	r1, r2, #26
 8002368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800236a:	430a      	orrs	r2, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002376:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002378:	e07b      	b.n	8002472 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_ADC_ConfigChannel+0x468>)
 8002382:	4013      	ands	r3, r2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	0691      	lsls	r1, r2, #26
 800238a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800238c:	430a      	orrs	r2, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002398:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800239a:	e06a      	b.n	8002472 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023a2:	4b86      	ldr	r3, [pc, #536]	; (80025bc <HAL_ADC_ConfigChannel+0x468>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	0691      	lsls	r1, r2, #26
 80023ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023ae:	430a      	orrs	r2, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023ba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023bc:	e059      	b.n	8002472 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023c4:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_ADC_ConfigChannel+0x468>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	0691      	lsls	r1, r2, #26
 80023ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023d0:	430a      	orrs	r2, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023dc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023de:	e048      	b.n	8002472 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d107      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002402:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002426:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800242e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	429a      	cmp	r2, r3
 800243a:	d107      	bne.n	800244c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800244a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	069b      	lsls	r3, r3, #26
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800246e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002470:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d108      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x33e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x33e>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_ADC_ConfigChannel+0x340>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80fe 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d00f      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80024c0:	e049      	b.n	8002556 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2201      	movs	r2, #1
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d91c      	bls.n	800251e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6999      	ldr	r1, [r3, #24]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1b      	subs	r3, #27
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6898      	ldr	r0, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b1b      	subs	r3, #27
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	619a      	str	r2, [r3, #24]
 800251c:	e01b      	b.n	8002556 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	2207      	movs	r2, #7
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6898      	ldr	r0, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_ADC_ConfigChannel+0x46c>)
 8002558:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d105      	bne.n	800256e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d014      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002572:	2b11      	cmp	r3, #17
 8002574:	d105      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002586:	2b12      	cmp	r3, #18
 8002588:	f040 8085 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d17e      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10c      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x470>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x470>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e004      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x472>
 80025bc:	83fff000 	.word	0x83fff000
 80025c0:	50000300 	.word	0x50000300
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d150      	bne.n	800266c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x498>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x498>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_ADC_ConfigChannel+0x49a>
 80025ec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13c      	bne.n	800266c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d11d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x4e2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002602:	d118      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800260c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_ADC_ConfigChannel+0x55c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_ADC_ConfigChannel+0x560>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9a      	lsrs	r2, r3, #18
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002634:	e02e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b11      	cmp	r3, #17
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x502>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002646:	d106      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002652:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002654:	e01e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b12      	cmp	r3, #18
 800265c:	d11a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800266a:	e013      	b.n	8002694 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800267e:	e00a      	b.n	8002696 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002692:	e000      	b.n	8002696 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002694:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800269e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	376c      	adds	r7, #108	; 0x6c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <ADC_Enable+0x2c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <ADC_Enable+0x2c>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <ADC_Enable+0x2e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d143      	bne.n	8002772 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <ADC_Enable+0xc4>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e02f      	b.n	8002774 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002724:	f7ff fa26 	bl	8001b74 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800272a:	e01b      	b.n	8002764 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272c:	f7ff fa22 	bl	8001b74 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d914      	bls.n	8002764 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d00d      	beq.n	8002764 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d1dc      	bne.n	800272c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	8000003f 	.word	0x8000003f

08002780 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <ADC_Disable+0x2c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <ADC_Disable+0x2c>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <ADC_Disable+0x2e>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d047      	beq.n	8002842 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030d 	and.w	r3, r3, #13
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10f      	bne.n	80027e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0202 	orr.w	r2, r2, #2
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2203      	movs	r2, #3
 80027d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027d8:	f7ff f9cc 	bl	8001b74 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027de:	e029      	b.n	8002834 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e023      	b.n	8002844 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fc:	f7ff f9ba 	bl	8001b74 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d914      	bls.n	8002834 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e007      	b.n	8002844 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d0dc      	beq.n	80027fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7e:	e14e      	b.n	8002d1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8140 	beq.w	8002d18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d005      	beq.n	8002ab0 <HAL_GPIO_Init+0x40>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d130      	bne.n	8002b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0201 	and.w	r2, r3, #1
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d017      	beq.n	8002b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d123      	bne.n	8002ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	6939      	ldr	r1, [r7, #16]
 8002b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 809a 	beq.w	8002d18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be4:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <HAL_GPIO_Init+0x2cc>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x2cc>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6193      	str	r3, [r2, #24]
 8002bf0:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_GPIO_Init+0x2cc>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c26:	d013      	beq.n	8002c50 <HAL_GPIO_Init+0x1e0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_GPIO_Init+0x2d4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x1dc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <HAL_GPIO_Init+0x2d8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x1d8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x1d4>
 8002c40:	2303      	movs	r3, #3
 8002c42:	e006      	b.n	8002c52 <HAL_GPIO_Init+0x1e2>
 8002c44:	2305      	movs	r3, #5
 8002c46:	e004      	b.n	8002c52 <HAL_GPIO_Init+0x1e2>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e002      	b.n	8002c52 <HAL_GPIO_Init+0x1e2>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_GPIO_Init+0x1e2>
 8002c50:	2300      	movs	r3, #0
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	f002 0203 	and.w	r2, r2, #3
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	4093      	lsls	r3, r2
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c62:	4937      	ldr	r1, [pc, #220]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c94:	4a2e      	ldr	r2, [pc, #184]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d12:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f47f aea9 	bne.w	8002a80 <HAL_GPIO_Init+0x10>
  }
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010000 	.word	0x40010000
 8002d44:	48000400 	.word	0x48000400
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	48000c00 	.word	0x48000c00
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e081      	b.n	8002eca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fc90 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e006      	b.n	8002e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d104      	bne.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d138      	bne.n	8002f5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e032      	b.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2224      	movs	r2, #36	; 0x24
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d139      	bne.n	8002ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e033      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003006:	af00      	add	r7, sp, #0
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f001 b823 	b.w	800406c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 817d 	beq.w	8003336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800303c:	4bbc      	ldr	r3, [pc, #752]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00c      	beq.n	8003062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003048:	4bb9      	ldr	r3, [pc, #740]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d15c      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003054:	4bb6      	ldr	r3, [pc, #728]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d155      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_OscConfig+0x94>
 800308e:	4ba8      	ldr	r3, [pc, #672]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e015      	b.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 8003094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030bc:	4b9c      	ldr	r3, [pc, #624]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80030c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80030cc:	fa92 f2a2 	rbit	r2, r2
 80030d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80030d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 811f 	beq.w	8003334 <HAL_RCC_OscConfig+0x334>
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8116 	bne.w	8003334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f000 bfaf 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x12e>
 8003120:	4b83      	ldr	r3, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a82      	ldr	r2, [pc, #520]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e036      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x158>
 800313e:	4b7c      	ldr	r3, [pc, #496]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7b      	ldr	r2, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a78      	ldr	r2, [pc, #480]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e021      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x184>
 800316a:	4b71      	ldr	r3, [pc, #452]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a70      	ldr	r2, [pc, #448]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6e      	ldr	r3, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6d      	ldr	r2, [pc, #436]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a69      	ldr	r2, [pc, #420]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b67      	ldr	r3, [pc, #412]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a66      	ldr	r2, [pc, #408]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	495f      	ldr	r1, [pc, #380]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d059      	beq.n	800327a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fcd5 	bl	8001b74 <HAL_GetTick>
 80031ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fcd0 	bl	8001b74 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d902      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f000 bf43 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80031e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80031fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0x218>
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	e015      	b.n	8003244 <HAL_RCC_OscConfig+0x244>
 8003218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800324c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003250:	fa92 f2a2 	rbit	r2, r2
 8003254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f042 0220 	orr.w	r2, r2, #32
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f002 021f 	and.w	r2, r2, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f202 	lsl.w	r2, r1, r2
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ab      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1d0>
 8003278:	e05d      	b.n	8003336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fc7b 	bl	8001b74 <HAL_GetTick>
 800327e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fc76 	bl	8001b74 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d902      	bls.n	800329a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	f000 bee9 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 800329a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0x2cc>
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e015      	b.n	80032f8 <HAL_RCC_OscConfig+0x2f8>
 80032cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCC_OscConfig+0x330>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800330c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ab      	bne.n	8003284 <HAL_RCC_OscConfig+0x284>
 800332c:	e003      	b.n	8003336 <HAL_RCC_OscConfig+0x336>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 817d 	beq.w	8003646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800334c:	4ba6      	ldr	r3, [pc, #664]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003358:	4ba3      	ldr	r3, [pc, #652]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d172      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003364:	4ba0      	ldr	r3, [pc, #640]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d16c      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3a0>
 800339a:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e013      	b.n	80033c8 <HAL_RCC_OscConfig+0x3c8>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80033c4:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2202      	movs	r2, #2
 80033ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80033ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033d2:	fa92 f2a2 	rbit	r2, r2
 80033d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80033da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCC_OscConfig+0x410>
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d002      	beq.n	8003410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f000 be2e 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b75      	ldr	r3, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	21f8      	movs	r1, #248	; 0xf8
 8003426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800342e:	fa91 f1a1 	rbit	r1, r1
 8003432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800343a:	fab1 f181 	clz	r1, r1
 800343e:	b2c9      	uxtb	r1, r1
 8003440:	408b      	lsls	r3, r1
 8003442:	4969      	ldr	r1, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003448:	e0fd      	b.n	8003646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8088 	beq.w	800356c <HAL_RCC_OscConfig+0x56c>
 800345c:	2301      	movs	r3, #1
 800345e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800346e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800347c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	461a      	mov	r2, r3
 8003484:	2301      	movs	r3, #1
 8003486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fb74 	bl	8001b74 <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fb6f 	bl	8001b74 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f000 bde2 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80034ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4d8>
 80034d2:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x500>
 80034d8:	2302      	movs	r3, #2
 80034da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034ea:	2302      	movs	r3, #2
 80034ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2202      	movs	r2, #2
 8003502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0af      	beq.n	8003492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	21f8      	movs	r1, #248	; 0xf8
 8003548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003550:	fa91 f1a1 	rbit	r1, r1
 8003554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800355c:	fab1 f181 	clz	r1, r1
 8003560:	b2c9      	uxtb	r1, r1
 8003562:	408b      	lsls	r3, r1
 8003564:	4920      	ldr	r1, [pc, #128]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
 800356a:	e06c      	b.n	8003646 <HAL_RCC_OscConfig+0x646>
 800356c:	2301      	movs	r3, #1
 800356e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800357e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800358c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe faec 	bl	8001b74 <HAL_GetTick>
 800359c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fae7 	bl	8001b74 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f000 bd5a 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80035ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d104      	bne.n	80035ec <HAL_RCC_OscConfig+0x5ec>
 80035e2:	4b01      	ldr	r3, [pc, #4]	; (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e015      	b.n	8003614 <HAL_RCC_OscConfig+0x614>
 80035e8:	40021000 	.word	0x40021000
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003610:	4bc8      	ldr	r3, [pc, #800]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	2202      	movs	r2, #2
 8003616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800361a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800361e:	fa92 f2a2 	rbit	r2, r2
 8003622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0220 	orr.w	r2, r2, #32
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ad      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8110 	beq.w	800387c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d079      	beq.n	8003760 <HAL_RCC_OscConfig+0x760>
 800366c:	2301      	movs	r3, #1
 800366e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800367e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4bab      	ldr	r3, [pc, #684]	; (8003938 <HAL_RCC_OscConfig+0x938>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fe fa6d 	bl	8001b74 <HAL_GetTick>
 800369a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fe fa68 	bl	8001b74 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d902      	bls.n	80036b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f000 bcdb 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036d0:	2202      	movs	r2, #2
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036f4:	2202      	movs	r2, #2
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800370e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003710:	4b88      	ldr	r3, [pc, #544]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 8003712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800371c:	2102      	movs	r1, #2
 800371e:	6019      	str	r1, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f1a3 	rbit	r1, r3
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003736:	6019      	str	r1, [r3, #0]
  return result;
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0a0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x6a0>
 800375e:	e08d      	b.n	800387c <HAL_RCC_OscConfig+0x87c>
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003782:	601a      	str	r2, [r3, #0]
  return result;
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800378c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x938>)
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f9e7 	bl	8001b74 <HAL_GetTick>
 80037a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe f9e2 	bl	8001b74 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	f000 bc55 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003812:	2202      	movs	r2, #2
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800382c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382e:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 8003830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800383a:	2102      	movs	r1, #2
 800383c:	6019      	str	r1, [r3, #0]
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	fa93 f1a3 	rbit	r1, r3
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003854:	6019      	str	r1, [r3, #0]
  return result;
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d197      	bne.n	80037ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 81a1 	beq.w	8003bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a22      	ldr	r2, [pc, #136]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <HAL_RCC_OscConfig+0x93c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11a      	bne.n	8003914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_RCC_OscConfig+0x93c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_RCC_OscConfig+0x93c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fe f943 	bl	8001b74 <HAL_GetTick>
 80038ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	e009      	b.n	8003908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fe f93e 	bl	8001b74 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	; 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e3b1      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_RCC_OscConfig+0x93c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_OscConfig+0x940>
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a02      	ldr	r2, [pc, #8]	; (8003934 <HAL_RCC_OscConfig+0x934>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	e03c      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	10908120 	.word	0x10908120
 800393c:	40007000 	.word	0x40007000
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x96a>
 8003950:	4bc1      	ldr	r3, [pc, #772]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4ac0      	ldr	r2, [pc, #768]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	4bbe      	ldr	r3, [pc, #760]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4abd      	ldr	r2, [pc, #756]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	e020      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x994>
 800397a:	4bb7      	ldr	r3, [pc, #732]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4ab6      	ldr	r2, [pc, #728]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	4bb4      	ldr	r3, [pc, #720]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4ab3      	ldr	r2, [pc, #716]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6213      	str	r3, [r2, #32]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 8003994:	4bb0      	ldr	r3, [pc, #704]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4aaf      	ldr	r2, [pc, #700]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	4bad      	ldr	r3, [pc, #692]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4aac      	ldr	r2, [pc, #688]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 80039a6:	f023 0304 	bic.w	r3, r3, #4
 80039aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8081 	beq.w	8003ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe f8d9 	bl	8001b74 <HAL_GetTick>
 80039c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe f8d4 	bl	8001b74 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e345      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039e8:	2202      	movs	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a26:	601a      	str	r2, [r3, #0]
  return result;
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_OscConfig+0xa4c>
 8003a46:	4b84      	ldr	r3, [pc, #528]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	e013      	b.n	8003a74 <HAL_RCC_OscConfig+0xa74>
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a54:	2202      	movs	r2, #2
 8003a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	6011      	str	r1, [r2, #0]
 8003a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	fa92 f1a2 	rbit	r1, r2
 8003a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a96:	6011      	str	r1, [r2, #0]
  return result;
 8003a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f002 021f 	and.w	r2, r2, #31
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d084      	beq.n	80039c8 <HAL_RCC_OscConfig+0x9c8>
 8003abe:	e07f      	b.n	8003bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f858 	bl	8001b74 <HAL_GetTick>
 8003ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe f853 	bl	8001b74 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e2c4      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003aea:	2202      	movs	r2, #2
 8003aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b0e:	2202      	movs	r2, #2
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	fa93 f2a3 	rbit	r2, r3
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b28:	601a      	str	r2, [r3, #0]
  return result;
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0xb4e>
 8003b48:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	e013      	b.n	8003b76 <HAL_RCC_OscConfig+0xb76>
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b7e:	2102      	movs	r1, #2
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b98:	6011      	str	r1, [r2, #0]
  return result;
 8003b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d184      	bne.n	8003aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8242 	beq.w	800406a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	f000 8213 	beq.w	800401a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f040 8162 	bne.w	8003eca <HAL_RCC_OscConfig+0xeca>
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd ff92 	bl	8001b74 <HAL_GetTick>
 8003c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_OscConfig+0xc70>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd ff8a 	bl	8001b74 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1fd      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	fa93 f2a3 	rbit	r2, r3
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c94:	601a      	str	r2, [r3, #0]
  return result;
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0xcba>
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e027      	b.n	8003d0a <HAL_RCC_OscConfig+0xd0a>
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	4b9c      	ldr	r3, [pc, #624]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d16:	6011      	str	r1, [r2, #0]
 8003d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	fa92 f1a2 	rbit	r1, r2
 8003d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d2e:	6011      	str	r1, [r2, #0]
  return result;
 8003d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d182      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	497f      	ldr	r1, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	fa93 f2a3 	rbit	r2, r3
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003da2:	601a      	str	r2, [r3, #0]
  return result;
 8003da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fed6 	bl	8001b74 <HAL_GetTick>
 8003dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fd fed1 	bl	8001b74 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e144      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	fa93 f2a3 	rbit	r2, r3
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e06:	601a      	str	r2, [r3, #0]
  return result;
 8003e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe2c>
 8003e26:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	e027      	b.n	8003e7c <HAL_RCC_OscConfig+0xe7c>
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fa93 f2a3 	rbit	r2, r3
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fa92 f1a2 	rbit	r1, r2
 8003e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ea0:	6011      	str	r1, [r2, #0]
  return result;
 8003ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	fab2 f282 	clz	r2, r2
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f042 0220 	orr.w	r2, r2, #32
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	f002 021f 	and.w	r2, r2, #31
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d082      	beq.n	8003dce <HAL_RCC_OscConfig+0xdce>
 8003ec8:	e0cf      	b.n	800406a <HAL_RCC_OscConfig+0x106a>
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003eee:	601a      	str	r2, [r3, #0]
  return result;
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd fe30 	bl	8001b74 <HAL_GetTick>
 8003f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	e009      	b.n	8003f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd fe2b 	bl	8001b74 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e09e      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f52:	601a      	str	r2, [r3, #0]
  return result;
 8003f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d104      	bne.n	8003f7c <HAL_RCC_OscConfig+0xf7c>
 8003f72:	4b01      	ldr	r3, [pc, #4]	; (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	e029      	b.n	8003fcc <HAL_RCC_OscConfig+0xfcc>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x1078>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fd8:	6011      	str	r1, [r2, #0]
 8003fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	fa92 f1a2 	rbit	r1, r2
 8003fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ff0:	6011      	str	r1, [r2, #0]
  return result;
 8003ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	f002 021f 	and.w	r2, r2, #31
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f202 	lsl.w	r2, r1, r2
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d180      	bne.n	8003f1a <HAL_RCC_OscConfig+0xf1a>
 8004018:	e027      	b.n	800406a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e01e      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_OscConfig+0x1078>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800403a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	429a      	cmp	r2, r3
 800404c:	d10b      	bne.n	8004066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800404e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000

0800407c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b09e      	sub	sp, #120	; 0x78
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e162      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b8d      	ldr	r3, [pc, #564]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	498b      	ldr	r1, [pc, #556]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e14a      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	497f      	ldr	r1, [pc, #508]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80dc 	beq.w	80042a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d13c      	bne.n	8004172 <HAL_RCC_ClockConfig+0xf6>
 80040f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_ClockConfig+0xa6>
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e00f      	b.n	8004142 <HAL_RCC_ClockConfig+0xc6>
 8004122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	667b      	str	r3, [r7, #100]	; 0x64
 8004130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004134:	663b      	str	r3, [r7, #96]	; 0x60
 8004136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004146:	65ba      	str	r2, [r7, #88]	; 0x58
 8004148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004152:	fab2 f282 	clz	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f002 021f 	and.w	r2, r2, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d17b      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0f3      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d13c      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x178>
 800417a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x128>
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_ClockConfig+0x148>
 80041a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	647b      	str	r3, [r7, #68]	; 0x44
 80041b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13a      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b2      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80041f4:	2302      	movs	r3, #2
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_RCC_ClockConfig+0x1a0>
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e00d      	b.n	8004238 <HAL_RCC_ClockConfig+0x1bc>
 800421c:	2302      	movs	r3, #2
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2202      	movs	r2, #2
 800423a:	61ba      	str	r2, [r7, #24]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	617a      	str	r2, [r7, #20]
  return result;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e079      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	491a      	ldr	r1, [pc, #104]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fd fc7c 	bl	8001b74 <HAL_GetTick>
 800427c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fd fc78 	bl	8001b74 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e061      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d214      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 0207 	bic.w	r2, r3, #7
 80042be:	4906      	ldr	r1, [pc, #24]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e040      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	491a      	ldr	r1, [pc, #104]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4912      	ldr	r1, [pc, #72]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800431e:	f000 f829 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004322:	4601      	mov	r1, r0
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432c:	22f0      	movs	r2, #240	; 0xf0
 800432e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	60fa      	str	r2, [r7, #12]
  return result;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fab2 f282 	clz	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	40d3      	lsrs	r3, r2
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x2ec>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	fa21 f303 	lsr.w	r3, r1, r3
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <HAL_RCC_ClockConfig+0x2f0>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_RCC_ClockConfig+0x2f4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd fbca 	bl	8001aec <HAL_InitTick>
  
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3778      	adds	r7, #120	; 0x78
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	08006ff0 	.word	0x08006ff0
 800436c:	20000000 	.word	0x20000000
 8004370:	20000004 	.word	0x20000004

08004374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b08b      	sub	sp, #44	; 0x2c
 8004378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x30>
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x36>
 80043a2:	e03c      	b.n	800441e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043a6:	623b      	str	r3, [r7, #32]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	fa92 f2a2 	rbit	r2, r2
 80043bc:	607a      	str	r2, [r7, #4]
  return result;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	fab2 f282 	clz	r2, r2
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	40d3      	lsrs	r3, r2
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_RCC_GetSysClockFreq+0xc8>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	220f      	movs	r2, #15
 80043d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	fa92 f2a2 	rbit	r2, r2
 80043e0:	60fa      	str	r2, [r7, #12]
  return result;
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	40d3      	lsrs	r3, r2
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e004      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	623b      	str	r3, [r7, #32]
      break;
 800441c:	e002      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004420:	623b      	str	r3, [r7, #32]
      break;
 8004422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004424:	6a3b      	ldr	r3, [r7, #32]
}
 8004426:	4618      	mov	r0, r3
 8004428:	372c      	adds	r7, #44	; 0x2c
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	007a1200 	.word	0x007a1200
 800443c:	08007008 	.word	0x08007008
 8004440:	08007018 	.word	0x08007018
 8004444:	003d0900 	.word	0x003d0900

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004466:	f7ff ffef 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 800446a:	4601      	mov	r1, r0
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	603a      	str	r2, [r7, #0]
  return result;
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	fab2 f282 	clz	r2, r2
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	40d3      	lsrs	r3, r2
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08007000 	.word	0x08007000

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044aa:	f7ff ffcd 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 80044ae:	4601      	mov	r1, r0
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	fa92 f2a2 	rbit	r2, r2
 80044c4:	603a      	str	r2, [r7, #0]
  return result;
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	fab2 f282 	clz	r2, r2
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	40d3      	lsrs	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08007000 	.word	0x08007000

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b092      	sub	sp, #72	; 0x48
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80d4 	beq.w	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450c:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10e      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a4a      	ldr	r2, [pc, #296]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004522:	61d3      	str	r3, [r2, #28]
 8004524:	4b48      	ldr	r3, [pc, #288]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b45      	ldr	r3, [pc, #276]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b42      	ldr	r3, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a41      	ldr	r2, [pc, #260]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fd fb11 	bl	8001b74 <HAL_GetTick>
 8004552:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fd fb0d 	bl	8001b74 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b64      	cmp	r3, #100	; 0x64
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e14b      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004574:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8084 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004590:	429a      	cmp	r2, r3
 8004592:	d07c      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800459e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	2301      	movs	r3, #1
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d04b      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd fabd 	bl	8001b74 <HAL_GetTick>
 80045fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fab9 	bl	8001b74 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0f5      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004614:	2302      	movs	r3, #2
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	2302      	movs	r3, #2
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	61fb      	str	r3, [r7, #28]
  return result;
 800462c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d108      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004642:	4b01      	ldr	r3, [pc, #4]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	e00d      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	10908100 	.word	0x10908100
 8004654:	2302      	movs	r3, #2
 8004656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	4b69      	ldr	r3, [pc, #420]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2202      	movs	r2, #2
 8004666:	613a      	str	r2, [r7, #16]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	fa92 f2a2 	rbit	r2, r2
 800466e:	60fa      	str	r2, [r7, #12]
  return result;
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	fab2 f282 	clz	r2, r2
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f002 021f 	and.w	r2, r2, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f202 	lsl.w	r2, r1, r2
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0b7      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800468e:	4b5e      	ldr	r3, [pc, #376]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	495b      	ldr	r1, [pc, #364]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800469c:	4313      	orrs	r3, r2
 800469e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b57      	ldr	r3, [pc, #348]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4a56      	ldr	r2, [pc, #344]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c0:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f023 0203 	bic.w	r2, r3, #3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494e      	ldr	r1, [pc, #312]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046de:	4b4a      	ldr	r3, [pc, #296]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f023 0210 	bic.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4947      	ldr	r1, [pc, #284]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046fc:	4b42      	ldr	r3, [pc, #264]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	493f      	ldr	r1, [pc, #252]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f023 0220 	bic.w	r2, r3, #32
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4938      	ldr	r1, [pc, #224]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004728:	4313      	orrs	r3, r2
 800472a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004738:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	4930      	ldr	r1, [pc, #192]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004756:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4929      	ldr	r1, [pc, #164]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4921      	ldr	r1, [pc, #132]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004782:	4313      	orrs	r3, r2
 8004784:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	491a      	ldr	r1, [pc, #104]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047b0:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	4912      	ldr	r1, [pc, #72]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	490b      	ldr	r1, [pc, #44]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4903      	ldr	r1, [pc, #12]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3748      	adds	r7, #72	; 0x48
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc ffc6 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fdf6 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e033      	b.n	800493c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_TIM_Base_Start+0x8c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIM_Base_Start+0x3e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d004      	beq.n	80048fa <HAL_TIM_Base_Start+0x3e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_TIM_Base_Start+0x90>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_TIM_Base_Start+0x94>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d015      	beq.n	8004938 <HAL_TIM_Base_Start+0x7c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d011      	beq.n	8004938 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e008      	b.n	8004938 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e000      	b.n	800493a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40014000 	.word	0x40014000
 8004950:	00010007 	.word	0x00010007

08004954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f841 	bl	8004a02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fd52 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x24>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e03c      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x9e>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d109      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x3e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e02f      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x9e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start+0x58>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e022      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x9e>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d109      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x72>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e015      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x9e>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d109      	bne.n	8004aa4 <HAL_TIM_PWM_Start+0x8c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x9e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e083      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0xb6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	e023      	b.n	8004b16 <HAL_TIM_PWM_Start+0xfe>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xc6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	e01b      	b.n	8004b16 <HAL_TIM_PWM_Start+0xfe>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start+0xd6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	e013      	b.n	8004b16 <HAL_TIM_PWM_Start+0xfe>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_PWM_Start+0xe6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004afc:	e00b      	b.n	8004b16 <HAL_TIM_PWM_Start+0xfe>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_PWM_Start+0xf6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	e003      	b.n	8004b16 <HAL_TIM_PWM_Start+0xfe>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 f946 	bl	8005db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <HAL_TIM_PWM_Start+0x1b8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_TIM_PWM_Start+0x134>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <HAL_TIM_PWM_Start+0x1bc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_TIM_PWM_Start+0x134>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <HAL_TIM_PWM_Start+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_TIM_PWM_Start+0x134>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <HAL_TIM_PWM_Start+0x1c4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x138>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_TIM_PWM_Start+0x13a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_TIM_PWM_Start+0x1b8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIM_PWM_Start+0x16c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_PWM_Start+0x16c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIM_PWM_Start+0x1bc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d115      	bne.n	8004bb0 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <HAL_TIM_PWM_Start+0x1c8>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d015      	beq.n	8004bc2 <HAL_TIM_PWM_Start+0x1aa>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d011      	beq.n	8004bc2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	e008      	b.n	8004bc2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e000      	b.n	8004bc4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800
 8004be0:	00010007 	.word	0x00010007

08004be4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e049      	b.n	8004c8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f841 	bl	8004c92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f000 fc0a 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d122      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d11b      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0202 	mvn.w	r2, #2
 8004cd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb88 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8004cee:	e005      	b.n	8004cfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb7a 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fb8b 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d122      	bne.n	8004d56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d11b      	bne.n	8004d56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f06f 0204 	mvn.w	r2, #4
 8004d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb5e 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8004d42:	e005      	b.n	8004d50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb50 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fb61 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d122      	bne.n	8004daa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d11b      	bne.n	8004daa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0208 	mvn.w	r2, #8
 8004d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fb34 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8004d96:	e005      	b.n	8004da4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb26 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fb37 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d122      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d11b      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0210 	mvn.w	r2, #16
 8004dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fb0a 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8004dea:	e005      	b.n	8004df8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fafc 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fb0d 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10e      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0201 	mvn.w	r2, #1
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fad6 	bl	80053d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d10e      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d107      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 f843 	bl	8005edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	d10e      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d107      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f001 f836 	bl	8005ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fabb 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d10e      	bne.n	8004edc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0220 	mvn.w	r2, #32
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fff6 	bl	8005ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e088      	b.n	8005014 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d11b      	bne.n	8004f48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004f20:	f000 fda0 	bl	8005a64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 020c 	bic.w	r2, r2, #12
 8004f32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6999      	ldr	r1, [r3, #24]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	619a      	str	r2, [r3, #24]
 8004f46:	e060      	b.n	800500a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d11c      	bne.n	8004f88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004f5e:	f000 fe06 	bl	8005b6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6999      	ldr	r1, [r3, #24]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	021a      	lsls	r2, r3, #8
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	619a      	str	r2, [r3, #24]
 8004f86:	e040      	b.n	800500a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004f9e:	f000 fe53 	bl	8005c48 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 020c 	bic.w	r2, r2, #12
 8004fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
 8004fc4:	e021      	b.n	800500a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b0c      	cmp	r3, #12
 8004fca:	d11c      	bne.n	8005006 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004fdc:	f000 fe70 	bl	8005cc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69d9      	ldr	r1, [r3, #28]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
 8005004:	e001      	b.n	800500a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0ff      	b.n	800523a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b14      	cmp	r3, #20
 8005046:	f200 80f0 	bhi.w	800522a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050a5 	.word	0x080050a5
 8005054:	0800522b 	.word	0x0800522b
 8005058:	0800522b 	.word	0x0800522b
 800505c:	0800522b 	.word	0x0800522b
 8005060:	080050e5 	.word	0x080050e5
 8005064:	0800522b 	.word	0x0800522b
 8005068:	0800522b 	.word	0x0800522b
 800506c:	0800522b 	.word	0x0800522b
 8005070:	08005127 	.word	0x08005127
 8005074:	0800522b 	.word	0x0800522b
 8005078:	0800522b 	.word	0x0800522b
 800507c:	0800522b 	.word	0x0800522b
 8005080:	08005167 	.word	0x08005167
 8005084:	0800522b 	.word	0x0800522b
 8005088:	0800522b 	.word	0x0800522b
 800508c:	0800522b 	.word	0x0800522b
 8005090:	080051a9 	.word	0x080051a9
 8005094:	0800522b 	.word	0x0800522b
 8005098:	0800522b 	.word	0x0800522b
 800509c:	0800522b 	.word	0x0800522b
 80050a0:	080051e9 	.word	0x080051e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fa34 	bl	8005518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
      break;
 80050e2:	e0a5      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fa9a 	bl	8005624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	619a      	str	r2, [r3, #24]
      break;
 8005124:	e084      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 faf9 	bl	8005724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0204 	bic.w	r2, r2, #4
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      break;
 8005164:	e064      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fb57 	bl	8005820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	021a      	lsls	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e043      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb9a 	bl	80058e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e6:	e023      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fbd8 	bl	80059a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005228:	e002      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x1c>
 800525c:	2302      	movs	r3, #2
 800525e:	e0b6      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x18a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529c:	d03e      	beq.n	800531c <HAL_TIM_ConfigClockSource+0xd8>
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a2:	f200 8087 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	f000 8086 	beq.w	80053ba <HAL_TIM_ConfigClockSource+0x176>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d87f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d01a      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xaa>
 80052b8:	2b70      	cmp	r3, #112	; 0x70
 80052ba:	d87b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d050      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x11e>
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d877      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d03c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xfe>
 80052c8:	2b50      	cmp	r3, #80	; 0x50
 80052ca:	d873      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d058      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x13e>
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d86f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d064      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052d8:	2b30      	cmp	r3, #48	; 0x30
 80052da:	d86b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d060      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d867      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d05a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15e>
 80052ec:	e062      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052fe:	f000 fd37 	bl	8005d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
      break;
 800531a:	e04f      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800532c:	f000 fd20 	bl	8005d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e03c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534e:	461a      	mov	r2, r3
 8005350:	f000 fbde 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2150      	movs	r1, #80	; 0x50
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fced 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005360:	e02c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536e:	461a      	mov	r2, r3
 8005370:	f000 fc3a 	bl	8005be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2160      	movs	r1, #96	; 0x60
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fcdd 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005380:	e01c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538e:	461a      	mov	r2, r3
 8005390:	f000 fbbe 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	; 0x40
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fccd 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80053a0:	e00c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fcc4 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80053b2:	e003      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <TIM_Base_SetConfig+0xcc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0x20>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d108      	bne.n	800546e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <TIM_Base_SetConfig+0xcc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0x5a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0x5a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a22      	ldr	r2, [pc, #136]	; (800550c <TIM_Base_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0x5a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a21      	ldr	r2, [pc, #132]	; (8005510 <TIM_Base_SetConfig+0xd4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0x5a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a20      	ldr	r2, [pc, #128]	; (8005514 <TIM_Base_SetConfig+0xd8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <TIM_Base_SetConfig+0xcc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0xb0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0d      	ldr	r2, [pc, #52]	; (800550c <TIM_Base_SetConfig+0xd0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <TIM_Base_SetConfig+0xd4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <TIM_Base_SetConfig+0xd8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d103      	bne.n	80054f4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	615a      	str	r2, [r3, #20]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800

08005518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 0302 	bic.w	r3, r3, #2
 8005564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_OC1_SetConfig+0xfc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC1_SetConfig+0x78>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a27      	ldr	r2, [pc, #156]	; (8005618 <TIM_OC1_SetConfig+0x100>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC1_SetConfig+0x78>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a26      	ldr	r2, [pc, #152]	; (800561c <TIM_OC1_SetConfig+0x104>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC1_SetConfig+0x78>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a25      	ldr	r2, [pc, #148]	; (8005620 <TIM_OC1_SetConfig+0x108>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10c      	bne.n	80055aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0308 	bic.w	r3, r3, #8
 8005596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <TIM_OC1_SetConfig+0xfc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_OC1_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <TIM_OC1_SetConfig+0x100>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_OC1_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <TIM_OC1_SetConfig+0x104>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_OC1_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <TIM_OC1_SetConfig+0x108>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d111      	bne.n	80055ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0210 	bic.w	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0320 	bic.w	r3, r3, #32
 8005672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a24      	ldr	r2, [pc, #144]	; (8005714 <TIM_OC2_SetConfig+0xf0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10d      	bne.n	80056a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <TIM_OC2_SetConfig+0xf0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_OC2_SetConfig+0xa0>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <TIM_OC2_SetConfig+0xf4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_OC2_SetConfig+0xa0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a19      	ldr	r2, [pc, #100]	; (800571c <TIM_OC2_SetConfig+0xf8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC2_SetConfig+0xa0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <TIM_OC2_SetConfig+0xfc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d113      	bne.n	80056ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a23      	ldr	r2, [pc, #140]	; (8005810 <TIM_OC3_SetConfig+0xec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10d      	bne.n	80057a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <TIM_OC3_SetConfig+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00b      	beq.n	80057c2 <TIM_OC3_SetConfig+0x9e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <TIM_OC3_SetConfig+0xf0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d007      	beq.n	80057c2 <TIM_OC3_SetConfig+0x9e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <TIM_OC3_SetConfig+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <TIM_OC3_SetConfig+0x9e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <TIM_OC3_SetConfig+0xf8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d113      	bne.n	80057ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40014000 	.word	0x40014000
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800

08005820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800586e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <TIM_OC4_SetConfig+0xb8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_OC4_SetConfig+0x7c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <TIM_OC4_SetConfig+0xbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC4_SetConfig+0x7c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <TIM_OC4_SetConfig+0xc0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC4_SetConfig+0x7c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <TIM_OC4_SetConfig+0xc4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d109      	bne.n	80058b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	019b      	lsls	r3, r3, #6
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800

080058e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800592c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a15      	ldr	r2, [pc, #84]	; (8005994 <TIM_OC5_SetConfig+0xac>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_OC5_SetConfig+0x72>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <TIM_OC5_SetConfig+0xb0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_OC5_SetConfig+0x72>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <TIM_OC5_SetConfig+0xb4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC5_SetConfig+0x72>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TIM_OC5_SetConfig+0xb8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d109      	bne.n	800596e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800

080059a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	051b      	lsls	r3, r3, #20
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <TIM_OC6_SetConfig+0xb0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_OC6_SetConfig+0x74>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <TIM_OC6_SetConfig+0xb4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_OC6_SetConfig+0x74>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <TIM_OC6_SetConfig+0xb8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_OC6_SetConfig+0x74>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <TIM_OC6_SetConfig+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d109      	bne.n	8005a2c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800

08005a64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <TIM_TI1_SetConfig+0xa4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x3e>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d003      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x3e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <TIM_TI1_SetConfig+0xa8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <TIM_TI1_SetConfig+0x42>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <TIM_TI1_SetConfig+0x44>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e003      	b.n	8005ac6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 030a 	bic.w	r3, r3, #10
 8005ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 030a 	and.w	r3, r3, #10
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40014000 	.word	0x40014000

08005b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0201 	bic.w	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 030a 	bic.w	r3, r3, #10
 8005b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f023 0210 	bic.w	r2, r3, #16
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	031b      	lsls	r3, r3, #12
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 0210 	bic.w	r2, r3, #16
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	031b      	lsls	r3, r3, #12
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	031b      	lsls	r3, r3, #12
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	031b      	lsls	r3, r3, #12
 8005d18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f043 0307 	orr.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e04f      	b.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d10c      	bne.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40014000 	.word	0x40014000

08005ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e040      	b.n	8005f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fce0 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f82c 	bl	8005fa0 <UART_SetConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e022      	b.n	8005f98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f956 	bl	800620c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f9dd 	bl	8006350 <UART_CheckIdleState>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b8a      	ldr	r3, [pc, #552]	; (80061f4 <UART_SetConfig+0x254>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	6979      	ldr	r1, [r7, #20]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a78      	ldr	r2, [pc, #480]	; (80061f8 <UART_SetConfig+0x258>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d120      	bne.n	800605e <UART_SetConfig+0xbe>
 800601c:	4b77      	ldr	r3, [pc, #476]	; (80061fc <UART_SetConfig+0x25c>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d817      	bhi.n	8006058 <UART_SetConfig+0xb8>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0x90>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006041 	.word	0x08006041
 8006034:	0800604d 	.word	0x0800604d
 8006038:	08006053 	.word	0x08006053
 800603c:	08006047 	.word	0x08006047
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e01d      	b.n	8006082 <UART_SetConfig+0xe2>
 8006046:	2302      	movs	r3, #2
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e01a      	b.n	8006082 <UART_SetConfig+0xe2>
 800604c:	2304      	movs	r3, #4
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e017      	b.n	8006082 <UART_SetConfig+0xe2>
 8006052:	2308      	movs	r3, #8
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e014      	b.n	8006082 <UART_SetConfig+0xe2>
 8006058:	2310      	movs	r3, #16
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e011      	b.n	8006082 <UART_SetConfig+0xe2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a67      	ldr	r2, [pc, #412]	; (8006200 <UART_SetConfig+0x260>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d102      	bne.n	800606e <UART_SetConfig+0xce>
 8006068:	2300      	movs	r3, #0
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e009      	b.n	8006082 <UART_SetConfig+0xe2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a64      	ldr	r2, [pc, #400]	; (8006204 <UART_SetConfig+0x264>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d102      	bne.n	800607e <UART_SetConfig+0xde>
 8006078:	2300      	movs	r3, #0
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e001      	b.n	8006082 <UART_SetConfig+0xe2>
 800607e:	2310      	movs	r3, #16
 8006080:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	d15a      	bne.n	8006142 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800608c:	7ffb      	ldrb	r3, [r7, #31]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d827      	bhi.n	80060e2 <UART_SetConfig+0x142>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0xf8>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe f9d0 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80060c0:	61b8      	str	r0, [r7, #24]
        break;
 80060c2:	e013      	b.n	80060ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fe f9ee 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 80060c8:	61b8      	str	r0, [r7, #24]
        break;
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b4e      	ldr	r3, [pc, #312]	; (8006208 <UART_SetConfig+0x268>)
 80060ce:	61bb      	str	r3, [r7, #24]
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fe f94f 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 80060d6:	61b8      	str	r0, [r7, #24]
        break;
 80060d8:	e008      	b.n	80060ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	61bb      	str	r3, [r7, #24]
        break;
 80060e0:	e004      	b.n	80060ec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	77bb      	strb	r3, [r7, #30]
        break;
 80060ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d074      	beq.n	80061dc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	005a      	lsls	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	441a      	add	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d916      	bls.n	800613c <UART_SetConfig+0x19c>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d212      	bcs.n	800613c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f023 030f 	bic.w	r3, r3, #15
 800611e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	b29b      	uxth	r3, r3
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	b29a      	uxth	r2, r3
 800612c:	89fb      	ldrh	r3, [r7, #14]
 800612e:	4313      	orrs	r3, r2
 8006130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	89fa      	ldrh	r2, [r7, #14]
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e04f      	b.n	80061dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77bb      	strb	r3, [r7, #30]
 8006140:	e04c      	b.n	80061dc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b08      	cmp	r3, #8
 8006146:	d828      	bhi.n	800619a <UART_SetConfig+0x1fa>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x1b0>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	0800619b 	.word	0x0800619b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800619b 	.word	0x0800619b
 8006168:	0800619b 	.word	0x0800619b
 800616c:	0800619b 	.word	0x0800619b
 8006170:	08006193 	.word	0x08006193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fe f974 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006178:	61b8      	str	r0, [r7, #24]
        break;
 800617a:	e013      	b.n	80061a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617c:	f7fe f992 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006180:	61b8      	str	r0, [r7, #24]
        break;
 8006182:	e00f      	b.n	80061a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <UART_SetConfig+0x268>)
 8006186:	61bb      	str	r3, [r7, #24]
        break;
 8006188:	e00c      	b.n	80061a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7fe f8f3 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 800618e:	61b8      	str	r0, [r7, #24]
        break;
 8006190:	e008      	b.n	80061a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	61bb      	str	r3, [r7, #24]
        break;
 8006198:	e004      	b.n	80061a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	77bb      	strb	r3, [r7, #30]
        break;
 80061a2:	bf00      	nop
    }

    if (pclk != 0U)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	085a      	lsrs	r2, r3, #1
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	441a      	add	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b0f      	cmp	r3, #15
 80061c2:	d909      	bls.n	80061d8 <UART_SetConfig+0x238>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ca:	d205      	bcs.n	80061d8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	e001      	b.n	80061dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	efff69f3 	.word	0xefff69f3
 80061f8:	40013800 	.word	0x40013800
 80061fc:	40021000 	.word	0x40021000
 8006200:	40004400 	.word	0x40004400
 8006204:	40004800 	.word	0x40004800
 8006208:	007a1200 	.word	0x007a1200

0800620c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01a      	beq.n	8006322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d10a      	bne.n	8006322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b098      	sub	sp, #96	; 0x60
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006360:	f7fb fc08 	bl	8001b74 <HAL_GetTick>
 8006364:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b08      	cmp	r3, #8
 8006372:	d12e      	bne.n	80063d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f88c 	bl	80064a0 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d021      	beq.n	80063d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a2:	653b      	str	r3, [r7, #80]	; 0x50
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
 80063ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e062      	b.n	8006498 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d149      	bne.n	8006474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e8:	2200      	movs	r2, #0
 80063ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f856 	bl	80064a0 <UART_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d03c      	beq.n	8006474 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	623b      	str	r3, [r7, #32]
   return(result);
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
 800641a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800641e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60fb      	str	r3, [r7, #12]
   return(result);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800644c:	61fa      	str	r2, [r7, #28]
 800644e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	617b      	str	r3, [r7, #20]
   return(result);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e011      	b.n	8006498 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3758      	adds	r7, #88	; 0x58
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b0:	e049      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b8:	d045      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ba:	f7fb fb5b 	bl	8001b74 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d302      	bcc.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e048      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d031      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d110      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2208      	movs	r2, #8
 80064f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f838 	bl	800656e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2208      	movs	r2, #8
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e029      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006520:	d111      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800652a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f81e 	bl	800656e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e00f      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4013      	ands	r3, r2
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	bf0c      	ite	eq
 8006556:	2301      	moveq	r3, #1
 8006558:	2300      	movne	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	429a      	cmp	r2, r3
 8006562:	d0a6      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800656e:	b480      	push	{r7}
 8006570:	b095      	sub	sp, #84	; 0x54
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
 8006596:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800659a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f023 0301 	bic.w	r3, r3, #1
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d118      	bne.n	8006616 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0310 	bic.w	r3, r3, #16
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	613b      	str	r3, [r7, #16]
   return(result);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	669a      	str	r2, [r3, #104]	; 0x68
}
 800662a:	bf00      	nop
 800662c:	3754      	adds	r7, #84	; 0x54
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <siprintf>:
 8006638:	b40e      	push	{r1, r2, r3}
 800663a:	b500      	push	{lr}
 800663c:	b09c      	sub	sp, #112	; 0x70
 800663e:	ab1d      	add	r3, sp, #116	; 0x74
 8006640:	9002      	str	r0, [sp, #8]
 8006642:	9006      	str	r0, [sp, #24]
 8006644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006648:	4809      	ldr	r0, [pc, #36]	; (8006670 <siprintf+0x38>)
 800664a:	9107      	str	r1, [sp, #28]
 800664c:	9104      	str	r1, [sp, #16]
 800664e:	4909      	ldr	r1, [pc, #36]	; (8006674 <siprintf+0x3c>)
 8006650:	f853 2b04 	ldr.w	r2, [r3], #4
 8006654:	9105      	str	r1, [sp, #20]
 8006656:	6800      	ldr	r0, [r0, #0]
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	a902      	add	r1, sp, #8
 800665c:	f000 f89a 	bl	8006794 <_svfiprintf_r>
 8006660:	9b02      	ldr	r3, [sp, #8]
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	b01c      	add	sp, #112	; 0x70
 8006668:	f85d eb04 	ldr.w	lr, [sp], #4
 800666c:	b003      	add	sp, #12
 800666e:	4770      	bx	lr
 8006670:	20000058 	.word	0x20000058
 8006674:	ffff0208 	.word	0xffff0208

08006678 <memset>:
 8006678:	4402      	add	r2, r0
 800667a:	4603      	mov	r3, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	d100      	bne.n	8006682 <memset+0xa>
 8006680:	4770      	bx	lr
 8006682:	f803 1b01 	strb.w	r1, [r3], #1
 8006686:	e7f9      	b.n	800667c <memset+0x4>

08006688 <__errno>:
 8006688:	4b01      	ldr	r3, [pc, #4]	; (8006690 <__errno+0x8>)
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000058 	.word	0x20000058

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4d0d      	ldr	r5, [pc, #52]	; (80066cc <__libc_init_array+0x38>)
 8006698:	4c0d      	ldr	r4, [pc, #52]	; (80066d0 <__libc_init_array+0x3c>)
 800669a:	1b64      	subs	r4, r4, r5
 800669c:	10a4      	asrs	r4, r4, #2
 800669e:	2600      	movs	r6, #0
 80066a0:	42a6      	cmp	r6, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	4d0b      	ldr	r5, [pc, #44]	; (80066d4 <__libc_init_array+0x40>)
 80066a6:	4c0c      	ldr	r4, [pc, #48]	; (80066d8 <__libc_init_array+0x44>)
 80066a8:	f000 fc6a 	bl	8006f80 <_init>
 80066ac:	1b64      	subs	r4, r4, r5
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	2600      	movs	r6, #0
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066bc:	4798      	blx	r3
 80066be:	3601      	adds	r6, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c6:	4798      	blx	r3
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	0800705c 	.word	0x0800705c
 80066d0:	0800705c 	.word	0x0800705c
 80066d4:	0800705c 	.word	0x0800705c
 80066d8:	08007060 	.word	0x08007060

080066dc <__retarget_lock_acquire_recursive>:
 80066dc:	4770      	bx	lr

080066de <__retarget_lock_release_recursive>:
 80066de:	4770      	bx	lr

080066e0 <__ssputs_r>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	688e      	ldr	r6, [r1, #8]
 80066e6:	461f      	mov	r7, r3
 80066e8:	42be      	cmp	r6, r7
 80066ea:	680b      	ldr	r3, [r1, #0]
 80066ec:	4682      	mov	sl, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4690      	mov	r8, r2
 80066f2:	d82c      	bhi.n	800674e <__ssputs_r+0x6e>
 80066f4:	898a      	ldrh	r2, [r1, #12]
 80066f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066fa:	d026      	beq.n	800674a <__ssputs_r+0x6a>
 80066fc:	6965      	ldr	r5, [r4, #20]
 80066fe:	6909      	ldr	r1, [r1, #16]
 8006700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006704:	eba3 0901 	sub.w	r9, r3, r1
 8006708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800670c:	1c7b      	adds	r3, r7, #1
 800670e:	444b      	add	r3, r9
 8006710:	106d      	asrs	r5, r5, #1
 8006712:	429d      	cmp	r5, r3
 8006714:	bf38      	it	cc
 8006716:	461d      	movcc	r5, r3
 8006718:	0553      	lsls	r3, r2, #21
 800671a:	d527      	bpl.n	800676c <__ssputs_r+0x8c>
 800671c:	4629      	mov	r1, r5
 800671e:	f000 f957 	bl	80069d0 <_malloc_r>
 8006722:	4606      	mov	r6, r0
 8006724:	b360      	cbz	r0, 8006780 <__ssputs_r+0xa0>
 8006726:	6921      	ldr	r1, [r4, #16]
 8006728:	464a      	mov	r2, r9
 800672a:	f000 fbc7 	bl	8006ebc <memcpy>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	6126      	str	r6, [r4, #16]
 800673c:	6165      	str	r5, [r4, #20]
 800673e:	444e      	add	r6, r9
 8006740:	eba5 0509 	sub.w	r5, r5, r9
 8006744:	6026      	str	r6, [r4, #0]
 8006746:	60a5      	str	r5, [r4, #8]
 8006748:	463e      	mov	r6, r7
 800674a:	42be      	cmp	r6, r7
 800674c:	d900      	bls.n	8006750 <__ssputs_r+0x70>
 800674e:	463e      	mov	r6, r7
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	4632      	mov	r2, r6
 8006754:	4641      	mov	r1, r8
 8006756:	f000 fb86 	bl	8006e66 <memmove>
 800675a:	68a3      	ldr	r3, [r4, #8]
 800675c:	1b9b      	subs	r3, r3, r6
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	4433      	add	r3, r6
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	2000      	movs	r0, #0
 8006768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676c:	462a      	mov	r2, r5
 800676e:	f000 fb4b 	bl	8006e08 <_realloc_r>
 8006772:	4606      	mov	r6, r0
 8006774:	2800      	cmp	r0, #0
 8006776:	d1e0      	bne.n	800673a <__ssputs_r+0x5a>
 8006778:	6921      	ldr	r1, [r4, #16]
 800677a:	4650      	mov	r0, sl
 800677c:	f000 fbac 	bl	8006ed8 <_free_r>
 8006780:	230c      	movs	r3, #12
 8006782:	f8ca 3000 	str.w	r3, [sl]
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006792:	e7e9      	b.n	8006768 <__ssputs_r+0x88>

08006794 <_svfiprintf_r>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	4698      	mov	r8, r3
 800679a:	898b      	ldrh	r3, [r1, #12]
 800679c:	061b      	lsls	r3, r3, #24
 800679e:	b09d      	sub	sp, #116	; 0x74
 80067a0:	4607      	mov	r7, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	d50e      	bpl.n	80067c6 <_svfiprintf_r+0x32>
 80067a8:	690b      	ldr	r3, [r1, #16]
 80067aa:	b963      	cbnz	r3, 80067c6 <_svfiprintf_r+0x32>
 80067ac:	2140      	movs	r1, #64	; 0x40
 80067ae:	f000 f90f 	bl	80069d0 <_malloc_r>
 80067b2:	6028      	str	r0, [r5, #0]
 80067b4:	6128      	str	r0, [r5, #16]
 80067b6:	b920      	cbnz	r0, 80067c2 <_svfiprintf_r+0x2e>
 80067b8:	230c      	movs	r3, #12
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c0:	e0d0      	b.n	8006964 <_svfiprintf_r+0x1d0>
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	616b      	str	r3, [r5, #20]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ca:	2320      	movs	r3, #32
 80067cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067d4:	2330      	movs	r3, #48	; 0x30
 80067d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800697c <_svfiprintf_r+0x1e8>
 80067da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067de:	f04f 0901 	mov.w	r9, #1
 80067e2:	4623      	mov	r3, r4
 80067e4:	469a      	mov	sl, r3
 80067e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ea:	b10a      	cbz	r2, 80067f0 <_svfiprintf_r+0x5c>
 80067ec:	2a25      	cmp	r2, #37	; 0x25
 80067ee:	d1f9      	bne.n	80067e4 <_svfiprintf_r+0x50>
 80067f0:	ebba 0b04 	subs.w	fp, sl, r4
 80067f4:	d00b      	beq.n	800680e <_svfiprintf_r+0x7a>
 80067f6:	465b      	mov	r3, fp
 80067f8:	4622      	mov	r2, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff ff6f 	bl	80066e0 <__ssputs_r>
 8006802:	3001      	adds	r0, #1
 8006804:	f000 80a9 	beq.w	800695a <_svfiprintf_r+0x1c6>
 8006808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800680a:	445a      	add	r2, fp
 800680c:	9209      	str	r2, [sp, #36]	; 0x24
 800680e:	f89a 3000 	ldrb.w	r3, [sl]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 80a1 	beq.w	800695a <_svfiprintf_r+0x1c6>
 8006818:	2300      	movs	r3, #0
 800681a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800681e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006822:	f10a 0a01 	add.w	sl, sl, #1
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800682e:	931a      	str	r3, [sp, #104]	; 0x68
 8006830:	4654      	mov	r4, sl
 8006832:	2205      	movs	r2, #5
 8006834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006838:	4850      	ldr	r0, [pc, #320]	; (800697c <_svfiprintf_r+0x1e8>)
 800683a:	f7f9 fcd1 	bl	80001e0 <memchr>
 800683e:	9a04      	ldr	r2, [sp, #16]
 8006840:	b9d8      	cbnz	r0, 800687a <_svfiprintf_r+0xe6>
 8006842:	06d0      	lsls	r0, r2, #27
 8006844:	bf44      	itt	mi
 8006846:	2320      	movmi	r3, #32
 8006848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800684c:	0711      	lsls	r1, r2, #28
 800684e:	bf44      	itt	mi
 8006850:	232b      	movmi	r3, #43	; 0x2b
 8006852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006856:	f89a 3000 	ldrb.w	r3, [sl]
 800685a:	2b2a      	cmp	r3, #42	; 0x2a
 800685c:	d015      	beq.n	800688a <_svfiprintf_r+0xf6>
 800685e:	9a07      	ldr	r2, [sp, #28]
 8006860:	4654      	mov	r4, sl
 8006862:	2000      	movs	r0, #0
 8006864:	f04f 0c0a 	mov.w	ip, #10
 8006868:	4621      	mov	r1, r4
 800686a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800686e:	3b30      	subs	r3, #48	; 0x30
 8006870:	2b09      	cmp	r3, #9
 8006872:	d94d      	bls.n	8006910 <_svfiprintf_r+0x17c>
 8006874:	b1b0      	cbz	r0, 80068a4 <_svfiprintf_r+0x110>
 8006876:	9207      	str	r2, [sp, #28]
 8006878:	e014      	b.n	80068a4 <_svfiprintf_r+0x110>
 800687a:	eba0 0308 	sub.w	r3, r0, r8
 800687e:	fa09 f303 	lsl.w	r3, r9, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	9304      	str	r3, [sp, #16]
 8006886:	46a2      	mov	sl, r4
 8006888:	e7d2      	b.n	8006830 <_svfiprintf_r+0x9c>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	1d19      	adds	r1, r3, #4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	9103      	str	r1, [sp, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	bfbb      	ittet	lt
 8006896:	425b      	neglt	r3, r3
 8006898:	f042 0202 	orrlt.w	r2, r2, #2
 800689c:	9307      	strge	r3, [sp, #28]
 800689e:	9307      	strlt	r3, [sp, #28]
 80068a0:	bfb8      	it	lt
 80068a2:	9204      	strlt	r2, [sp, #16]
 80068a4:	7823      	ldrb	r3, [r4, #0]
 80068a6:	2b2e      	cmp	r3, #46	; 0x2e
 80068a8:	d10c      	bne.n	80068c4 <_svfiprintf_r+0x130>
 80068aa:	7863      	ldrb	r3, [r4, #1]
 80068ac:	2b2a      	cmp	r3, #42	; 0x2a
 80068ae:	d134      	bne.n	800691a <_svfiprintf_r+0x186>
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	1d1a      	adds	r2, r3, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	9203      	str	r2, [sp, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bfb8      	it	lt
 80068bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068c0:	3402      	adds	r4, #2
 80068c2:	9305      	str	r3, [sp, #20]
 80068c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800698c <_svfiprintf_r+0x1f8>
 80068c8:	7821      	ldrb	r1, [r4, #0]
 80068ca:	2203      	movs	r2, #3
 80068cc:	4650      	mov	r0, sl
 80068ce:	f7f9 fc87 	bl	80001e0 <memchr>
 80068d2:	b138      	cbz	r0, 80068e4 <_svfiprintf_r+0x150>
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	eba0 000a 	sub.w	r0, r0, sl
 80068da:	2240      	movs	r2, #64	; 0x40
 80068dc:	4082      	lsls	r2, r0
 80068de:	4313      	orrs	r3, r2
 80068e0:	3401      	adds	r4, #1
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e8:	4825      	ldr	r0, [pc, #148]	; (8006980 <_svfiprintf_r+0x1ec>)
 80068ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ee:	2206      	movs	r2, #6
 80068f0:	f7f9 fc76 	bl	80001e0 <memchr>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d038      	beq.n	800696a <_svfiprintf_r+0x1d6>
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <_svfiprintf_r+0x1f0>)
 80068fa:	bb1b      	cbnz	r3, 8006944 <_svfiprintf_r+0x1b0>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	3307      	adds	r3, #7
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	3308      	adds	r3, #8
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690a:	4433      	add	r3, r6
 800690c:	9309      	str	r3, [sp, #36]	; 0x24
 800690e:	e768      	b.n	80067e2 <_svfiprintf_r+0x4e>
 8006910:	fb0c 3202 	mla	r2, ip, r2, r3
 8006914:	460c      	mov	r4, r1
 8006916:	2001      	movs	r0, #1
 8006918:	e7a6      	b.n	8006868 <_svfiprintf_r+0xd4>
 800691a:	2300      	movs	r3, #0
 800691c:	3401      	adds	r4, #1
 800691e:	9305      	str	r3, [sp, #20]
 8006920:	4619      	mov	r1, r3
 8006922:	f04f 0c0a 	mov.w	ip, #10
 8006926:	4620      	mov	r0, r4
 8006928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800692c:	3a30      	subs	r2, #48	; 0x30
 800692e:	2a09      	cmp	r2, #9
 8006930:	d903      	bls.n	800693a <_svfiprintf_r+0x1a6>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0c6      	beq.n	80068c4 <_svfiprintf_r+0x130>
 8006936:	9105      	str	r1, [sp, #20]
 8006938:	e7c4      	b.n	80068c4 <_svfiprintf_r+0x130>
 800693a:	fb0c 2101 	mla	r1, ip, r1, r2
 800693e:	4604      	mov	r4, r0
 8006940:	2301      	movs	r3, #1
 8006942:	e7f0      	b.n	8006926 <_svfiprintf_r+0x192>
 8006944:	ab03      	add	r3, sp, #12
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	462a      	mov	r2, r5
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <_svfiprintf_r+0x1f4>)
 800694c:	a904      	add	r1, sp, #16
 800694e:	4638      	mov	r0, r7
 8006950:	f3af 8000 	nop.w
 8006954:	1c42      	adds	r2, r0, #1
 8006956:	4606      	mov	r6, r0
 8006958:	d1d6      	bne.n	8006908 <_svfiprintf_r+0x174>
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	065b      	lsls	r3, r3, #25
 800695e:	f53f af2d 	bmi.w	80067bc <_svfiprintf_r+0x28>
 8006962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006964:	b01d      	add	sp, #116	; 0x74
 8006966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	462a      	mov	r2, r5
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <_svfiprintf_r+0x1f4>)
 8006972:	a904      	add	r1, sp, #16
 8006974:	4638      	mov	r0, r7
 8006976:	f000 f919 	bl	8006bac <_printf_i>
 800697a:	e7eb      	b.n	8006954 <_svfiprintf_r+0x1c0>
 800697c:	08007028 	.word	0x08007028
 8006980:	08007032 	.word	0x08007032
 8006984:	00000000 	.word	0x00000000
 8006988:	080066e1 	.word	0x080066e1
 800698c:	0800702e 	.word	0x0800702e

08006990 <sbrk_aligned>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4e0e      	ldr	r6, [pc, #56]	; (80069cc <sbrk_aligned+0x3c>)
 8006994:	460c      	mov	r4, r1
 8006996:	6831      	ldr	r1, [r6, #0]
 8006998:	4605      	mov	r5, r0
 800699a:	b911      	cbnz	r1, 80069a2 <sbrk_aligned+0x12>
 800699c:	f000 fa7e 	bl	8006e9c <_sbrk_r>
 80069a0:	6030      	str	r0, [r6, #0]
 80069a2:	4621      	mov	r1, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 fa79 	bl	8006e9c <_sbrk_r>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	d00a      	beq.n	80069c4 <sbrk_aligned+0x34>
 80069ae:	1cc4      	adds	r4, r0, #3
 80069b0:	f024 0403 	bic.w	r4, r4, #3
 80069b4:	42a0      	cmp	r0, r4
 80069b6:	d007      	beq.n	80069c8 <sbrk_aligned+0x38>
 80069b8:	1a21      	subs	r1, r4, r0
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 fa6e 	bl	8006e9c <_sbrk_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d101      	bne.n	80069c8 <sbrk_aligned+0x38>
 80069c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069c8:	4620      	mov	r0, r4
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	20000398 	.word	0x20000398

080069d0 <_malloc_r>:
 80069d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d4:	1ccd      	adds	r5, r1, #3
 80069d6:	f025 0503 	bic.w	r5, r5, #3
 80069da:	3508      	adds	r5, #8
 80069dc:	2d0c      	cmp	r5, #12
 80069de:	bf38      	it	cc
 80069e0:	250c      	movcc	r5, #12
 80069e2:	2d00      	cmp	r5, #0
 80069e4:	4607      	mov	r7, r0
 80069e6:	db01      	blt.n	80069ec <_malloc_r+0x1c>
 80069e8:	42a9      	cmp	r1, r5
 80069ea:	d905      	bls.n	80069f8 <_malloc_r+0x28>
 80069ec:	230c      	movs	r3, #12
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	2600      	movs	r6, #0
 80069f2:	4630      	mov	r0, r6
 80069f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006acc <_malloc_r+0xfc>
 80069fc:	f000 f9f8 	bl	8006df0 <__malloc_lock>
 8006a00:	f8d8 3000 	ldr.w	r3, [r8]
 8006a04:	461c      	mov	r4, r3
 8006a06:	bb5c      	cbnz	r4, 8006a60 <_malloc_r+0x90>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff ffc0 	bl	8006990 <sbrk_aligned>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	4604      	mov	r4, r0
 8006a14:	d155      	bne.n	8006ac2 <_malloc_r+0xf2>
 8006a16:	f8d8 4000 	ldr.w	r4, [r8]
 8006a1a:	4626      	mov	r6, r4
 8006a1c:	2e00      	cmp	r6, #0
 8006a1e:	d145      	bne.n	8006aac <_malloc_r+0xdc>
 8006a20:	2c00      	cmp	r4, #0
 8006a22:	d048      	beq.n	8006ab6 <_malloc_r+0xe6>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	4631      	mov	r1, r6
 8006a28:	4638      	mov	r0, r7
 8006a2a:	eb04 0903 	add.w	r9, r4, r3
 8006a2e:	f000 fa35 	bl	8006e9c <_sbrk_r>
 8006a32:	4581      	cmp	r9, r0
 8006a34:	d13f      	bne.n	8006ab6 <_malloc_r+0xe6>
 8006a36:	6821      	ldr	r1, [r4, #0]
 8006a38:	1a6d      	subs	r5, r5, r1
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff ffa7 	bl	8006990 <sbrk_aligned>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d037      	beq.n	8006ab6 <_malloc_r+0xe6>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	442b      	add	r3, r5
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d038      	beq.n	8006ac6 <_malloc_r+0xf6>
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	42a2      	cmp	r2, r4
 8006a58:	d12b      	bne.n	8006ab2 <_malloc_r+0xe2>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	e00f      	b.n	8006a80 <_malloc_r+0xb0>
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	1b52      	subs	r2, r2, r5
 8006a64:	d41f      	bmi.n	8006aa6 <_malloc_r+0xd6>
 8006a66:	2a0b      	cmp	r2, #11
 8006a68:	d917      	bls.n	8006a9a <_malloc_r+0xca>
 8006a6a:	1961      	adds	r1, r4, r5
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	6025      	str	r5, [r4, #0]
 8006a70:	bf18      	it	ne
 8006a72:	6059      	strne	r1, [r3, #4]
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	bf08      	it	eq
 8006a78:	f8c8 1000 	streq.w	r1, [r8]
 8006a7c:	5162      	str	r2, [r4, r5]
 8006a7e:	604b      	str	r3, [r1, #4]
 8006a80:	4638      	mov	r0, r7
 8006a82:	f104 060b 	add.w	r6, r4, #11
 8006a86:	f000 f9b9 	bl	8006dfc <__malloc_unlock>
 8006a8a:	f026 0607 	bic.w	r6, r6, #7
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	1af2      	subs	r2, r6, r3
 8006a92:	d0ae      	beq.n	80069f2 <_malloc_r+0x22>
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	50a3      	str	r3, [r4, r2]
 8006a98:	e7ab      	b.n	80069f2 <_malloc_r+0x22>
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	6862      	ldr	r2, [r4, #4]
 8006a9e:	d1dd      	bne.n	8006a5c <_malloc_r+0x8c>
 8006aa0:	f8c8 2000 	str.w	r2, [r8]
 8006aa4:	e7ec      	b.n	8006a80 <_malloc_r+0xb0>
 8006aa6:	4623      	mov	r3, r4
 8006aa8:	6864      	ldr	r4, [r4, #4]
 8006aaa:	e7ac      	b.n	8006a06 <_malloc_r+0x36>
 8006aac:	4634      	mov	r4, r6
 8006aae:	6876      	ldr	r6, [r6, #4]
 8006ab0:	e7b4      	b.n	8006a1c <_malloc_r+0x4c>
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	e7cc      	b.n	8006a50 <_malloc_r+0x80>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4638      	mov	r0, r7
 8006abc:	f000 f99e 	bl	8006dfc <__malloc_unlock>
 8006ac0:	e797      	b.n	80069f2 <_malloc_r+0x22>
 8006ac2:	6025      	str	r5, [r4, #0]
 8006ac4:	e7dc      	b.n	8006a80 <_malloc_r+0xb0>
 8006ac6:	605b      	str	r3, [r3, #4]
 8006ac8:	deff      	udf	#255	; 0xff
 8006aca:	bf00      	nop
 8006acc:	20000394 	.word	0x20000394

08006ad0 <_printf_common>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	688a      	ldr	r2, [r1, #8]
 8006ada:	690b      	ldr	r3, [r1, #16]
 8006adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfb8      	it	lt
 8006ae4:	4613      	movlt	r3, r2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aec:	4607      	mov	r7, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b10a      	cbz	r2, 8006af6 <_printf_common+0x26>
 8006af2:	3301      	adds	r3, #1
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	0699      	lsls	r1, r3, #26
 8006afa:	bf42      	ittt	mi
 8006afc:	6833      	ldrmi	r3, [r6, #0]
 8006afe:	3302      	addmi	r3, #2
 8006b00:	6033      	strmi	r3, [r6, #0]
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	f015 0506 	ands.w	r5, r5, #6
 8006b08:	d106      	bne.n	8006b18 <_printf_common+0x48>
 8006b0a:	f104 0a19 	add.w	sl, r4, #25
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	6832      	ldr	r2, [r6, #0]
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dc26      	bgt.n	8006b66 <_printf_common+0x96>
 8006b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b1c:	1e13      	subs	r3, r2, #0
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	0692      	lsls	r2, r2, #26
 8006b26:	d42b      	bmi.n	8006b80 <_printf_common+0xb0>
 8006b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d01e      	beq.n	8006b74 <_printf_common+0xa4>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	f003 0306 	and.w	r3, r3, #6
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	bf02      	ittt	eq
 8006b42:	68e5      	ldreq	r5, [r4, #12]
 8006b44:	6833      	ldreq	r3, [r6, #0]
 8006b46:	1aed      	subeq	r5, r5, r3
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	bf0c      	ite	eq
 8006b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b50:	2500      	movne	r5, #0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfc4      	itt	gt
 8006b56:	1a9b      	subgt	r3, r3, r2
 8006b58:	18ed      	addgt	r5, r5, r3
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	341a      	adds	r4, #26
 8006b5e:	42b5      	cmp	r5, r6
 8006b60:	d11a      	bne.n	8006b98 <_printf_common+0xc8>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e008      	b.n	8006b78 <_printf_common+0xa8>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	47c0      	blx	r8
 8006b70:	3001      	adds	r0, #1
 8006b72:	d103      	bne.n	8006b7c <_printf_common+0xac>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e7c6      	b.n	8006b0e <_printf_common+0x3e>
 8006b80:	18e1      	adds	r1, r4, r3
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	2030      	movs	r0, #48	; 0x30
 8006b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b8a:	4422      	add	r2, r4
 8006b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b94:	3302      	adds	r3, #2
 8006b96:	e7c7      	b.n	8006b28 <_printf_common+0x58>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	47c0      	blx	r8
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d0e6      	beq.n	8006b74 <_printf_common+0xa4>
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7d9      	b.n	8006b5e <_printf_common+0x8e>
	...

08006bac <_printf_i>:
 8006bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	7e0f      	ldrb	r7, [r1, #24]
 8006bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	4680      	mov	r8, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bc2:	d807      	bhi.n	8006bd4 <_printf_i+0x28>
 8006bc4:	2f62      	cmp	r7, #98	; 0x62
 8006bc6:	d80a      	bhi.n	8006bde <_printf_i+0x32>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f000 80d4 	beq.w	8006d76 <_printf_i+0x1ca>
 8006bce:	2f58      	cmp	r7, #88	; 0x58
 8006bd0:	f000 80c0 	beq.w	8006d54 <_printf_i+0x1a8>
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bdc:	e03a      	b.n	8006c54 <_printf_i+0xa8>
 8006bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006be2:	2b15      	cmp	r3, #21
 8006be4:	d8f6      	bhi.n	8006bd4 <_printf_i+0x28>
 8006be6:	a101      	add	r1, pc, #4	; (adr r1, 8006bec <_printf_i+0x40>)
 8006be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c59 	.word	0x08006c59
 8006bf4:	08006bd5 	.word	0x08006bd5
 8006bf8:	08006bd5 	.word	0x08006bd5
 8006bfc:	08006bd5 	.word	0x08006bd5
 8006c00:	08006bd5 	.word	0x08006bd5
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006bd5 	.word	0x08006bd5
 8006c0c:	08006bd5 	.word	0x08006bd5
 8006c10:	08006bd5 	.word	0x08006bd5
 8006c14:	08006bd5 	.word	0x08006bd5
 8006c18:	08006d5d 	.word	0x08006d5d
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006d17 	.word	0x08006d17
 8006c24:	08006bd5 	.word	0x08006bd5
 8006c28:	08006bd5 	.word	0x08006bd5
 8006c2c:	08006d7f 	.word	0x08006d7f
 8006c30:	08006bd5 	.word	0x08006bd5
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006bd5 	.word	0x08006bd5
 8006c3c:	08006bd5 	.word	0x08006bd5
 8006c40:	08006d1f 	.word	0x08006d1f
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c54:	2301      	movs	r3, #1
 8006c56:	e09f      	b.n	8006d98 <_printf_i+0x1ec>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	0607      	lsls	r7, r0, #24
 8006c5e:	f103 0104 	add.w	r1, r3, #4
 8006c62:	6029      	str	r1, [r5, #0]
 8006c64:	d501      	bpl.n	8006c6a <_printf_i+0xbe>
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	e003      	b.n	8006c72 <_printf_i+0xc6>
 8006c6a:	0646      	lsls	r6, r0, #25
 8006c6c:	d5fb      	bpl.n	8006c66 <_printf_i+0xba>
 8006c6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	da03      	bge.n	8006c7e <_printf_i+0xd2>
 8006c76:	232d      	movs	r3, #45	; 0x2d
 8006c78:	4276      	negs	r6, r6
 8006c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7e:	485a      	ldr	r0, [pc, #360]	; (8006de8 <_printf_i+0x23c>)
 8006c80:	230a      	movs	r3, #10
 8006c82:	e012      	b.n	8006caa <_printf_i+0xfe>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	6820      	ldr	r0, [r4, #0]
 8006c88:	1d19      	adds	r1, r3, #4
 8006c8a:	6029      	str	r1, [r5, #0]
 8006c8c:	0605      	lsls	r5, r0, #24
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0xe8>
 8006c90:	681e      	ldr	r6, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0xee>
 8006c94:	0641      	lsls	r1, r0, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0xe4>
 8006c98:	881e      	ldrh	r6, [r3, #0]
 8006c9a:	4853      	ldr	r0, [pc, #332]	; (8006de8 <_printf_i+0x23c>)
 8006c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	230a      	movne	r3, #10
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006caa:	6865      	ldr	r5, [r4, #4]
 8006cac:	60a5      	str	r5, [r4, #8]
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	bfa2      	ittt	ge
 8006cb2:	6821      	ldrge	r1, [r4, #0]
 8006cb4:	f021 0104 	bicge.w	r1, r1, #4
 8006cb8:	6021      	strge	r1, [r4, #0]
 8006cba:	b90e      	cbnz	r6, 8006cc0 <_printf_i+0x114>
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	d04b      	beq.n	8006d58 <_printf_i+0x1ac>
 8006cc0:	4615      	mov	r5, r2
 8006cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cca:	5dc7      	ldrb	r7, [r0, r7]
 8006ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cd0:	4637      	mov	r7, r6
 8006cd2:	42bb      	cmp	r3, r7
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	d9f4      	bls.n	8006cc2 <_printf_i+0x116>
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10b      	bne.n	8006cf4 <_printf_i+0x148>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07de      	lsls	r6, r3, #31
 8006ce0:	d508      	bpl.n	8006cf4 <_printf_i+0x148>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bfde      	ittt	le
 8006cea:	2330      	movle	r3, #48	; 0x30
 8006cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cf4:	1b52      	subs	r2, r2, r5
 8006cf6:	6122      	str	r2, [r4, #16]
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	aa03      	add	r2, sp, #12
 8006d00:	4621      	mov	r1, r4
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7ff fee4 	bl	8006ad0 <_printf_common>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d14a      	bne.n	8006da2 <_printf_i+0x1f6>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	f043 0320 	orr.w	r3, r3, #32
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	4833      	ldr	r0, [pc, #204]	; (8006dec <_printf_i+0x240>)
 8006d20:	2778      	movs	r7, #120	; 0x78
 8006d22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	061f      	lsls	r7, r3, #24
 8006d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d30:	d402      	bmi.n	8006d38 <_printf_i+0x18c>
 8006d32:	065f      	lsls	r7, r3, #25
 8006d34:	bf48      	it	mi
 8006d36:	b2b6      	uxthmi	r6, r6
 8006d38:	07df      	lsls	r7, r3, #31
 8006d3a:	bf48      	it	mi
 8006d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d40:	6029      	str	r1, [r5, #0]
 8006d42:	bf48      	it	mi
 8006d44:	6023      	strmi	r3, [r4, #0]
 8006d46:	b91e      	cbnz	r6, 8006d50 <_printf_i+0x1a4>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	f023 0320 	bic.w	r3, r3, #32
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	2310      	movs	r3, #16
 8006d52:	e7a7      	b.n	8006ca4 <_printf_i+0xf8>
 8006d54:	4824      	ldr	r0, [pc, #144]	; (8006de8 <_printf_i+0x23c>)
 8006d56:	e7e4      	b.n	8006d22 <_printf_i+0x176>
 8006d58:	4615      	mov	r5, r2
 8006d5a:	e7bd      	b.n	8006cd8 <_printf_i+0x12c>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	6826      	ldr	r6, [r4, #0]
 8006d60:	6961      	ldr	r1, [r4, #20]
 8006d62:	1d18      	adds	r0, r3, #4
 8006d64:	6028      	str	r0, [r5, #0]
 8006d66:	0635      	lsls	r5, r6, #24
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0x1c4>
 8006d6c:	6019      	str	r1, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <_printf_i+0x1ca>
 8006d70:	0670      	lsls	r0, r6, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0x1c0>
 8006d74:	8019      	strh	r1, [r3, #0]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	4615      	mov	r5, r2
 8006d7c:	e7bc      	b.n	8006cf8 <_printf_i+0x14c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	681d      	ldr	r5, [r3, #0]
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f7f9 fa28 	bl	80001e0 <memchr>
 8006d90:	b108      	cbz	r0, 8006d96 <_printf_i+0x1ea>
 8006d92:	1b40      	subs	r0, r0, r5
 8006d94:	6060      	str	r0, [r4, #4]
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da0:	e7aa      	b.n	8006cf8 <_printf_i+0x14c>
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	462a      	mov	r2, r5
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	47d0      	blx	sl
 8006dac:	3001      	adds	r0, #1
 8006dae:	d0ad      	beq.n	8006d0c <_printf_i+0x160>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	079b      	lsls	r3, r3, #30
 8006db4:	d413      	bmi.n	8006dde <_printf_i+0x232>
 8006db6:	68e0      	ldr	r0, [r4, #12]
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	4298      	cmp	r0, r3
 8006dbc:	bfb8      	it	lt
 8006dbe:	4618      	movlt	r0, r3
 8006dc0:	e7a6      	b.n	8006d10 <_printf_i+0x164>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4640      	mov	r0, r8
 8006dca:	47d0      	blx	sl
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d09d      	beq.n	8006d0c <_printf_i+0x160>
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	68e3      	ldr	r3, [r4, #12]
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	1a5b      	subs	r3, r3, r1
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dcf2      	bgt.n	8006dc2 <_printf_i+0x216>
 8006ddc:	e7eb      	b.n	8006db6 <_printf_i+0x20a>
 8006dde:	2500      	movs	r5, #0
 8006de0:	f104 0619 	add.w	r6, r4, #25
 8006de4:	e7f5      	b.n	8006dd2 <_printf_i+0x226>
 8006de6:	bf00      	nop
 8006de8:	08007039 	.word	0x08007039
 8006dec:	0800704a 	.word	0x0800704a

08006df0 <__malloc_lock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_lock+0x8>)
 8006df2:	f7ff bc73 	b.w	80066dc <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000390 	.word	0x20000390

08006dfc <__malloc_unlock>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__malloc_unlock+0x8>)
 8006dfe:	f7ff bc6e 	b.w	80066de <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20000390 	.word	0x20000390

08006e08 <_realloc_r>:
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	4614      	mov	r4, r2
 8006e10:	460e      	mov	r6, r1
 8006e12:	b921      	cbnz	r1, 8006e1e <_realloc_r+0x16>
 8006e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	4611      	mov	r1, r2
 8006e1a:	f7ff bdd9 	b.w	80069d0 <_malloc_r>
 8006e1e:	b92a      	cbnz	r2, 8006e2c <_realloc_r+0x24>
 8006e20:	f000 f85a 	bl	8006ed8 <_free_r>
 8006e24:	4625      	mov	r5, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	f000 f8a0 	bl	8006f70 <_malloc_usable_size_r>
 8006e30:	4284      	cmp	r4, r0
 8006e32:	4607      	mov	r7, r0
 8006e34:	d802      	bhi.n	8006e3c <_realloc_r+0x34>
 8006e36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e3a:	d812      	bhi.n	8006e62 <_realloc_r+0x5a>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4640      	mov	r0, r8
 8006e40:	f7ff fdc6 	bl	80069d0 <_malloc_r>
 8006e44:	4605      	mov	r5, r0
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0ed      	beq.n	8006e26 <_realloc_r+0x1e>
 8006e4a:	42bc      	cmp	r4, r7
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	4631      	mov	r1, r6
 8006e50:	bf28      	it	cs
 8006e52:	463a      	movcs	r2, r7
 8006e54:	f000 f832 	bl	8006ebc <memcpy>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f000 f83c 	bl	8006ed8 <_free_r>
 8006e60:	e7e1      	b.n	8006e26 <_realloc_r+0x1e>
 8006e62:	4635      	mov	r5, r6
 8006e64:	e7df      	b.n	8006e26 <_realloc_r+0x1e>

08006e66 <memmove>:
 8006e66:	4288      	cmp	r0, r1
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	eb01 0402 	add.w	r4, r1, r2
 8006e6e:	d902      	bls.n	8006e76 <memmove+0x10>
 8006e70:	4284      	cmp	r4, r0
 8006e72:	4623      	mov	r3, r4
 8006e74:	d807      	bhi.n	8006e86 <memmove+0x20>
 8006e76:	1e43      	subs	r3, r0, #1
 8006e78:	42a1      	cmp	r1, r4
 8006e7a:	d008      	beq.n	8006e8e <memmove+0x28>
 8006e7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e84:	e7f8      	b.n	8006e78 <memmove+0x12>
 8006e86:	4402      	add	r2, r0
 8006e88:	4601      	mov	r1, r0
 8006e8a:	428a      	cmp	r2, r1
 8006e8c:	d100      	bne.n	8006e90 <memmove+0x2a>
 8006e8e:	bd10      	pop	{r4, pc}
 8006e90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e98:	e7f7      	b.n	8006e8a <memmove+0x24>
	...

08006e9c <_sbrk_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_sbrk_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fd98 	bl	80019dc <_sbrk>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_sbrk_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_sbrk_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	2000039c 	.word	0x2000039c

08006ebc <memcpy>:
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xc>
 8006ec6:	4770      	bx	lr
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	d1f9      	bne.n	8006eca <memcpy+0xe>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <_free_r>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d044      	beq.n	8006f68 <_free_r+0x90>
 8006ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee2:	9001      	str	r0, [sp, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eea:	bfb8      	it	lt
 8006eec:	18e4      	addlt	r4, r4, r3
 8006eee:	f7ff ff7f 	bl	8006df0 <__malloc_lock>
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <_free_r+0x94>)
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	b933      	cbnz	r3, 8006f08 <_free_r+0x30>
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	6014      	str	r4, [r2, #0]
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f04:	f7ff bf7a 	b.w	8006dfc <__malloc_unlock>
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d908      	bls.n	8006f1e <_free_r+0x46>
 8006f0c:	6825      	ldr	r5, [r4, #0]
 8006f0e:	1961      	adds	r1, r4, r5
 8006f10:	428b      	cmp	r3, r1
 8006f12:	bf01      	itttt	eq
 8006f14:	6819      	ldreq	r1, [r3, #0]
 8006f16:	685b      	ldreq	r3, [r3, #4]
 8006f18:	1949      	addeq	r1, r1, r5
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	e7ed      	b.n	8006efa <_free_r+0x22>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b10b      	cbz	r3, 8006f28 <_free_r+0x50>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d9fa      	bls.n	8006f1e <_free_r+0x46>
 8006f28:	6811      	ldr	r1, [r2, #0]
 8006f2a:	1855      	adds	r5, r2, r1
 8006f2c:	42a5      	cmp	r5, r4
 8006f2e:	d10b      	bne.n	8006f48 <_free_r+0x70>
 8006f30:	6824      	ldr	r4, [r4, #0]
 8006f32:	4421      	add	r1, r4
 8006f34:	1854      	adds	r4, r2, r1
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	d1e0      	bne.n	8006efe <_free_r+0x26>
 8006f3c:	681c      	ldr	r4, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	6053      	str	r3, [r2, #4]
 8006f42:	440c      	add	r4, r1
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	e7da      	b.n	8006efe <_free_r+0x26>
 8006f48:	d902      	bls.n	8006f50 <_free_r+0x78>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	6003      	str	r3, [r0, #0]
 8006f4e:	e7d6      	b.n	8006efe <_free_r+0x26>
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	1961      	adds	r1, r4, r5
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf04      	itt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	bf04      	itt	eq
 8006f60:	1949      	addeq	r1, r1, r5
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	6054      	str	r4, [r2, #4]
 8006f66:	e7ca      	b.n	8006efe <_free_r+0x26>
 8006f68:	b003      	add	sp, #12
 8006f6a:	bd30      	pop	{r4, r5, pc}
 8006f6c:	20000394 	.word	0x20000394

08006f70 <_malloc_usable_size_r>:
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f18      	subs	r0, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbc      	itt	lt
 8006f7a:	580b      	ldrlt	r3, [r1, r0]
 8006f7c:	18c0      	addlt	r0, r0, r3
 8006f7e:	4770      	bx	lr

08006f80 <_init>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	bf00      	nop
 8006f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f86:	bc08      	pop	{r3}
 8006f88:	469e      	mov	lr, r3
 8006f8a:	4770      	bx	lr

08006f8c <_fini>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr
