
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f0  080039f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080039f0  080039f0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f0  080039f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003a54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003a54  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c714  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7d  00000000  00000000  0002c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1c  00000000  00000000  0002f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9ae  00000000  00000000  0002fd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010486  00000000  00000000  0004b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2864  00000000  00000000  0005bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ba0  00000000  00000000  000fe414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00101fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003948 	.word	0x08003948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003948 	.word	0x08003948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800028e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800029a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800029c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800029e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80002a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002a2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f80e 	bl	80002d6 <Lcd_init>

	return lcd;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	461d      	mov	r5, r3
 80002be:	f107 0410 	add.w	r4, r7, #16
 80002c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80002ca:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}

080002d6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7d9b      	ldrb	r3, [r3, #22]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10c      	bne.n	8000300 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80002e6:	2133      	movs	r1, #51	; 0x33
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f86f 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002ee:	2132      	movs	r1, #50	; 0x32
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f86b 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002f6:	2128      	movs	r1, #40	; 0x28
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f867 	bl	80003cc <lcd_write_command>
 80002fe:	e003      	b.n	8000308 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000300:	2138      	movs	r1, #56	; 0x38
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 f862 	bl	80003cc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000308:	2101      	movs	r1, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f85e 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000310:	210c      	movs	r1, #12
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f85a 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000318:	2106      	movs	r1, #6
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 f856 	bl	80003cc <lcd_write_command>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	4906      	ldr	r1, [pc, #24]	; (8000354 <Lcd_int+0x2c>)
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fe60 	bl	8003000 <siprintf>

	Lcd_string(lcd, buffer);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f806 	bl	8000358 <Lcd_string>
}
 800034c:	bf00      	nop
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08003960 	.word	0x08003960

08000358 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e00a      	b.n	800037e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 f858 	bl	8000428 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3301      	adds	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	7bfc      	ldrb	r4, [r7, #15]
 8000380:	6838      	ldr	r0, [r7, #0]
 8000382:	f7ff ff25 	bl	80001d0 <strlen>
 8000386:	4603      	mov	r3, r0
 8000388:	429c      	cmp	r4, r3
 800038a:	d3ed      	bcc.n	8000368 <Lcd_string+0x10>
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
 80003a4:	4613      	mov	r3, r2
 80003a6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <Lcd_cursor+0x30>)
 80003ac:	5cd2      	ldrb	r2, [r2, r3]
 80003ae:	78bb      	ldrb	r3, [r7, #2]
 80003b0:	4413      	add	r3, r2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	3b80      	subs	r3, #128	; 0x80
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f806 	bl	80003cc <lcd_write_command>
	#endif
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	08003988 	.word	0x08003988

080003cc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6898      	ldr	r0, [r3, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	f000 fe8a 	bl	80010fc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7d9b      	ldrb	r3, [r3, #22]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	091b      	lsrs	r3, r3, #4
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2204      	movs	r2, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f842 	bl	8000484 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2204      	movs	r2, #4
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f839 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000412:	e005      	b.n	8000420 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2208      	movs	r2, #8
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f832 	bl	8000484 <lcd_write>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6898      	ldr	r0, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	899b      	ldrh	r3, [r3, #12]
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	f000 fe5c 	bl	80010fc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7d9b      	ldrb	r3, [r3, #22]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d111      	bne.n	8000470 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	091b      	lsrs	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2204      	movs	r2, #4
 8000454:	4619      	mov	r1, r3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f814 	bl	8000484 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	f003 030f 	and.w	r3, r3, #15
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2204      	movs	r2, #4
 8000466:	4619      	mov	r1, r3
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f80b 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800046e:	e005      	b.n	800047c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2208      	movs	r2, #8
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f804 	bl	8000484 <lcd_write>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
 8000490:	4613      	mov	r3, r2
 8000492:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e019      	b.n	80004ce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	8819      	ldrh	r1, [r3, #0]
 80004b2:	78fa      	ldrb	r2, [r7, #3]
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	fa42 f303 	asr.w	r3, r2, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	f000 fe1a 	bl	80010fc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	3301      	adds	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d3e1      	bcc.n	800049a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6918      	ldr	r0, [r3, #16]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	8a9b      	ldrh	r3, [r3, #20]
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	f000 fe0b 	bl	80010fc <HAL_GPIO_WritePin>
	DELAY(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fb8c 	bl	8000c04 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6918      	ldr	r0, [r3, #16]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	8a9b      	ldrh	r3, [r3, #20]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4619      	mov	r1, r3
 80004f8:	f000 fe00 	bl	80010fc <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b098      	sub	sp, #96	; 0x60
 8000508:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb15 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f85d 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f94f 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f8f9 	bl	800070c <MX_TIM1_Init>
  MX_I2C1_Init();
 800051a:	f000 f8b7 	bl	800068c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0xb8>)
 8000520:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 800052a:	4a25      	ldr	r2, [pc, #148]	; (80005c0 <main+0xbc>)
 800052c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000534:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000538:	4638      	mov	r0, r7
 800053a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800053e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000542:	2300      	movs	r3, #0
 8000544:	9303      	str	r3, [sp, #12]
 8000546:	2310      	movs	r3, #16
 8000548:	9302      	str	r3, [sp, #8]
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xc0>)
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2320      	movs	r3, #32
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <main+0xc0>)
 8000554:	f7ff fe94 	bl	8000280 <Lcd_create>
 8000558:	f107 041c 	add.w	r4, r7, #28
 800055c:	463d      	mov	r5, r7
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000566:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0,1);
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2201      	movs	r2, #1
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff10 	bl	8000398 <Lcd_cursor>
    Lcd_string(&lcd, "Ali ACAN");
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	4912      	ldr	r1, [pc, #72]	; (80005c8 <main+0xc4>)
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff feea 	bl	8000358 <Lcd_string>
      for ( int x = 1; x <= 200 ; x++ )
 8000584:	2301      	movs	r3, #1
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000588:	e013      	b.n	80005b2 <main+0xae>
      {
        Lcd_cursor(&lcd, 1,7);
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2207      	movs	r2, #7
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff00 	bl	8000398 <Lcd_cursor>
        Lcd_int(&lcd, x);
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fec2 	bl	8000328 <Lcd_int>
        HAL_Delay (1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 fb2c 	bl	8000c04 <HAL_Delay>
      for ( int x = 1; x <= 200 ; x++ )
 80005ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ae:	3301      	adds	r3, #1
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b4:	2bc8      	cmp	r3, #200	; 0xc8
 80005b6:	dde8      	ble.n	800058a <main+0x86>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0xb4>
 80005ba:	bf00      	nop
 80005bc:	08003970 	.word	0x08003970
 80005c0:	08003980 	.word	0x08003980
 80005c4:	48000400 	.word	0x48000400
 80005c8:	08003964 	.word	0x08003964

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	; 0x70
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d6:	2228      	movs	r2, #40	; 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fd30 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fd22 	bl	8003040 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fea6 	bl	8001378 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000632:	f000 f939 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fece 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f923 	bl	80008a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000662:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000666:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f8a4 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800067e:	f000 f913 	bl	80008a8 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3770      	adds	r7, #112	; 0x70
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C1_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C1_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C1_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C1_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_I2C1_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c8:	f000 fd30 	bl	800112c <HAL_I2C_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d2:	f000 f8e9 	bl	80008a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C1_Init+0x74>)
 80006da:	f000 fdb6 	bl	800124a <HAL_I2CEx_ConfigAnalogFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f8e0 	bl	80008a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ec:	f000 fdf8 	bl	80012e0 <HAL_I2CEx_ConfigDigitalFilter>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f8d7 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000078 	.word	0x20000078
 8000704:	40005400 	.word	0x40005400
 8000708:	2000090e 	.word	0x2000090e

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_TIM1_Init+0xa0>)
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <MX_TIM1_Init+0xa4>)
 800072e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM1_Init+0xa0>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM1_Init+0xa0>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000756:	4815      	ldr	r0, [pc, #84]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000758:	f002 f9c4 	bl	8002ae4 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000762:	f000 f8a1 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000774:	f002 fa0d 	bl	8002b92 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800077e:	f000 f893 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_TIM1_Init+0xa0>)
 8000794:	f002 fbce 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800079e:	f000 f883 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000cc 	.word	0x200000cc
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_GPIO_Init+0xe8>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a33      	ldr	r2, [pc, #204]	; (800089c <MX_GPIO_Init+0xe8>)
 80007d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_GPIO_Init+0xe8>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_GPIO_Init+0xe8>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a2d      	ldr	r2, [pc, #180]	; (800089c <MX_GPIO_Init+0xe8>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_GPIO_Init+0xe8>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_GPIO_Init+0xe8>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a27      	ldr	r2, [pc, #156]	; (800089c <MX_GPIO_Init+0xe8>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_GPIO_Init+0xe8>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_GPIO_Init+0xe8>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_GPIO_Init+0xe8>)
 8000818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_GPIO_Init+0xe8>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 800082a:	2200      	movs	r2, #0
 800082c:	f24c 0170 	movw	r1, #49264	; 0xc070
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0xec>)
 8000832:	f000 fc63 	bl	80010fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0xf0>)
 800083c:	f000 fc5e 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_GPIO_Init+0xf0>)
 8000856:	f000 fadf 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 800085a:	f24c 0370 	movw	r3, #49264	; 0xc070
 800085e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0xec>)
 8000874:	f000 fad0 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0xf0>)
 8000890:	f000 fac2 	bl	8000e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	48000800 	.word	0x48000800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <HAL_I2C_MspInit+0xb8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d145      	bne.n	80009aa <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800094e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000954:	2312      	movs	r3, #18
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000960:	2304      	movs	r3, #4
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f000 fa53 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <HAL_I2C_MspInit+0xc0>)
 800098e:	f000 fa43 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 8000998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_I2C_MspInit+0xbc>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400

080009c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_TIM_Base_MspInit+0x38>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10b      	bne.n	80009ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_TIM_Base_MspInit+0x3c>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40012c00 	.word	0x40012c00
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f8ba 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f002 fae4 	bl	8003050 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20004000 	.word	0x20004000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000118 	.word	0x20000118
 8000abc:	20000268 	.word	0x20000268

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 faa3 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fcf5 	bl	8000504 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b28:	080039f8 	.word	0x080039f8
  ldr r2, =_sbss
 8000b2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b30:	20000268 	.word	0x20000268

08000b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x28>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f931 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f808 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff feae 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f93b 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 f911 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	2000011c 	.word	0x2000011c

08000bec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e14e      	b.n	80010c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8140 	beq.w	80010c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 809a 	beq.w	80010c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a54      	ldr	r2, [pc, #336]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa4:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_GPIO_Init+0x2d4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1dc>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a45      	ldr	r2, [pc, #276]	; (80010f0 <HAL_GPIO_Init+0x2d8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1d8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1d4>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1e2>
 8000fec:	2305      	movs	r3, #5
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1e2>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1e2>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1e2>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100a:	4937      	ldr	r1, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001066:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f aea9 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e081      	b.n	8001242 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fbd2 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2224      	movs	r2, #36	; 0x24
 800115c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800117c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d104      	bne.n	80011c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69d9      	ldr	r1, [r3, #28]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b20      	cmp	r3, #32
 800125e:	d138      	bne.n	80012d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800126a:	2302      	movs	r3, #2
 800126c:	e032      	b.n	80012d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2224      	movs	r2, #36	; 0x24
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800129c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d139      	bne.n	800136a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001300:	2302      	movs	r3, #2
 8001302:	e033      	b.n	800136c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800136a:	2302      	movs	r3, #2
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800137e:	af00      	add	r7, sp, #0
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001388:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f001 b823 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 817d 	beq.w	80016ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b4:	4bbc      	ldr	r3, [pc, #752]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d00c      	beq.n	80013da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c0:	4bb9      	ldr	r3, [pc, #740]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d15c      	bne.n	8001486 <HAL_RCC_OscConfig+0x10e>
 80013cc:	4bb6      	ldr	r3, [pc, #728]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d155      	bne.n	8001486 <HAL_RCC_OscConfig+0x10e>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x94>
 8001406:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e015      	b.n	8001438 <HAL_RCC_OscConfig+0xc0>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001428:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001440:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001444:	fa92 f2a2 	rbit	r2, r2
 8001448:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800144c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 811f 	beq.w	80016ac <HAL_RCC_OscConfig+0x334>
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8116 	bne.w	80016ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bfaf 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12e>
 8001498:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a82      	ldr	r2, [pc, #520]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e036      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x158>
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b79      	ldr	r3, [pc, #484]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a78      	ldr	r2, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e021      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x184>
 80014e2:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a70      	ldr	r2, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6d      	ldr	r2, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f023 020f 	bic.w	r2, r3, #15
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	495f      	ldr	r1, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800152a:	4313      	orrs	r3, r2
 800152c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d059      	beq.n	80015f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fb55 	bl	8000bec <HAL_GetTick>
 8001542:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb50 	bl	8000bec <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d902      	bls.n	800155e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	f000 bf43 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 800155e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001562:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001572:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x218>
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	e015      	b.n	80015bc <HAL_RCC_OscConfig+0x244>
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015b8:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80015c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015c8:	fa92 f2a2 	rbit	r2, r2
 80015cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80015d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ab      	beq.n	8001548 <HAL_RCC_OscConfig+0x1d0>
 80015f0:	e05d      	b.n	80016ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fafb 	bl	8000bec <HAL_GetTick>
 80015f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff faf6 	bl	8000bec <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d902      	bls.n	8001612 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	f000 bee9 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001616:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001626:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0x2cc>
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	e015      	b.n	8001670 <HAL_RCC_OscConfig+0x2f8>
 8001644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001648:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001660:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001674:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001678:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800167c:	fa92 f2a2 	rbit	r2, r2
 8001680:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001684:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001688:	fab2 f282 	clz	r2, r2
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f002 021f 	and.w	r2, r2, #31
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ab      	bne.n	80015fc <HAL_RCC_OscConfig+0x284>
 80016a4:	e003      	b.n	80016ae <HAL_RCC_OscConfig+0x336>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 817d 	beq.w	80019be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016c4:	4ba6      	ldr	r3, [pc, #664]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d0:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d172      	bne.n	80017c2 <HAL_RCC_OscConfig+0x44a>
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d16c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x44a>
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x3a0>
 8001712:	4b93      	ldr	r3, [pc, #588]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	e013      	b.n	8001740 <HAL_RCC_OscConfig+0x3c8>
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001730:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800173c:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2202      	movs	r2, #2
 8001742:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001746:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800174a:	fa92 f2a2 	rbit	r2, r2
 800174e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001752:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001756:	fab2 f282 	clz	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f042 0220 	orr.w	r2, r2, #32
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_RCC_OscConfig+0x410>
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 be2e 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	21f8      	movs	r1, #248	; 0xf8
 800179e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017a6:	fa91 f1a1 	rbit	r1, r1
 80017aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017b2:	fab1 f181 	clz	r1, r1
 80017b6:	b2c9      	uxtb	r1, r1
 80017b8:	408b      	lsls	r3, r1
 80017ba:	4969      	ldr	r1, [pc, #420]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c0:	e0fd      	b.n	80019be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8088 	beq.w	80018e4 <HAL_RCC_OscConfig+0x56c>
 80017d4:	2301      	movs	r3, #1
 80017d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	2301      	movs	r3, #1
 80017fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f9f4 	bl	8000bec <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff f9ef 	bl	8000bec <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d902      	bls.n	8001820 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	f000 bde2 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001832:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d8>
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e013      	b.n	8001878 <HAL_RCC_OscConfig+0x500>
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001868:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2202      	movs	r2, #2
 800187a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800187e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800188a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800188e:	fab2 f282 	clz	r2, r2
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f002 021f 	and.w	r2, r2, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0af      	beq.n	800180a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	21f8      	movs	r1, #248	; 0xf8
 80018c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018c8:	fa91 f1a1 	rbit	r1, r1
 80018cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018d4:	fab1 f181 	clz	r1, r1
 80018d8:	b2c9      	uxtb	r1, r1
 80018da:	408b      	lsls	r3, r1
 80018dc:	4920      	ldr	r1, [pc, #128]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
 80018e2:	e06c      	b.n	80019be <HAL_RCC_OscConfig+0x646>
 80018e4:	2301      	movs	r3, #1
 80018e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	461a      	mov	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f96c 	bl	8000bec <HAL_GetTick>
 8001914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff f967 	bl	8000bec <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d902      	bls.n	8001930 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	f000 bd5a 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d104      	bne.n	8001964 <HAL_RCC_OscConfig+0x5ec>
 800195a:	4b01      	ldr	r3, [pc, #4]	; (8001960 <HAL_RCC_OscConfig+0x5e8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e015      	b.n	800198c <HAL_RCC_OscConfig+0x614>
 8001960:	40021000 	.word	0x40021000
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800197c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001988:	4bc8      	ldr	r3, [pc, #800]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2202      	movs	r2, #2
 800198e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001992:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001996:	fa92 f2a2 	rbit	r2, r2
 800199a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800199e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ad      	bne.n	800191a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8110 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d079      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x760>
 80019e4:	2301      	movs	r3, #1
 80019e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4bab      	ldr	r3, [pc, #684]	; (8001cb0 <HAL_RCC_OscConfig+0x938>)
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f8ed 	bl	8000bec <HAL_GetTick>
 8001a12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f8e8 	bl	8000bec <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d902      	bls.n	8001a2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f000 bcdb 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a48:	2202      	movs	r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a88:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a94:	2102      	movs	r1, #2
 8001a96:	6019      	str	r1, [r3, #0]
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f1a3 	rbit	r1, r3
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001aae:	6019      	str	r1, [r3, #0]
  return result;
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0a0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x6a0>
 8001ad6:	e08d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x87c>
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x938>)
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	461a      	mov	r2, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f867 	bl	8000bec <HAL_GetTick>
 8001b1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f862 	bl	8000bec <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d902      	bls.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f000 bc55 	b.w	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ba4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	6019      	str	r1, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f1a3 	rbit	r1, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bcc:	6019      	str	r1, [r3, #0]
  return result;
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d197      	bne.n	8001b24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 81a1 	beq.w	8001f4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d116      	bne.n	8001c4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	61d3      	str	r3, [r2, #28]
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_OscConfig+0x93c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_RCC_OscConfig+0x93c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_RCC_OscConfig+0x93c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7fe ffc3 	bl	8000bec <HAL_GetTick>
 8001c66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7fe ffbe 	bl	8000bec <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e3b1      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_OscConfig+0x93c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ef      	beq.n	8001c6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x940>
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a02      	ldr	r2, [pc, #8]	; (8001cac <HAL_RCC_OscConfig+0x934>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e03c      	b.n	8001d24 <HAL_RCC_OscConfig+0x9ac>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	10908120 	.word	0x10908120
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x96a>
 8001cc8:	4bc1      	ldr	r3, [pc, #772]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4ac0      	ldr	r2, [pc, #768]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	4bbe      	ldr	r3, [pc, #760]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4abd      	ldr	r2, [pc, #756]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e020      	b.n	8001d24 <HAL_RCC_OscConfig+0x9ac>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x994>
 8001cf2:	4bb7      	ldr	r3, [pc, #732]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4ab6      	ldr	r2, [pc, #728]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4bb4      	ldr	r3, [pc, #720]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4ab3      	ldr	r2, [pc, #716]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x9ac>
 8001d0c:	4bb0      	ldr	r3, [pc, #704]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4aaf      	ldr	r2, [pc, #700]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	4bad      	ldr	r3, [pc, #692]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4aac      	ldr	r2, [pc, #688]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8081 	beq.w	8001e38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7fe ff59 	bl	8000bec <HAL_GetTick>
 8001d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7fe ff54 	bl	8000bec <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e345      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001da8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xa4c>
 8001dbe:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0xa74>
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b79      	ldr	r3, [pc, #484]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001df4:	2102      	movs	r1, #2
 8001df6:	6011      	str	r1, [r2, #0]
 8001df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	fa92 f1a2 	rbit	r1, r2
 8001e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e0e:	6011      	str	r1, [r2, #0]
  return result;
 8001e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d084      	beq.n	8001d40 <HAL_RCC_OscConfig+0x9c8>
 8001e36:	e07f      	b.n	8001f38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fed8 	bl	8000bec <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00b      	b.n	8001e5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe fed3 	bl	8000bec <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e2c4      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e62:	2202      	movs	r2, #2
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ea0:	601a      	str	r2, [r3, #0]
  return result;
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001eaa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0xb4e>
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	e013      	b.n	8001eee <HAL_RCC_OscConfig+0xb76>
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001efe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fa92 f1a2 	rbit	r1, r2
 8001f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f10:	6011      	str	r1, [r2, #0]
  return result;
 8001f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d184      	bne.n	8001e42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8242 	beq.w	80023e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCC_OscConfig+0xc58>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	f000 8213 	beq.w	8002392 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f040 8162 	bne.w	8002242 <HAL_RCC_OscConfig+0xeca>
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fa2:	601a      	str	r2, [r3, #0]
  return result;
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe12 	bl	8000bec <HAL_GetTick>
 8001fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e00c      	b.n	8001fe8 <HAL_RCC_OscConfig+0xc70>
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fe0a 	bl	8000bec <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1fd      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002016:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0xcba>
 800202c:	4bb0      	ldr	r3, [pc, #704]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e027      	b.n	8002082 <HAL_RCC_OscConfig+0xd0a>
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	4b9c      	ldr	r3, [pc, #624]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002086:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800208a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800208e:	6011      	str	r1, [r2, #0]
 8002090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002094:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	fa92 f1a2 	rbit	r1, r2
 800209e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020a6:	6011      	str	r1, [r2, #0]
  return result;
 80020a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	fab2 f282 	clz	r2, r2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f042 0220 	orr.w	r2, r2, #32
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d182      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	430b      	orrs	r3, r1
 80020f0:	497f      	ldr	r1, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800211a:	601a      	str	r2, [r3, #0]
  return result;
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002124:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	461a      	mov	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fd56 	bl	8000bec <HAL_GetTick>
 8002140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	e009      	b.n	800215a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002146:	f7fe fd51 	bl	8000bec <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e144      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002188:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0xe2c>
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e027      	b.n	80021f4 <HAL_RCC_OscConfig+0xe7c>
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002200:	6011      	str	r1, [r2, #0]
 8002202:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002206:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	fa92 f1a2 	rbit	r1, r2
 8002210:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002214:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002218:	6011      	str	r1, [r2, #0]
  return result;
 800221a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800221e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f042 0220 	orr.w	r2, r2, #32
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f002 021f 	and.w	r2, r2, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d082      	beq.n	8002146 <HAL_RCC_OscConfig+0xdce>
 8002240:	e0cf      	b.n	80023e2 <HAL_RCC_OscConfig+0x106a>
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800224a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002270:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800227c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	461a      	mov	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fcb0 	bl	8000bec <HAL_GetTick>
 800228c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	e009      	b.n	80022a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002292:	f7fe fcab 	bl	8000bec <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e09e      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022ca:	601a      	str	r2, [r3, #0]
  return result;
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d104      	bne.n	80022f4 <HAL_RCC_OscConfig+0xf7c>
 80022ea:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0xf78>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e029      	b.n	8002344 <HAL_RCC_OscConfig+0xfcc>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x1078>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002348:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800234c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002350:	6011      	str	r1, [r2, #0]
 8002352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002356:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002364:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002368:	6011      	str	r1, [r2, #0]
  return result;
 800236a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800236e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f042 0220 	orr.w	r2, r2, #32
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f002 021f 	and.w	r2, r2, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d180      	bne.n	8002292 <HAL_RCC_OscConfig+0xf1a>
 8002390:	e027      	b.n	80023e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e01e      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_OscConfig+0x1078>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b09e      	sub	sp, #120	; 0x78
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e162      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b90      	ldr	r3, [pc, #576]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b8d      	ldr	r3, [pc, #564]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	498b      	ldr	r1, [pc, #556]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e14a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b82      	ldr	r3, [pc, #520]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	497f      	ldr	r1, [pc, #508]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80dc 	beq.w	8002620 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d13c      	bne.n	80024ea <HAL_RCC_ClockConfig+0xf6>
 8002470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002474:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_RCC_ClockConfig+0xa6>
 8002494:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e00f      	b.n	80024ba <HAL_RCC_ClockConfig+0xc6>
 800249a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	667b      	str	r3, [r7, #100]	; 0x64
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	663b      	str	r3, [r7, #96]	; 0x60
 80024ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	65ba      	str	r2, [r7, #88]	; 0x58
 80024c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d17b      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0f3      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d13c      	bne.n	800256c <HAL_RCC_ClockConfig+0x178>
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_RCC_ClockConfig+0x128>
 8002516:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e00f      	b.n	800253c <HAL_RCC_ClockConfig+0x148>
 800251c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
 8002530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	63ba      	str	r2, [r7, #56]	; 0x38
 8002542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13a      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b2      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 800256c:	2302      	movs	r3, #2
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00d      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1bc>
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2202      	movs	r2, #2
 80025b2:	61ba      	str	r2, [r7, #24]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	617a      	str	r2, [r7, #20]
  return result;
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e079      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fafc 	bl	8000bec <HAL_GetTick>
 80025f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe faf8 	bl	8000bec <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e061      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d214      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4906      	ldr	r1, [pc, #24]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e040      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	491a      	ldr	r1, [pc, #104]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4912      	ldr	r1, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002696:	f000 f829 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	22f0      	movs	r2, #240	; 0xf0
 80026a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	fa92 f2a2 	rbit	r2, r2
 80026ae:	60fa      	str	r2, [r7, #12]
  return result;
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	40d3      	lsrs	r3, r2
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x2ec>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	fa21 f303 	lsr.w	r3, r1, r3
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_RCC_ClockConfig+0x2f0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_ClockConfig+0x2f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fa4a 	bl	8000b64 <HAL_InitTick>
  
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3778      	adds	r7, #120	; 0x78
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	0800398c 	.word	0x0800398c
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x30>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x36>
 800271a:	e03c      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	e03c      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002728:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800272c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	fa92 f2a2 	rbit	r2, r2
 8002734:	607a      	str	r2, [r7, #4]
  return result;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	40d3      	lsrs	r3, r2
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	220f      	movs	r2, #15
 8002750:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	60fa      	str	r2, [r7, #12]
  return result;
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	40d3      	lsrs	r3, r2
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e004      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	623b      	str	r3, [r7, #32]
      break;
 8002794:	e002      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279c:	6a3b      	ldr	r3, [r7, #32]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	372c      	adds	r7, #44	; 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	0800399c 	.word	0x0800399c
 80027b8:	080039ac 	.word	0x080039ac
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b092      	sub	sp, #72	; 0x48
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80d4 	beq.w	800298c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10e      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fa:	61d3      	str	r3, [r2, #28]
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a41      	ldr	r2, [pc, #260]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002826:	f7fe f9e1 	bl	8000bec <HAL_GetTick>
 800282a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	e008      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282e:	f7fe f9dd 	bl	8000bec <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	; 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e14b      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8084 	beq.w	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002868:	429a      	cmp	r2, r3
 800286a:	d07c      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04b      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe f98d 	bl	8000bec <HAL_GetTick>
 80028d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe f989 	bl	8000bec <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0f5      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	61fb      	str	r3, [r7, #28]
  return result;
 8002904:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d108      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800291a:	4b01      	ldr	r3, [pc, #4]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	e00d      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
 8002928:	10908100 	.word	0x10908100
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	4b69      	ldr	r3, [pc, #420]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2202      	movs	r2, #2
 800293e:	613a      	str	r2, [r7, #16]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	fa92 f2a2 	rbit	r2, r2
 8002946:	60fa      	str	r2, [r7, #12]
  return result;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	fab2 f282 	clz	r2, r2
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f002 021f 	and.w	r2, r2, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0b7      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002966:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	495b      	ldr	r1, [pc, #364]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002974:	4313      	orrs	r3, r2
 8002976:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002978:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002998:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f023 0203 	bic.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494e      	ldr	r1, [pc, #312]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f023 0210 	bic.w	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4947      	ldr	r1, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	493f      	ldr	r1, [pc, #252]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f023 0220 	bic.w	r2, r3, #32
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	4938      	ldr	r1, [pc, #224]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	4930      	ldr	r1, [pc, #192]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4929      	ldr	r1, [pc, #164]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4921      	ldr	r1, [pc, #132]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	4912      	ldr	r1, [pc, #72]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3748      	adds	r7, #72	; 0x48
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e049      	b.n	8002b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd ff58 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 f8fe 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_ConfigClockSource+0x1c>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0b6      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x18a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d03e      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xd8>
 8002bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf0:	f200 8087 	bhi.w	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	f000 8086 	beq.w	8002d08 <HAL_TIM_ConfigClockSource+0x176>
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d87f      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c02:	2b70      	cmp	r3, #112	; 0x70
 8002c04:	d01a      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0xaa>
 8002c06:	2b70      	cmp	r3, #112	; 0x70
 8002c08:	d87b      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c0a:	2b60      	cmp	r3, #96	; 0x60
 8002c0c:	d050      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0x11e>
 8002c0e:	2b60      	cmp	r3, #96	; 0x60
 8002c10:	d877      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c12:	2b50      	cmp	r3, #80	; 0x50
 8002c14:	d03c      	beq.n	8002c90 <HAL_TIM_ConfigClockSource+0xfe>
 8002c16:	2b50      	cmp	r3, #80	; 0x50
 8002c18:	d873      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d058      	beq.n	8002cd0 <HAL_TIM_ConfigClockSource+0x13e>
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d86f      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c22:	2b30      	cmp	r3, #48	; 0x30
 8002c24:	d064      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8002c26:	2b30      	cmp	r3, #48	; 0x30
 8002c28:	d86b      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d060      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d867      	bhi.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d05c      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d05a      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8002c3a:	e062      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c4c:	f000 f952 	bl	8002ef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
      break;
 8002c68:	e04f      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	f000 f93b 	bl	8002ef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8c:	609a      	str	r2, [r3, #8]
      break;
 8002c8e:	e03c      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f000 f8af 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2150      	movs	r1, #80	; 0x50
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f908 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cae:	e02c      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f000 f8ce 	bl	8002e5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2160      	movs	r1, #96	; 0x60
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f8f8 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cce:	e01c      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f000 f88f 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2140      	movs	r1, #64	; 0x40
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 f8e8 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cee:	e00c      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 f8df 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002d00:	e003      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <TIM_Base_SetConfig+0xcc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x20>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0xcc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0x5a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x5a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_Base_SetConfig+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x5a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <TIM_Base_SetConfig+0xd4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x5a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <TIM_Base_SetConfig+0xd8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <TIM_Base_SetConfig+0xcc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0xb0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <TIM_Base_SetConfig+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0xb0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <TIM_Base_SetConfig+0xd4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <TIM_Base_SetConfig+0xd8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800

08002e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 030a 	bic.w	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	031b      	lsls	r3, r3, #12
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e04f      	b.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10c      	bne.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40014000 	.word	0x40014000

08003000 <siprintf>:
 8003000:	b40e      	push	{r1, r2, r3}
 8003002:	b500      	push	{lr}
 8003004:	b09c      	sub	sp, #112	; 0x70
 8003006:	ab1d      	add	r3, sp, #116	; 0x74
 8003008:	9002      	str	r0, [sp, #8]
 800300a:	9006      	str	r0, [sp, #24]
 800300c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003010:	4809      	ldr	r0, [pc, #36]	; (8003038 <siprintf+0x38>)
 8003012:	9107      	str	r1, [sp, #28]
 8003014:	9104      	str	r1, [sp, #16]
 8003016:	4909      	ldr	r1, [pc, #36]	; (800303c <siprintf+0x3c>)
 8003018:	f853 2b04 	ldr.w	r2, [r3], #4
 800301c:	9105      	str	r1, [sp, #20]
 800301e:	6800      	ldr	r0, [r0, #0]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	a902      	add	r1, sp, #8
 8003024:	f000 f89a 	bl	800315c <_svfiprintf_r>
 8003028:	9b02      	ldr	r3, [sp, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	b01c      	add	sp, #112	; 0x70
 8003030:	f85d eb04 	ldr.w	lr, [sp], #4
 8003034:	b003      	add	sp, #12
 8003036:	4770      	bx	lr
 8003038:	20000058 	.word	0x20000058
 800303c:	ffff0208 	.word	0xffff0208

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <__errno>:
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <__errno+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000058 	.word	0x20000058

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4d0d      	ldr	r5, [pc, #52]	; (8003094 <__libc_init_array+0x38>)
 8003060:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	2600      	movs	r6, #0
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	4d0b      	ldr	r5, [pc, #44]	; (800309c <__libc_init_array+0x40>)
 800306e:	4c0c      	ldr	r4, [pc, #48]	; (80030a0 <__libc_init_array+0x44>)
 8003070:	f000 fc6a 	bl	8003948 <_init>
 8003074:	1b64      	subs	r4, r4, r5
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	2600      	movs	r6, #0
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	080039f0 	.word	0x080039f0
 8003098:	080039f0 	.word	0x080039f0
 800309c:	080039f0 	.word	0x080039f0
 80030a0:	080039f4 	.word	0x080039f4

080030a4 <__retarget_lock_acquire_recursive>:
 80030a4:	4770      	bx	lr

080030a6 <__retarget_lock_release_recursive>:
 80030a6:	4770      	bx	lr

080030a8 <__ssputs_r>:
 80030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ac:	688e      	ldr	r6, [r1, #8]
 80030ae:	461f      	mov	r7, r3
 80030b0:	42be      	cmp	r6, r7
 80030b2:	680b      	ldr	r3, [r1, #0]
 80030b4:	4682      	mov	sl, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	4690      	mov	r8, r2
 80030ba:	d82c      	bhi.n	8003116 <__ssputs_r+0x6e>
 80030bc:	898a      	ldrh	r2, [r1, #12]
 80030be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030c2:	d026      	beq.n	8003112 <__ssputs_r+0x6a>
 80030c4:	6965      	ldr	r5, [r4, #20]
 80030c6:	6909      	ldr	r1, [r1, #16]
 80030c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030cc:	eba3 0901 	sub.w	r9, r3, r1
 80030d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030d4:	1c7b      	adds	r3, r7, #1
 80030d6:	444b      	add	r3, r9
 80030d8:	106d      	asrs	r5, r5, #1
 80030da:	429d      	cmp	r5, r3
 80030dc:	bf38      	it	cc
 80030de:	461d      	movcc	r5, r3
 80030e0:	0553      	lsls	r3, r2, #21
 80030e2:	d527      	bpl.n	8003134 <__ssputs_r+0x8c>
 80030e4:	4629      	mov	r1, r5
 80030e6:	f000 f957 	bl	8003398 <_malloc_r>
 80030ea:	4606      	mov	r6, r0
 80030ec:	b360      	cbz	r0, 8003148 <__ssputs_r+0xa0>
 80030ee:	6921      	ldr	r1, [r4, #16]
 80030f0:	464a      	mov	r2, r9
 80030f2:	f000 fbc7 	bl	8003884 <memcpy>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	6126      	str	r6, [r4, #16]
 8003104:	6165      	str	r5, [r4, #20]
 8003106:	444e      	add	r6, r9
 8003108:	eba5 0509 	sub.w	r5, r5, r9
 800310c:	6026      	str	r6, [r4, #0]
 800310e:	60a5      	str	r5, [r4, #8]
 8003110:	463e      	mov	r6, r7
 8003112:	42be      	cmp	r6, r7
 8003114:	d900      	bls.n	8003118 <__ssputs_r+0x70>
 8003116:	463e      	mov	r6, r7
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	4632      	mov	r2, r6
 800311c:	4641      	mov	r1, r8
 800311e:	f000 fb86 	bl	800382e <memmove>
 8003122:	68a3      	ldr	r3, [r4, #8]
 8003124:	1b9b      	subs	r3, r3, r6
 8003126:	60a3      	str	r3, [r4, #8]
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	4433      	add	r3, r6
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	2000      	movs	r0, #0
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	462a      	mov	r2, r5
 8003136:	f000 fb4b 	bl	80037d0 <_realloc_r>
 800313a:	4606      	mov	r6, r0
 800313c:	2800      	cmp	r0, #0
 800313e:	d1e0      	bne.n	8003102 <__ssputs_r+0x5a>
 8003140:	6921      	ldr	r1, [r4, #16]
 8003142:	4650      	mov	r0, sl
 8003144:	f000 fbac 	bl	80038a0 <_free_r>
 8003148:	230c      	movs	r3, #12
 800314a:	f8ca 3000 	str.w	r3, [sl]
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800315a:	e7e9      	b.n	8003130 <__ssputs_r+0x88>

0800315c <_svfiprintf_r>:
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	4698      	mov	r8, r3
 8003162:	898b      	ldrh	r3, [r1, #12]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	b09d      	sub	sp, #116	; 0x74
 8003168:	4607      	mov	r7, r0
 800316a:	460d      	mov	r5, r1
 800316c:	4614      	mov	r4, r2
 800316e:	d50e      	bpl.n	800318e <_svfiprintf_r+0x32>
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	b963      	cbnz	r3, 800318e <_svfiprintf_r+0x32>
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	f000 f90f 	bl	8003398 <_malloc_r>
 800317a:	6028      	str	r0, [r5, #0]
 800317c:	6128      	str	r0, [r5, #16]
 800317e:	b920      	cbnz	r0, 800318a <_svfiprintf_r+0x2e>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003188:	e0d0      	b.n	800332c <_svfiprintf_r+0x1d0>
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	616b      	str	r3, [r5, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	9309      	str	r3, [sp, #36]	; 0x24
 8003192:	2320      	movs	r3, #32
 8003194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003198:	f8cd 800c 	str.w	r8, [sp, #12]
 800319c:	2330      	movs	r3, #48	; 0x30
 800319e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003344 <_svfiprintf_r+0x1e8>
 80031a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031a6:	f04f 0901 	mov.w	r9, #1
 80031aa:	4623      	mov	r3, r4
 80031ac:	469a      	mov	sl, r3
 80031ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b2:	b10a      	cbz	r2, 80031b8 <_svfiprintf_r+0x5c>
 80031b4:	2a25      	cmp	r2, #37	; 0x25
 80031b6:	d1f9      	bne.n	80031ac <_svfiprintf_r+0x50>
 80031b8:	ebba 0b04 	subs.w	fp, sl, r4
 80031bc:	d00b      	beq.n	80031d6 <_svfiprintf_r+0x7a>
 80031be:	465b      	mov	r3, fp
 80031c0:	4622      	mov	r2, r4
 80031c2:	4629      	mov	r1, r5
 80031c4:	4638      	mov	r0, r7
 80031c6:	f7ff ff6f 	bl	80030a8 <__ssputs_r>
 80031ca:	3001      	adds	r0, #1
 80031cc:	f000 80a9 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031d2:	445a      	add	r2, fp
 80031d4:	9209      	str	r2, [sp, #36]	; 0x24
 80031d6:	f89a 3000 	ldrb.w	r3, [sl]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a1 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ea:	f10a 0a01 	add.w	sl, sl, #1
 80031ee:	9304      	str	r3, [sp, #16]
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031f6:	931a      	str	r3, [sp, #104]	; 0x68
 80031f8:	4654      	mov	r4, sl
 80031fa:	2205      	movs	r2, #5
 80031fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003200:	4850      	ldr	r0, [pc, #320]	; (8003344 <_svfiprintf_r+0x1e8>)
 8003202:	f7fc ffed 	bl	80001e0 <memchr>
 8003206:	9a04      	ldr	r2, [sp, #16]
 8003208:	b9d8      	cbnz	r0, 8003242 <_svfiprintf_r+0xe6>
 800320a:	06d0      	lsls	r0, r2, #27
 800320c:	bf44      	itt	mi
 800320e:	2320      	movmi	r3, #32
 8003210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003214:	0711      	lsls	r1, r2, #28
 8003216:	bf44      	itt	mi
 8003218:	232b      	movmi	r3, #43	; 0x2b
 800321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800321e:	f89a 3000 	ldrb.w	r3, [sl]
 8003222:	2b2a      	cmp	r3, #42	; 0x2a
 8003224:	d015      	beq.n	8003252 <_svfiprintf_r+0xf6>
 8003226:	9a07      	ldr	r2, [sp, #28]
 8003228:	4654      	mov	r4, sl
 800322a:	2000      	movs	r0, #0
 800322c:	f04f 0c0a 	mov.w	ip, #10
 8003230:	4621      	mov	r1, r4
 8003232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003236:	3b30      	subs	r3, #48	; 0x30
 8003238:	2b09      	cmp	r3, #9
 800323a:	d94d      	bls.n	80032d8 <_svfiprintf_r+0x17c>
 800323c:	b1b0      	cbz	r0, 800326c <_svfiprintf_r+0x110>
 800323e:	9207      	str	r2, [sp, #28]
 8003240:	e014      	b.n	800326c <_svfiprintf_r+0x110>
 8003242:	eba0 0308 	sub.w	r3, r0, r8
 8003246:	fa09 f303 	lsl.w	r3, r9, r3
 800324a:	4313      	orrs	r3, r2
 800324c:	9304      	str	r3, [sp, #16]
 800324e:	46a2      	mov	sl, r4
 8003250:	e7d2      	b.n	80031f8 <_svfiprintf_r+0x9c>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9103      	str	r1, [sp, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfbb      	ittet	lt
 800325e:	425b      	neglt	r3, r3
 8003260:	f042 0202 	orrlt.w	r2, r2, #2
 8003264:	9307      	strge	r3, [sp, #28]
 8003266:	9307      	strlt	r3, [sp, #28]
 8003268:	bfb8      	it	lt
 800326a:	9204      	strlt	r2, [sp, #16]
 800326c:	7823      	ldrb	r3, [r4, #0]
 800326e:	2b2e      	cmp	r3, #46	; 0x2e
 8003270:	d10c      	bne.n	800328c <_svfiprintf_r+0x130>
 8003272:	7863      	ldrb	r3, [r4, #1]
 8003274:	2b2a      	cmp	r3, #42	; 0x2a
 8003276:	d134      	bne.n	80032e2 <_svfiprintf_r+0x186>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	9203      	str	r2, [sp, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	bfb8      	it	lt
 8003284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003288:	3402      	adds	r4, #2
 800328a:	9305      	str	r3, [sp, #20]
 800328c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003354 <_svfiprintf_r+0x1f8>
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	4650      	mov	r0, sl
 8003296:	f7fc ffa3 	bl	80001e0 <memchr>
 800329a:	b138      	cbz	r0, 80032ac <_svfiprintf_r+0x150>
 800329c:	9b04      	ldr	r3, [sp, #16]
 800329e:	eba0 000a 	sub.w	r0, r0, sl
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	4082      	lsls	r2, r0
 80032a6:	4313      	orrs	r3, r2
 80032a8:	3401      	adds	r4, #1
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b0:	4825      	ldr	r0, [pc, #148]	; (8003348 <_svfiprintf_r+0x1ec>)
 80032b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032b6:	2206      	movs	r2, #6
 80032b8:	f7fc ff92 	bl	80001e0 <memchr>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d038      	beq.n	8003332 <_svfiprintf_r+0x1d6>
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <_svfiprintf_r+0x1f0>)
 80032c2:	bb1b      	cbnz	r3, 800330c <_svfiprintf_r+0x1b0>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	3307      	adds	r3, #7
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	3308      	adds	r3, #8
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032d2:	4433      	add	r3, r6
 80032d4:	9309      	str	r3, [sp, #36]	; 0x24
 80032d6:	e768      	b.n	80031aa <_svfiprintf_r+0x4e>
 80032d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032dc:	460c      	mov	r4, r1
 80032de:	2001      	movs	r0, #1
 80032e0:	e7a6      	b.n	8003230 <_svfiprintf_r+0xd4>
 80032e2:	2300      	movs	r3, #0
 80032e4:	3401      	adds	r4, #1
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0c0a 	mov.w	ip, #10
 80032ee:	4620      	mov	r0, r4
 80032f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f4:	3a30      	subs	r2, #48	; 0x30
 80032f6:	2a09      	cmp	r2, #9
 80032f8:	d903      	bls.n	8003302 <_svfiprintf_r+0x1a6>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0c6      	beq.n	800328c <_svfiprintf_r+0x130>
 80032fe:	9105      	str	r1, [sp, #20]
 8003300:	e7c4      	b.n	800328c <_svfiprintf_r+0x130>
 8003302:	fb0c 2101 	mla	r1, ip, r1, r2
 8003306:	4604      	mov	r4, r0
 8003308:	2301      	movs	r3, #1
 800330a:	e7f0      	b.n	80032ee <_svfiprintf_r+0x192>
 800330c:	ab03      	add	r3, sp, #12
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	462a      	mov	r2, r5
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <_svfiprintf_r+0x1f4>)
 8003314:	a904      	add	r1, sp, #16
 8003316:	4638      	mov	r0, r7
 8003318:	f3af 8000 	nop.w
 800331c:	1c42      	adds	r2, r0, #1
 800331e:	4606      	mov	r6, r0
 8003320:	d1d6      	bne.n	80032d0 <_svfiprintf_r+0x174>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	065b      	lsls	r3, r3, #25
 8003326:	f53f af2d 	bmi.w	8003184 <_svfiprintf_r+0x28>
 800332a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800332c:	b01d      	add	sp, #116	; 0x74
 800332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003332:	ab03      	add	r3, sp, #12
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	462a      	mov	r2, r5
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <_svfiprintf_r+0x1f4>)
 800333a:	a904      	add	r1, sp, #16
 800333c:	4638      	mov	r0, r7
 800333e:	f000 f919 	bl	8003574 <_printf_i>
 8003342:	e7eb      	b.n	800331c <_svfiprintf_r+0x1c0>
 8003344:	080039bc 	.word	0x080039bc
 8003348:	080039c6 	.word	0x080039c6
 800334c:	00000000 	.word	0x00000000
 8003350:	080030a9 	.word	0x080030a9
 8003354:	080039c2 	.word	0x080039c2

08003358 <sbrk_aligned>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4e0e      	ldr	r6, [pc, #56]	; (8003394 <sbrk_aligned+0x3c>)
 800335c:	460c      	mov	r4, r1
 800335e:	6831      	ldr	r1, [r6, #0]
 8003360:	4605      	mov	r5, r0
 8003362:	b911      	cbnz	r1, 800336a <sbrk_aligned+0x12>
 8003364:	f000 fa7e 	bl	8003864 <_sbrk_r>
 8003368:	6030      	str	r0, [r6, #0]
 800336a:	4621      	mov	r1, r4
 800336c:	4628      	mov	r0, r5
 800336e:	f000 fa79 	bl	8003864 <_sbrk_r>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	d00a      	beq.n	800338c <sbrk_aligned+0x34>
 8003376:	1cc4      	adds	r4, r0, #3
 8003378:	f024 0403 	bic.w	r4, r4, #3
 800337c:	42a0      	cmp	r0, r4
 800337e:	d007      	beq.n	8003390 <sbrk_aligned+0x38>
 8003380:	1a21      	subs	r1, r4, r0
 8003382:	4628      	mov	r0, r5
 8003384:	f000 fa6e 	bl	8003864 <_sbrk_r>
 8003388:	3001      	adds	r0, #1
 800338a:	d101      	bne.n	8003390 <sbrk_aligned+0x38>
 800338c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003390:	4620      	mov	r0, r4
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	20000260 	.word	0x20000260

08003398 <_malloc_r>:
 8003398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800339c:	1ccd      	adds	r5, r1, #3
 800339e:	f025 0503 	bic.w	r5, r5, #3
 80033a2:	3508      	adds	r5, #8
 80033a4:	2d0c      	cmp	r5, #12
 80033a6:	bf38      	it	cc
 80033a8:	250c      	movcc	r5, #12
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	4607      	mov	r7, r0
 80033ae:	db01      	blt.n	80033b4 <_malloc_r+0x1c>
 80033b0:	42a9      	cmp	r1, r5
 80033b2:	d905      	bls.n	80033c0 <_malloc_r+0x28>
 80033b4:	230c      	movs	r3, #12
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	2600      	movs	r6, #0
 80033ba:	4630      	mov	r0, r6
 80033bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003494 <_malloc_r+0xfc>
 80033c4:	f000 f9f8 	bl	80037b8 <__malloc_lock>
 80033c8:	f8d8 3000 	ldr.w	r3, [r8]
 80033cc:	461c      	mov	r4, r3
 80033ce:	bb5c      	cbnz	r4, 8003428 <_malloc_r+0x90>
 80033d0:	4629      	mov	r1, r5
 80033d2:	4638      	mov	r0, r7
 80033d4:	f7ff ffc0 	bl	8003358 <sbrk_aligned>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	4604      	mov	r4, r0
 80033dc:	d155      	bne.n	800348a <_malloc_r+0xf2>
 80033de:	f8d8 4000 	ldr.w	r4, [r8]
 80033e2:	4626      	mov	r6, r4
 80033e4:	2e00      	cmp	r6, #0
 80033e6:	d145      	bne.n	8003474 <_malloc_r+0xdc>
 80033e8:	2c00      	cmp	r4, #0
 80033ea:	d048      	beq.n	800347e <_malloc_r+0xe6>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	4631      	mov	r1, r6
 80033f0:	4638      	mov	r0, r7
 80033f2:	eb04 0903 	add.w	r9, r4, r3
 80033f6:	f000 fa35 	bl	8003864 <_sbrk_r>
 80033fa:	4581      	cmp	r9, r0
 80033fc:	d13f      	bne.n	800347e <_malloc_r+0xe6>
 80033fe:	6821      	ldr	r1, [r4, #0]
 8003400:	1a6d      	subs	r5, r5, r1
 8003402:	4629      	mov	r1, r5
 8003404:	4638      	mov	r0, r7
 8003406:	f7ff ffa7 	bl	8003358 <sbrk_aligned>
 800340a:	3001      	adds	r0, #1
 800340c:	d037      	beq.n	800347e <_malloc_r+0xe6>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	442b      	add	r3, r5
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	f8d8 3000 	ldr.w	r3, [r8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d038      	beq.n	800348e <_malloc_r+0xf6>
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	42a2      	cmp	r2, r4
 8003420:	d12b      	bne.n	800347a <_malloc_r+0xe2>
 8003422:	2200      	movs	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e00f      	b.n	8003448 <_malloc_r+0xb0>
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	1b52      	subs	r2, r2, r5
 800342c:	d41f      	bmi.n	800346e <_malloc_r+0xd6>
 800342e:	2a0b      	cmp	r2, #11
 8003430:	d917      	bls.n	8003462 <_malloc_r+0xca>
 8003432:	1961      	adds	r1, r4, r5
 8003434:	42a3      	cmp	r3, r4
 8003436:	6025      	str	r5, [r4, #0]
 8003438:	bf18      	it	ne
 800343a:	6059      	strne	r1, [r3, #4]
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	bf08      	it	eq
 8003440:	f8c8 1000 	streq.w	r1, [r8]
 8003444:	5162      	str	r2, [r4, r5]
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	4638      	mov	r0, r7
 800344a:	f104 060b 	add.w	r6, r4, #11
 800344e:	f000 f9b9 	bl	80037c4 <__malloc_unlock>
 8003452:	f026 0607 	bic.w	r6, r6, #7
 8003456:	1d23      	adds	r3, r4, #4
 8003458:	1af2      	subs	r2, r6, r3
 800345a:	d0ae      	beq.n	80033ba <_malloc_r+0x22>
 800345c:	1b9b      	subs	r3, r3, r6
 800345e:	50a3      	str	r3, [r4, r2]
 8003460:	e7ab      	b.n	80033ba <_malloc_r+0x22>
 8003462:	42a3      	cmp	r3, r4
 8003464:	6862      	ldr	r2, [r4, #4]
 8003466:	d1dd      	bne.n	8003424 <_malloc_r+0x8c>
 8003468:	f8c8 2000 	str.w	r2, [r8]
 800346c:	e7ec      	b.n	8003448 <_malloc_r+0xb0>
 800346e:	4623      	mov	r3, r4
 8003470:	6864      	ldr	r4, [r4, #4]
 8003472:	e7ac      	b.n	80033ce <_malloc_r+0x36>
 8003474:	4634      	mov	r4, r6
 8003476:	6876      	ldr	r6, [r6, #4]
 8003478:	e7b4      	b.n	80033e4 <_malloc_r+0x4c>
 800347a:	4613      	mov	r3, r2
 800347c:	e7cc      	b.n	8003418 <_malloc_r+0x80>
 800347e:	230c      	movs	r3, #12
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4638      	mov	r0, r7
 8003484:	f000 f99e 	bl	80037c4 <__malloc_unlock>
 8003488:	e797      	b.n	80033ba <_malloc_r+0x22>
 800348a:	6025      	str	r5, [r4, #0]
 800348c:	e7dc      	b.n	8003448 <_malloc_r+0xb0>
 800348e:	605b      	str	r3, [r3, #4]
 8003490:	deff      	udf	#255	; 0xff
 8003492:	bf00      	nop
 8003494:	2000025c 	.word	0x2000025c

08003498 <_printf_common>:
 8003498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	4616      	mov	r6, r2
 800349e:	4699      	mov	r9, r3
 80034a0:	688a      	ldr	r2, [r1, #8]
 80034a2:	690b      	ldr	r3, [r1, #16]
 80034a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bfb8      	it	lt
 80034ac:	4613      	movlt	r3, r2
 80034ae:	6033      	str	r3, [r6, #0]
 80034b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034b4:	4607      	mov	r7, r0
 80034b6:	460c      	mov	r4, r1
 80034b8:	b10a      	cbz	r2, 80034be <_printf_common+0x26>
 80034ba:	3301      	adds	r3, #1
 80034bc:	6033      	str	r3, [r6, #0]
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	0699      	lsls	r1, r3, #26
 80034c2:	bf42      	ittt	mi
 80034c4:	6833      	ldrmi	r3, [r6, #0]
 80034c6:	3302      	addmi	r3, #2
 80034c8:	6033      	strmi	r3, [r6, #0]
 80034ca:	6825      	ldr	r5, [r4, #0]
 80034cc:	f015 0506 	ands.w	r5, r5, #6
 80034d0:	d106      	bne.n	80034e0 <_printf_common+0x48>
 80034d2:	f104 0a19 	add.w	sl, r4, #25
 80034d6:	68e3      	ldr	r3, [r4, #12]
 80034d8:	6832      	ldr	r2, [r6, #0]
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	42ab      	cmp	r3, r5
 80034de:	dc26      	bgt.n	800352e <_printf_common+0x96>
 80034e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034e4:	1e13      	subs	r3, r2, #0
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	0692      	lsls	r2, r2, #26
 80034ee:	d42b      	bmi.n	8003548 <_printf_common+0xb0>
 80034f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034f4:	4649      	mov	r1, r9
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c0      	blx	r8
 80034fa:	3001      	adds	r0, #1
 80034fc:	d01e      	beq.n	800353c <_printf_common+0xa4>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	6922      	ldr	r2, [r4, #16]
 8003502:	f003 0306 	and.w	r3, r3, #6
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf02      	ittt	eq
 800350a:	68e5      	ldreq	r5, [r4, #12]
 800350c:	6833      	ldreq	r3, [r6, #0]
 800350e:	1aed      	subeq	r5, r5, r3
 8003510:	68a3      	ldr	r3, [r4, #8]
 8003512:	bf0c      	ite	eq
 8003514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003518:	2500      	movne	r5, #0
 800351a:	4293      	cmp	r3, r2
 800351c:	bfc4      	itt	gt
 800351e:	1a9b      	subgt	r3, r3, r2
 8003520:	18ed      	addgt	r5, r5, r3
 8003522:	2600      	movs	r6, #0
 8003524:	341a      	adds	r4, #26
 8003526:	42b5      	cmp	r5, r6
 8003528:	d11a      	bne.n	8003560 <_printf_common+0xc8>
 800352a:	2000      	movs	r0, #0
 800352c:	e008      	b.n	8003540 <_printf_common+0xa8>
 800352e:	2301      	movs	r3, #1
 8003530:	4652      	mov	r2, sl
 8003532:	4649      	mov	r1, r9
 8003534:	4638      	mov	r0, r7
 8003536:	47c0      	blx	r8
 8003538:	3001      	adds	r0, #1
 800353a:	d103      	bne.n	8003544 <_printf_common+0xac>
 800353c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003544:	3501      	adds	r5, #1
 8003546:	e7c6      	b.n	80034d6 <_printf_common+0x3e>
 8003548:	18e1      	adds	r1, r4, r3
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	2030      	movs	r0, #48	; 0x30
 800354e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003552:	4422      	add	r2, r4
 8003554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800355c:	3302      	adds	r3, #2
 800355e:	e7c7      	b.n	80034f0 <_printf_common+0x58>
 8003560:	2301      	movs	r3, #1
 8003562:	4622      	mov	r2, r4
 8003564:	4649      	mov	r1, r9
 8003566:	4638      	mov	r0, r7
 8003568:	47c0      	blx	r8
 800356a:	3001      	adds	r0, #1
 800356c:	d0e6      	beq.n	800353c <_printf_common+0xa4>
 800356e:	3601      	adds	r6, #1
 8003570:	e7d9      	b.n	8003526 <_printf_common+0x8e>
	...

08003574 <_printf_i>:
 8003574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003578:	7e0f      	ldrb	r7, [r1, #24]
 800357a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800357c:	2f78      	cmp	r7, #120	; 0x78
 800357e:	4691      	mov	r9, r2
 8003580:	4680      	mov	r8, r0
 8003582:	460c      	mov	r4, r1
 8003584:	469a      	mov	sl, r3
 8003586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800358a:	d807      	bhi.n	800359c <_printf_i+0x28>
 800358c:	2f62      	cmp	r7, #98	; 0x62
 800358e:	d80a      	bhi.n	80035a6 <_printf_i+0x32>
 8003590:	2f00      	cmp	r7, #0
 8003592:	f000 80d4 	beq.w	800373e <_printf_i+0x1ca>
 8003596:	2f58      	cmp	r7, #88	; 0x58
 8003598:	f000 80c0 	beq.w	800371c <_printf_i+0x1a8>
 800359c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035a4:	e03a      	b.n	800361c <_printf_i+0xa8>
 80035a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035aa:	2b15      	cmp	r3, #21
 80035ac:	d8f6      	bhi.n	800359c <_printf_i+0x28>
 80035ae:	a101      	add	r1, pc, #4	; (adr r1, 80035b4 <_printf_i+0x40>)
 80035b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b4:	0800360d 	.word	0x0800360d
 80035b8:	08003621 	.word	0x08003621
 80035bc:	0800359d 	.word	0x0800359d
 80035c0:	0800359d 	.word	0x0800359d
 80035c4:	0800359d 	.word	0x0800359d
 80035c8:	0800359d 	.word	0x0800359d
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800359d 	.word	0x0800359d
 80035d4:	0800359d 	.word	0x0800359d
 80035d8:	0800359d 	.word	0x0800359d
 80035dc:	0800359d 	.word	0x0800359d
 80035e0:	08003725 	.word	0x08003725
 80035e4:	0800364d 	.word	0x0800364d
 80035e8:	080036df 	.word	0x080036df
 80035ec:	0800359d 	.word	0x0800359d
 80035f0:	0800359d 	.word	0x0800359d
 80035f4:	08003747 	.word	0x08003747
 80035f8:	0800359d 	.word	0x0800359d
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	0800359d 	.word	0x0800359d
 8003604:	0800359d 	.word	0x0800359d
 8003608:	080036e7 	.word	0x080036e7
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	602a      	str	r2, [r5, #0]
 8003614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800361c:	2301      	movs	r3, #1
 800361e:	e09f      	b.n	8003760 <_printf_i+0x1ec>
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	0607      	lsls	r7, r0, #24
 8003626:	f103 0104 	add.w	r1, r3, #4
 800362a:	6029      	str	r1, [r5, #0]
 800362c:	d501      	bpl.n	8003632 <_printf_i+0xbe>
 800362e:	681e      	ldr	r6, [r3, #0]
 8003630:	e003      	b.n	800363a <_printf_i+0xc6>
 8003632:	0646      	lsls	r6, r0, #25
 8003634:	d5fb      	bpl.n	800362e <_printf_i+0xba>
 8003636:	f9b3 6000 	ldrsh.w	r6, [r3]
 800363a:	2e00      	cmp	r6, #0
 800363c:	da03      	bge.n	8003646 <_printf_i+0xd2>
 800363e:	232d      	movs	r3, #45	; 0x2d
 8003640:	4276      	negs	r6, r6
 8003642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003646:	485a      	ldr	r0, [pc, #360]	; (80037b0 <_printf_i+0x23c>)
 8003648:	230a      	movs	r3, #10
 800364a:	e012      	b.n	8003672 <_printf_i+0xfe>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	1d19      	adds	r1, r3, #4
 8003652:	6029      	str	r1, [r5, #0]
 8003654:	0605      	lsls	r5, r0, #24
 8003656:	d501      	bpl.n	800365c <_printf_i+0xe8>
 8003658:	681e      	ldr	r6, [r3, #0]
 800365a:	e002      	b.n	8003662 <_printf_i+0xee>
 800365c:	0641      	lsls	r1, r0, #25
 800365e:	d5fb      	bpl.n	8003658 <_printf_i+0xe4>
 8003660:	881e      	ldrh	r6, [r3, #0]
 8003662:	4853      	ldr	r0, [pc, #332]	; (80037b0 <_printf_i+0x23c>)
 8003664:	2f6f      	cmp	r7, #111	; 0x6f
 8003666:	bf0c      	ite	eq
 8003668:	2308      	moveq	r3, #8
 800366a:	230a      	movne	r3, #10
 800366c:	2100      	movs	r1, #0
 800366e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003672:	6865      	ldr	r5, [r4, #4]
 8003674:	60a5      	str	r5, [r4, #8]
 8003676:	2d00      	cmp	r5, #0
 8003678:	bfa2      	ittt	ge
 800367a:	6821      	ldrge	r1, [r4, #0]
 800367c:	f021 0104 	bicge.w	r1, r1, #4
 8003680:	6021      	strge	r1, [r4, #0]
 8003682:	b90e      	cbnz	r6, 8003688 <_printf_i+0x114>
 8003684:	2d00      	cmp	r5, #0
 8003686:	d04b      	beq.n	8003720 <_printf_i+0x1ac>
 8003688:	4615      	mov	r5, r2
 800368a:	fbb6 f1f3 	udiv	r1, r6, r3
 800368e:	fb03 6711 	mls	r7, r3, r1, r6
 8003692:	5dc7      	ldrb	r7, [r0, r7]
 8003694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003698:	4637      	mov	r7, r6
 800369a:	42bb      	cmp	r3, r7
 800369c:	460e      	mov	r6, r1
 800369e:	d9f4      	bls.n	800368a <_printf_i+0x116>
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d10b      	bne.n	80036bc <_printf_i+0x148>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	07de      	lsls	r6, r3, #31
 80036a8:	d508      	bpl.n	80036bc <_printf_i+0x148>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6861      	ldr	r1, [r4, #4]
 80036ae:	4299      	cmp	r1, r3
 80036b0:	bfde      	ittt	le
 80036b2:	2330      	movle	r3, #48	; 0x30
 80036b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036bc:	1b52      	subs	r2, r2, r5
 80036be:	6122      	str	r2, [r4, #16]
 80036c0:	f8cd a000 	str.w	sl, [sp]
 80036c4:	464b      	mov	r3, r9
 80036c6:	aa03      	add	r2, sp, #12
 80036c8:	4621      	mov	r1, r4
 80036ca:	4640      	mov	r0, r8
 80036cc:	f7ff fee4 	bl	8003498 <_printf_common>
 80036d0:	3001      	adds	r0, #1
 80036d2:	d14a      	bne.n	800376a <_printf_i+0x1f6>
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d8:	b004      	add	sp, #16
 80036da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	4833      	ldr	r0, [pc, #204]	; (80037b4 <_printf_i+0x240>)
 80036e8:	2778      	movs	r7, #120	; 0x78
 80036ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	6829      	ldr	r1, [r5, #0]
 80036f2:	061f      	lsls	r7, r3, #24
 80036f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036f8:	d402      	bmi.n	8003700 <_printf_i+0x18c>
 80036fa:	065f      	lsls	r7, r3, #25
 80036fc:	bf48      	it	mi
 80036fe:	b2b6      	uxthmi	r6, r6
 8003700:	07df      	lsls	r7, r3, #31
 8003702:	bf48      	it	mi
 8003704:	f043 0320 	orrmi.w	r3, r3, #32
 8003708:	6029      	str	r1, [r5, #0]
 800370a:	bf48      	it	mi
 800370c:	6023      	strmi	r3, [r4, #0]
 800370e:	b91e      	cbnz	r6, 8003718 <_printf_i+0x1a4>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	f023 0320 	bic.w	r3, r3, #32
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	2310      	movs	r3, #16
 800371a:	e7a7      	b.n	800366c <_printf_i+0xf8>
 800371c:	4824      	ldr	r0, [pc, #144]	; (80037b0 <_printf_i+0x23c>)
 800371e:	e7e4      	b.n	80036ea <_printf_i+0x176>
 8003720:	4615      	mov	r5, r2
 8003722:	e7bd      	b.n	80036a0 <_printf_i+0x12c>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6826      	ldr	r6, [r4, #0]
 8003728:	6961      	ldr	r1, [r4, #20]
 800372a:	1d18      	adds	r0, r3, #4
 800372c:	6028      	str	r0, [r5, #0]
 800372e:	0635      	lsls	r5, r6, #24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	d501      	bpl.n	8003738 <_printf_i+0x1c4>
 8003734:	6019      	str	r1, [r3, #0]
 8003736:	e002      	b.n	800373e <_printf_i+0x1ca>
 8003738:	0670      	lsls	r0, r6, #25
 800373a:	d5fb      	bpl.n	8003734 <_printf_i+0x1c0>
 800373c:	8019      	strh	r1, [r3, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	4615      	mov	r5, r2
 8003744:	e7bc      	b.n	80036c0 <_printf_i+0x14c>
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	602a      	str	r2, [r5, #0]
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	2100      	movs	r1, #0
 8003752:	4628      	mov	r0, r5
 8003754:	f7fc fd44 	bl	80001e0 <memchr>
 8003758:	b108      	cbz	r0, 800375e <_printf_i+0x1ea>
 800375a:	1b40      	subs	r0, r0, r5
 800375c:	6060      	str	r0, [r4, #4]
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	2300      	movs	r3, #0
 8003764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003768:	e7aa      	b.n	80036c0 <_printf_i+0x14c>
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	462a      	mov	r2, r5
 800376e:	4649      	mov	r1, r9
 8003770:	4640      	mov	r0, r8
 8003772:	47d0      	blx	sl
 8003774:	3001      	adds	r0, #1
 8003776:	d0ad      	beq.n	80036d4 <_printf_i+0x160>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	079b      	lsls	r3, r3, #30
 800377c:	d413      	bmi.n	80037a6 <_printf_i+0x232>
 800377e:	68e0      	ldr	r0, [r4, #12]
 8003780:	9b03      	ldr	r3, [sp, #12]
 8003782:	4298      	cmp	r0, r3
 8003784:	bfb8      	it	lt
 8003786:	4618      	movlt	r0, r3
 8003788:	e7a6      	b.n	80036d8 <_printf_i+0x164>
 800378a:	2301      	movs	r3, #1
 800378c:	4632      	mov	r2, r6
 800378e:	4649      	mov	r1, r9
 8003790:	4640      	mov	r0, r8
 8003792:	47d0      	blx	sl
 8003794:	3001      	adds	r0, #1
 8003796:	d09d      	beq.n	80036d4 <_printf_i+0x160>
 8003798:	3501      	adds	r5, #1
 800379a:	68e3      	ldr	r3, [r4, #12]
 800379c:	9903      	ldr	r1, [sp, #12]
 800379e:	1a5b      	subs	r3, r3, r1
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	dcf2      	bgt.n	800378a <_printf_i+0x216>
 80037a4:	e7eb      	b.n	800377e <_printf_i+0x20a>
 80037a6:	2500      	movs	r5, #0
 80037a8:	f104 0619 	add.w	r6, r4, #25
 80037ac:	e7f5      	b.n	800379a <_printf_i+0x226>
 80037ae:	bf00      	nop
 80037b0:	080039cd 	.word	0x080039cd
 80037b4:	080039de 	.word	0x080039de

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_lock+0x8>)
 80037ba:	f7ff bc73 	b.w	80030a4 <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000258 	.word	0x20000258

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_unlock+0x8>)
 80037c6:	f7ff bc6e 	b.w	80030a6 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000258 	.word	0x20000258

080037d0 <_realloc_r>:
 80037d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d4:	4680      	mov	r8, r0
 80037d6:	4614      	mov	r4, r2
 80037d8:	460e      	mov	r6, r1
 80037da:	b921      	cbnz	r1, 80037e6 <_realloc_r+0x16>
 80037dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037e0:	4611      	mov	r1, r2
 80037e2:	f7ff bdd9 	b.w	8003398 <_malloc_r>
 80037e6:	b92a      	cbnz	r2, 80037f4 <_realloc_r+0x24>
 80037e8:	f000 f85a 	bl	80038a0 <_free_r>
 80037ec:	4625      	mov	r5, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f4:	f000 f8a0 	bl	8003938 <_malloc_usable_size_r>
 80037f8:	4284      	cmp	r4, r0
 80037fa:	4607      	mov	r7, r0
 80037fc:	d802      	bhi.n	8003804 <_realloc_r+0x34>
 80037fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003802:	d812      	bhi.n	800382a <_realloc_r+0x5a>
 8003804:	4621      	mov	r1, r4
 8003806:	4640      	mov	r0, r8
 8003808:	f7ff fdc6 	bl	8003398 <_malloc_r>
 800380c:	4605      	mov	r5, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d0ed      	beq.n	80037ee <_realloc_r+0x1e>
 8003812:	42bc      	cmp	r4, r7
 8003814:	4622      	mov	r2, r4
 8003816:	4631      	mov	r1, r6
 8003818:	bf28      	it	cs
 800381a:	463a      	movcs	r2, r7
 800381c:	f000 f832 	bl	8003884 <memcpy>
 8003820:	4631      	mov	r1, r6
 8003822:	4640      	mov	r0, r8
 8003824:	f000 f83c 	bl	80038a0 <_free_r>
 8003828:	e7e1      	b.n	80037ee <_realloc_r+0x1e>
 800382a:	4635      	mov	r5, r6
 800382c:	e7df      	b.n	80037ee <_realloc_r+0x1e>

0800382e <memmove>:
 800382e:	4288      	cmp	r0, r1
 8003830:	b510      	push	{r4, lr}
 8003832:	eb01 0402 	add.w	r4, r1, r2
 8003836:	d902      	bls.n	800383e <memmove+0x10>
 8003838:	4284      	cmp	r4, r0
 800383a:	4623      	mov	r3, r4
 800383c:	d807      	bhi.n	800384e <memmove+0x20>
 800383e:	1e43      	subs	r3, r0, #1
 8003840:	42a1      	cmp	r1, r4
 8003842:	d008      	beq.n	8003856 <memmove+0x28>
 8003844:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003848:	f803 2f01 	strb.w	r2, [r3, #1]!
 800384c:	e7f8      	b.n	8003840 <memmove+0x12>
 800384e:	4402      	add	r2, r0
 8003850:	4601      	mov	r1, r0
 8003852:	428a      	cmp	r2, r1
 8003854:	d100      	bne.n	8003858 <memmove+0x2a>
 8003856:	bd10      	pop	{r4, pc}
 8003858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800385c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003860:	e7f7      	b.n	8003852 <memmove+0x24>
	...

08003864 <_sbrk_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d06      	ldr	r5, [pc, #24]	; (8003880 <_sbrk_r+0x1c>)
 8003868:	2300      	movs	r3, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fd f8f0 	bl	8000a54 <_sbrk>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_sbrk_r+0x1a>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_sbrk_r+0x1a>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000264 	.word	0x20000264

08003884 <memcpy>:
 8003884:	440a      	add	r2, r1
 8003886:	4291      	cmp	r1, r2
 8003888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800388c:	d100      	bne.n	8003890 <memcpy+0xc>
 800388e:	4770      	bx	lr
 8003890:	b510      	push	{r4, lr}
 8003892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800389a:	4291      	cmp	r1, r2
 800389c:	d1f9      	bne.n	8003892 <memcpy+0xe>
 800389e:	bd10      	pop	{r4, pc}

080038a0 <_free_r>:
 80038a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d044      	beq.n	8003930 <_free_r+0x90>
 80038a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038aa:	9001      	str	r0, [sp, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f1a1 0404 	sub.w	r4, r1, #4
 80038b2:	bfb8      	it	lt
 80038b4:	18e4      	addlt	r4, r4, r3
 80038b6:	f7ff ff7f 	bl	80037b8 <__malloc_lock>
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <_free_r+0x94>)
 80038bc:	9801      	ldr	r0, [sp, #4]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x30>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	b003      	add	sp, #12
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038cc:	f7ff bf7a 	b.w	80037c4 <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x46>
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1949      	addeq	r1, r1, r5
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x22>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x50>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x46>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1855      	adds	r5, r2, r1
 80038f4:	42a5      	cmp	r5, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x70>
 80038f8:	6824      	ldr	r4, [r4, #0]
 80038fa:	4421      	add	r1, r4
 80038fc:	1854      	adds	r4, r2, r1
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x26>
 8003904:	681c      	ldr	r4, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6053      	str	r3, [r2, #4]
 800390a:	440c      	add	r4, r1
 800390c:	6014      	str	r4, [r2, #0]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x26>
 8003910:	d902      	bls.n	8003918 <_free_r+0x78>
 8003912:	230c      	movs	r3, #12
 8003914:	6003      	str	r3, [r0, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x26>
 8003918:	6825      	ldr	r5, [r4, #0]
 800391a:	1961      	adds	r1, r4, r5
 800391c:	428b      	cmp	r3, r1
 800391e:	bf04      	itt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bf04      	itt	eq
 8003928:	1949      	addeq	r1, r1, r5
 800392a:	6021      	streq	r1, [r4, #0]
 800392c:	6054      	str	r4, [r2, #4]
 800392e:	e7ca      	b.n	80038c6 <_free_r+0x26>
 8003930:	b003      	add	sp, #12
 8003932:	bd30      	pop	{r4, r5, pc}
 8003934:	2000025c 	.word	0x2000025c

08003938 <_malloc_usable_size_r>:
 8003938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800393c:	1f18      	subs	r0, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	bfbc      	itt	lt
 8003942:	580b      	ldrlt	r3, [r1, r0]
 8003944:	18c0      	addlt	r0, r0, r3
 8003946:	4770      	bx	lr

08003948 <_init>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr

08003954 <_fini>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr
