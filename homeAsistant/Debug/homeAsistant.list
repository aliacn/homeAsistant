
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080072f8  080072f8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072f8  080072f8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000005c  0800735c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800735c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f4f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c9  00000000  00000000  0003301e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  00036590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf25  00000000  00000000  000372bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001599a  00000000  00000000  000541e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad7f3  00000000  00000000  00069b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d2c  00000000  00000000  00117370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007208 	.word	0x08007208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007208 	.word	0x08007208

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000a6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a76:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000a7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a7e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f80e 	bl	8000ab2 <Lcd_init>

	return lcd;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	461d      	mov	r5, r3
 8000a9a:	f107 0410 	add.w	r4, r7, #16
 8000a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aa6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}

08000ab2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7d9b      	ldrb	r3, [r3, #22]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000ac2:	2133      	movs	r1, #51	; 0x33
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f87b 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000aca:	2132      	movs	r1, #50	; 0x32
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f877 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000ad2:	2128      	movs	r1, #40	; 0x28
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f873 	bl	8000bc0 <lcd_write_command>
 8000ada:	e003      	b.n	8000ae4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000adc:	2138      	movs	r1, #56	; 0x38
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f86e 	bl	8000bc0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f86a 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000aec:	210c      	movs	r1, #12
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f866 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000af4:	2106      	movs	r1, #6
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f862 	bl	8000bc0 <lcd_write_command>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <Lcd_int+0x2c>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fed2 	bl	80068c0 <siprintf>

	Lcd_string(lcd, buffer);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f806 	bl	8000b34 <Lcd_string>
}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08007220 	.word	0x08007220

08000b34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e00a      	b.n	8000b5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f864 	bl	8000c1c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	7bfc      	ldrb	r4, [r7, #15]
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d3ed      	bcc.n	8000b44 <Lcd_string+0x10>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
	...

08000b74 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
 8000b80:	4613      	mov	r3, r2
 8000b82:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <Lcd_cursor+0x30>)
 8000b88:	5cd2      	ldrb	r2, [r2, r3]
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3b80      	subs	r3, #128	; 0x80
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f812 	bl	8000bc0 <lcd_write_command>
	#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08007288 	.word	0x08007288

08000ba8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f804 	bl	8000bc0 <lcd_write_command>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6898      	ldr	r0, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	899b      	ldrh	r3, [r3, #12]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f002 f942 	bl	8002e60 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7d9b      	ldrb	r3, [r3, #22]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f842 	bl	8000c78 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f839 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000c06:	e005      	b.n	8000c14 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f832 	bl	8000c78 <lcd_write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4619      	mov	r1, r3
 8000c34:	f002 f914 	bl	8002e60 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d9b      	ldrb	r3, [r3, #22]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d111      	bne.n	8000c64 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2204      	movs	r2, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f814 	bl	8000c78 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f80b 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000c62:	e005      	b.n	8000c70 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2208      	movs	r2, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f804 	bl	8000c78 <lcd_write>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	4613      	mov	r3, r2
 8000c86:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e019      	b.n	8000cc2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	8819      	ldrh	r1, [r3, #0]
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	fa42 f303 	asr.w	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f002 f8d2 	bl	8002e60 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3e1      	bcc.n	8000c8e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6918      	ldr	r0, [r3, #16]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	8a9b      	ldrh	r3, [r3, #20]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f002 f8c3 	bl	8002e60 <HAL_GPIO_WritePin>
	DELAY(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 ffc4 	bl	8001c68 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6918      	ldr	r0, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8a9b      	ldrh	r3, [r3, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	f002 f8b8 	bl	8002e60 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 ff4d 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 fa05 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fc39 	bl	800157c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d0a:	f000 faff 	bl	800130c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d0e:	f000 fabf 	bl	8001290 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d12:	f000 fa61 	bl	80011d8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 fc01 	bl	800151c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb89 	bl	8001430 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000d1e:	4861      	ldr	r0, [pc, #388]	; (8000ea4 <main+0x1ac>)
 8000d20:	f003 fe3a 	bl	8004998 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	485f      	ldr	r0, [pc, #380]	; (8000ea8 <main+0x1b0>)
 8000d2c:	f002 f898 	bl	8002e60 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d30:	2108      	movs	r1, #8
 8000d32:	485e      	ldr	r0, [pc, #376]	; (8000eac <main+0x1b4>)
 8000d34:	f003 fede 	bl	8004af4 <HAL_TIM_PWM_Start>

  //HAL_ADC_Start (&hadc1);

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 8000d38:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <main+0x1b8>)
 8000d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 8000d44:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <main+0x1bc>)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000d52:	4638      	mov	r0, r7
 8000d54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	2310      	movs	r3, #16
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <main+0x1b0>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2320      	movs	r3, #32
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <main+0x1b0>)
 8000d6e:	f7ff fe75 	bl	8000a5c <Lcd_create>
 8000d72:	f107 0418 	add.w	r4, r7, #24
 8000d76:	463d      	mov	r5, r7
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d80:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd,0,4);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2204      	movs	r2, #4
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fef1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"Ali ACAN");
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	4948      	ldr	r1, [pc, #288]	; (8000eb8 <main+0x1c0>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fecb 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fee4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd," Mikro Islemci");
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4942      	ldr	r1, [pc, #264]	; (8000ebc <main+0x1c4>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff febe 	bl	8000b34 <Lcd_string>
  HAL_Delay(2200);
 8000db8:	f640 0098 	movw	r0, #2200	; 0x898
 8000dbc:	f000 ff54 	bl	8001c68 <HAL_Delay>
  Lcd_clear(&lcd);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff feef 	bl	8000ba8 <Lcd_clear>
  Lcd_cursor(&lcd,0,9);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2209      	movs	r2, #9
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fece 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"PIR :");
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4938      	ldr	r1, [pc, #224]	; (8000ec0 <main+0x1c8>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fea8 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fec1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"LIGHT:");
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4933      	ldr	r1, [pc, #204]	; (8000ec4 <main+0x1cc>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe9b 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,0,0);
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff feb4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"D:");
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	492d      	ldr	r1, [pc, #180]	; (8000ec8 <main+0x1d0>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fe8e 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,0,5);
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fea7 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"cm");
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4928      	ldr	r1, [pc, #160]	; (8000ecc <main+0x1d4>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe81 	bl	8000b34 <Lcd_string>

 // HAL_ADC_Start_DMA(&hadc1,adc_values, 2);
  HAL_ADC_Start(&hadc1);
 8000e32:	4827      	ldr	r0, [pc, #156]	; (8000ed0 <main+0x1d8>)
 8000e34:	f001 f8c2 	bl	8001fbc <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_PollForConversion (&hadc1,1000);
 8000e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3c:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <main+0x1d8>)
 8000e3e:	f001 f92b 	bl	8002098 <HAL_ADC_PollForConversion>
	  	lightValue = HAL_ADC_GetValue (&hadc1);
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <main+0x1d8>)
 8000e44:	f001 f9e6 	bl	8002214 <HAL_ADC_GetValue>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <main+0x1dc>)
 8000e4c:	6013      	str	r3, [r2, #0]
	  	Lcd_cursor(&lcd,1,7);
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2207      	movs	r2, #7
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe8c 	bl	8000b74 <Lcd_cursor>
	    Lcd_string(&lcd,"     lux");
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	491d      	ldr	r1, [pc, #116]	; (8000ed8 <main+0x1e0>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe66 	bl	8000b34 <Lcd_string>
	  	Lcd_cursor(&lcd,1,7);
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe7f 	bl	8000b74 <Lcd_cursor>
	  	Lcd_int(&lcd,lightValue);
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <main+0x1dc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe3e 	bl	8000b04 <Lcd_int>

	  	if (lightValue>2900)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <main+0x1dc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f640 3254 	movw	r2, #2900	; 0xb54
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d923      	bls.n	8000edc <main+0x1e4>
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f001 ffdf 	bl	8002e60 <HAL_GPIO_WritePin>
 8000ea2:	e022      	b.n	8000eea <main+0x1f2>
 8000ea4:	2000011c 	.word	0x2000011c
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	20000168 	.word	0x20000168
 8000eb0:	08007270 	.word	0x08007270
 8000eb4:	08007280 	.word	0x08007280
 8000eb8:	08007224 	.word	0x08007224
 8000ebc:	08007230 	.word	0x08007230
 8000ec0:	08007240 	.word	0x08007240
 8000ec4:	08007248 	.word	0x08007248
 8000ec8:	08007250 	.word	0x08007250
 8000ecc:	08007254 	.word	0x08007254
 8000ed0:	20000078 	.word	0x20000078
 8000ed4:	2000023c 	.word	0x2000023c
 8000ed8:	08007258 	.word	0x08007258
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f001 ffbb 	bl	8002e60 <HAL_GPIO_WritePin>
	  	}


	  	Lcd_cursor(&lcd,0,13);
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	220d      	movs	r2, #13
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe3e 	bl	8000b74 <Lcd_cursor>
	  	Lcd_string(&lcd,"OFF");
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	4978      	ldr	r1, [pc, #480]	; (80010e0 <main+0x3e8>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe18 	bl	8000b34 <Lcd_string>
	  	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2101      	movs	r1, #1
 8000f08:	4876      	ldr	r0, [pc, #472]	; (80010e4 <main+0x3ec>)
 8000f0a:	f001 ffa9 	bl	8002e60 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	4875      	ldr	r0, [pc, #468]	; (80010e8 <main+0x3f0>)
 8000f14:	f001 ffa4 	bl	8002e60 <HAL_GPIO_WritePin>
	  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) // if the pin is HIGH
 8000f18:	2102      	movs	r1, #2
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 ff87 	bl	8002e30 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01a      	beq.n	8000f5e <main+0x266>
	  	  {
	  		 Lcd_cursor(&lcd,0,13);
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	220d      	movs	r2, #13
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe1f 	bl	8000b74 <Lcd_cursor>
	  		 Lcd_string(&lcd," ON");
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	496c      	ldr	r1, [pc, #432]	; (80010ec <main+0x3f4>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fdf9 	bl	8000b34 <Lcd_string>
	  		 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	4868      	ldr	r0, [pc, #416]	; (80010e8 <main+0x3f0>)
 8000f48:	f001 ff8a 	bl	8002e60 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4864      	ldr	r0, [pc, #400]	; (80010e4 <main+0x3ec>)
 8000f52:	f001 ff85 	bl	8002e60 <HAL_GPIO_WritePin>
	  		 HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f000 fe85 	bl	8001c68 <HAL_Delay>
	  	  }

	  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	485f      	ldr	r0, [pc, #380]	; (80010e4 <main+0x3ec>)
 8000f66:	f001 ff7b 	bl	8002e60 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f6a:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <main+0x3f8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
	  	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f72:	bf00      	nop
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <main+0x3f8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d9fa      	bls.n	8000f74 <main+0x27c>
	     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	4857      	ldr	r0, [pc, #348]	; (80010e4 <main+0x3ec>)
 8000f86:	f001 ff6b 	bl	8002e60 <HAL_GPIO_WritePin>

	     pMillis = HAL_GetTick();
 8000f8a:	f000 fe61 	bl	8001c50 <HAL_GetTick>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a58      	ldr	r2, [pc, #352]	; (80010f4 <main+0x3fc>)
 8000f92:	6013      	str	r3, [r2, #0]
	  	 while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000f94:	bf00      	nop
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	4852      	ldr	r0, [pc, #328]	; (80010e4 <main+0x3ec>)
 8000f9c:	f001 ff48 	bl	8002e30 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d108      	bne.n	8000fb8 <main+0x2c0>
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <main+0x3fc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f103 040a 	add.w	r4, r3, #10
 8000fae:	f000 fe4f 	bl	8001c50 <HAL_GetTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	d8ee      	bhi.n	8000f96 <main+0x29e>
	     val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <main+0x3f8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <main+0x400>)
 8000fc0:	6013      	str	r3, [r2, #0]

	     pMillis = HAL_GetTick();
 8000fc2:	f000 fe45 	bl	8001c50 <HAL_GetTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <main+0x3fc>)
 8000fca:	6013      	str	r3, [r2, #0]
	  	 while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000fcc:	bf00      	nop
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	4844      	ldr	r0, [pc, #272]	; (80010e4 <main+0x3ec>)
 8000fd4:	f001 ff2c 	bl	8002e30 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <main+0x2f8>
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <main+0x3fc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000fe6:	f000 fe33 	bl	8001c50 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	429c      	cmp	r4, r3
 8000fee:	d8ee      	bhi.n	8000fce <main+0x2d6>
	     val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <main+0x3f8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4a41      	ldr	r2, [pc, #260]	; (80010fc <main+0x404>)
 8000ff8:	6013      	str	r3, [r2, #0]

	    Lcd_cursor(&lcd,0,2);
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2202      	movs	r2, #2
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fdb6 	bl	8000b74 <Lcd_cursor>
	    Lcd_string(&lcd,"   ");
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	493c      	ldr	r1, [pc, #240]	; (8001100 <main+0x408>)
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd90 	bl	8000b34 <Lcd_string>
	  	distance = (val2-val1) * 0.034/2;
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <main+0x404>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <main+0x400>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa70 	bl	8000504 <__aeabi_ui2d>
 8001024:	a32c      	add	r3, pc, #176	; (adr r3, 80010d8 <main+0x3e0>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103e:	f7ff fc05 	bl	800084c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fce7 	bl	8000a1c <__aeabi_d2uiz>
 800104e:	4603      	mov	r3, r0
 8001050:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <main+0x40c>)
 8001052:	6013      	str	r3, [r2, #0]
	   	Lcd_cursor(&lcd,0,2);
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2202      	movs	r2, #2
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fd89 	bl	8000b74 <Lcd_cursor>
	   	Lcd_int(&lcd,distance);
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <main+0x40c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fd48 	bl	8000b04 <Lcd_int>

	   	if (distance <= 5)
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <main+0x40c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d824      	bhi.n	80010c6 <main+0x3ce>
	   	    {
	   	        for (x = 50; x < 100; x += 5)
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <main+0x410>)
 800107e:	2232      	movs	r2, #50	; 0x32
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e01b      	b.n	80010bc <main+0x3c4>
	   	        {
	   	            __HAL_TIM_SET_AUTORELOAD(&htim2, x * 3);
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <main+0x410>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <main+0x414>)
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <main+0x410>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <main+0x414>)
 80010a0:	60d3      	str	r3, [r2, #12]
	   	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, x);
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <main+0x414>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <main+0x410>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
	   	            HAL_Delay(50);
 80010ac:	2032      	movs	r0, #50	; 0x32
 80010ae:	f000 fddb 	bl	8001c68 <HAL_Delay>
	   	        for (x = 50; x < 100; x += 5)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <main+0x410>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3305      	adds	r3, #5
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <main+0x410>)
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0x410>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b63      	cmp	r3, #99	; 0x63
 80010c2:	d9df      	bls.n	8001084 <main+0x38c>
 80010c4:	e003      	b.n	80010ce <main+0x3d6>
	   	        }
	   	    }
	   	    else
	   	    {
	   	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <main+0x414>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
	   	    }


	   	HAL_Delay(150);
 80010ce:	2096      	movs	r0, #150	; 0x96
 80010d0:	f000 fdca 	bl	8001c68 <HAL_Delay>
	    HAL_ADC_PollForConversion (&hadc1,1000);
 80010d4:	e6b0      	b.n	8000e38 <main+0x140>
 80010d6:	bf00      	nop
 80010d8:	b020c49c 	.word	0xb020c49c
 80010dc:	3fa16872 	.word	0x3fa16872
 80010e0:	08007264 	.word	0x08007264
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800
 80010ec:	08007268 	.word	0x08007268
 80010f0:	2000011c 	.word	0x2000011c
 80010f4:	20000240 	.word	0x20000240
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000248 	.word	0x20000248
 8001100:	0800726c 	.word	0x0800726c
 8001104:	2000024c 	.word	0x2000024c
 8001108:	20000250 	.word	0x20000250
 800110c:	20000168 	.word	0x20000168

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111a:	2228      	movs	r2, #40	; 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fbee 	bl	8006900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2234      	movs	r2, #52	; 0x34
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fbe0 	bl	8006900 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001140:	2303      	movs	r3, #3
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001160:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001164:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116a:	4618      	mov	r0, r3
 800116c:	f001 ffb6 	bl	80030dc <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001176:	f000 facb 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffde 	bl	8004158 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a2:	f000 fab5 	bl	8001710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80011a6:	f241 03a1 	movw	r3, #4257	; 0x10a1
 80011aa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80011b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 f9ff 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011cc:	f000 faa0 	bl	8001710 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3770      	adds	r7, #112	; 0x70
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_ADC1_Init+0xb4>)
 80011f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_ADC1_Init+0xb4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_ADC1_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_ADC1_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_ADC1_Init+0xb4>)
 800120a:	2201      	movs	r2, #1
 800120c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_ADC1_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_ADC1_Init+0xb4>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_ADC1_Init+0xb4>)
 800121e:	2201      	movs	r2, #1
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_ADC1_Init+0xb4>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_ADC1_Init+0xb4>)
 800122a:	2201      	movs	r2, #1
 800122c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_ADC1_Init+0xb4>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_ADC1_Init+0xb4>)
 8001238:	2208      	movs	r2, #8
 800123a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_ADC1_Init+0xb4>)
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_ADC1_Init+0xb4>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <MX_ADC1_Init+0xb4>)
 800124a:	f000 fd31 	bl	8001cb0 <HAL_ADC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001254:	f000 fa5c 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001258:	2301      	movs	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_ADC1_Init+0xb4>)
 8001276:	f000 ffdb 	bl	8002230 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001280:	f000 fa46 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000078 	.word	0x20000078

08001290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_I2C1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_I2C1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_I2C1_Init+0x74>)
 800129c:	f240 220b 	movw	r2, #523	; 0x20b
 80012a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_I2C1_Init+0x74>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_I2C1_Init+0x74>)
 80012ce:	f001 fddf 	bl	8002e90 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 fa1a 	bl	8001710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <MX_I2C1_Init+0x74>)
 80012e0:	f001 fe65 	bl	8002fae <HAL_I2CEx_ConfigAnalogFilter>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 fa11 	bl	8001710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x74>)
 80012f2:	f001 fea7 	bl	8003044 <HAL_I2CEx_ConfigDigitalFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 fa08 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000c8 	.word	0x200000c8
 8001308:	40005400 	.word	0x40005400

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001348:	4b37      	ldr	r3, [pc, #220]	; (8001428 <MX_TIM1_Init+0x11c>)
 800134a:	4a38      	ldr	r2, [pc, #224]	; (800142c <MX_TIM1_Init+0x120>)
 800134c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001350:	224f      	movs	r2, #79	; 0x4f
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <MX_TIM1_Init+0x11c>)
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <MX_TIM1_Init+0x11c>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001374:	482c      	ldr	r0, [pc, #176]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001376:	f003 fab7 	bl	80048e8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001380:	f000 f9c6 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138e:	4619      	mov	r1, r3
 8001390:	4825      	ldr	r0, [pc, #148]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001392:	f003 ffc5 	bl	8005320 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800139c:	f000 f9b8 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013a0:	4821      	ldr	r0, [pc, #132]	; (8001428 <MX_TIM1_Init+0x11c>)
 80013a2:	f003 fc8d 	bl	8004cc0 <HAL_TIM_IC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013ac:	f000 f9b0 	bl	8001710 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013b0:	2304      	movs	r3, #4
 80013b2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013b4:	2350      	movs	r3, #80	; 0x50
 80013b6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013b8:	230a      	movs	r3, #10
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_TIM1_Init+0x11c>)
 80013c8:	f004 f873 	bl	80054b2 <HAL_TIM_SlaveConfigSynchro>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013d2:	f000 f99d 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_TIM1_Init+0x11c>)
 80013ea:	f004 fe4b 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80013f4:	f000 f98c 	bl	8001710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013f8:	230a      	movs	r3, #10
 80013fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM1_Init+0x11c>)
 8001410:	f003 fdd6 	bl	8004fc0 <HAL_TIM_IC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800141a:	f000 f979 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3740      	adds	r7, #64	; 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000011c 	.word	0x2000011c
 800142c:	40012c00 	.word	0x40012c00

08001430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_TIM2_Init+0xe8>)
 8001464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_TIM2_Init+0xe8>)
 800146c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_TIM2_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_TIM2_Init+0xe8>)
 800147a:	220a      	movs	r2, #10
 800147c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_TIM2_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_TIM2_Init+0xe8>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <MX_TIM2_Init+0xe8>)
 800148c:	f003 fa2c 	bl	80048e8 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001496:	f000 f93b 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	4619      	mov	r1, r3
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <MX_TIM2_Init+0xe8>)
 80014a8:	f003 ff3a 	bl	8005320 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014b2:	f000 f92d 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b6:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_TIM2_Init+0xe8>)
 80014b8:	f003 faba 	bl	8004a30 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014c2:	f000 f925 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <MX_TIM2_Init+0xe8>)
 80014d6:	f004 fdd5 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014e0:	f000 f916 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014f0:	2304      	movs	r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2208      	movs	r2, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <MX_TIM2_Init+0xe8>)
 80014fc:	f003 fdfc 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001506:	f000 f903 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_TIM2_Init+0xe8>)
 800150c:	f000 fa26 	bl	800195c <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3738      	adds	r7, #56	; 0x38
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000168 	.word	0x20000168

0800151c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART1_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x58>)
 8001560:	f004 fe14 	bl	800618c <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f8d1 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001b4 	.word	0x200001b4
 8001578:	40013800 	.word	0x40013800

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <MX_GPIO_Init+0x188>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <MX_GPIO_Init+0x188>)
 8001598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b59      	ldr	r3, [pc, #356]	; (8001704 <MX_GPIO_Init+0x188>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <MX_GPIO_Init+0x188>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a55      	ldr	r2, [pc, #340]	; (8001704 <MX_GPIO_Init+0x188>)
 80015b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <MX_GPIO_Init+0x188>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <MX_GPIO_Init+0x188>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <MX_GPIO_Init+0x188>)
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <MX_GPIO_Init+0x188>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <MX_GPIO_Init+0x188>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a49      	ldr	r2, [pc, #292]	; (8001704 <MX_GPIO_Init+0x188>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6153      	str	r3, [r2, #20]
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <MX_GPIO_Init+0x188>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f240 2183 	movw	r1, #643	; 0x283
 80015f8:	4843      	ldr	r0, [pc, #268]	; (8001708 <MX_GPIO_Init+0x18c>)
 80015fa:	f001 fc31 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f240 6104 	movw	r1, #1540	; 0x604
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fc2a 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800160c:	2200      	movs	r2, #0
 800160e:	f24c 2179 	movw	r1, #49785	; 0xc279
 8001612:	483e      	ldr	r0, [pc, #248]	; (800170c <MX_GPIO_Init+0x190>)
 8001614:	f001 fc24 	bl	8002e60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8001618:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <MX_GPIO_Init+0x18c>)
 800162e:	f001 fa8d 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8001632:	2303      	movs	r3, #3
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800163a:	2302      	movs	r3, #2
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	482f      	ldr	r0, [pc, #188]	; (8001708 <MX_GPIO_Init+0x18c>)
 800164a:	f001 fa7f 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800164e:	230a      	movs	r3, #10
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f001 fa72 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA9 RelayModule_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin;
 8001668:	f240 6304 	movw	r3, #1540	; 0x604
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f001 fa62 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001690:	2302      	movs	r3, #2
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <MX_GPIO_Init+0x190>)
 80016a0:	f001 fa54 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 PB4
                           PB5 PB6 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80016a4:	f24c 2378 	movw	r3, #49784	; 0xc278
 80016a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <MX_GPIO_Init+0x190>)
 80016be:	f001 fa45 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80016c2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <MX_GPIO_Init+0x18c>)
 80016dc:	f001 fa36 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80016e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_GPIO_Init+0x190>)
 80016f6:	f001 fa29 	bl	8002b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	48000800 	.word	0x48000800
 800170c:	48000400 	.word	0x48000400

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x44>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001784:	d124      	bne.n	80017d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6153      	str	r3, [r2, #20]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6153      	str	r3, [r2, #20]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f001 f9be 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <HAL_I2C_MspInit+0xb8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d145      	bne.n	800188a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800182e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184e:	f001 f97d 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_I2C_MspInit+0xc0>)
 800186e:	f001 f96d 	bl	8002b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_I2C_MspInit+0xbc>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40005400 	.word	0x40005400
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d132      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	6153      	str	r3, [r2, #20]
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001904:	2306      	movs	r3, #6
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f001 f91b 	bl	8002b4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	201b      	movs	r0, #27
 800191c:	f001 f8df 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001920:	201b      	movs	r0, #27
 8001922:	f001 f8f8 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001926:	e010      	b.n	800194a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d10b      	bne.n	800194a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d11c      	bne.n	80019b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6153      	str	r3, [r2, #20]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <HAL_TIM_MspPostInit+0x68>)
 80019b4:	f001 f8ca 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x7c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d127      	bne.n	8001a3a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x80>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0x80>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x80>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x80>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0x80>)
 8001a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_UART_MspInit+0x80>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a1a:	2330      	movs	r3, #48	; 0x30
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_UART_MspInit+0x84>)
 8001a36:	f001 f889 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000800 	.word	0x48000800

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f8c4 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM1_CC_IRQHandler+0x10>)
 8001aaa:	f003 f96a 	bl	8004d82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000011c 	.word	0x2000011c

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f004 ff12 	bl	8006910 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20004000 	.word	0x20004000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	20000254 	.word	0x20000254
 8001b20:	200003a8 	.word	0x200003a8

08001b24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff ffea 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f004 fed1 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff f8bd 	bl	8000cf8 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b80:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b8c:	08007300 	.word	0x08007300
  ldr r2, =_sbss
 8001b90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b94:	200003a4 	.word	0x200003a4

08001b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 ff8b 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fdb0 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 ffa3 	bl	8002b32 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c04:	f000 ff6b 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000258 	.word	0x20000258

08001c50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000258 	.word	0x20000258

08001c68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008

08001cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b09a      	sub	sp, #104	; 0x68
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e169      	b.n	8001fa4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d176      	bne.n	8001dd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d152      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fd2d 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13b      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fd9f 	bl	800285c <ADC_Disable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12f      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
 8001d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d12b      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	; (8001fac <HAL_ADC_Init+0x2fc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a8f      	ldr	r2, [pc, #572]	; (8001fb0 <HAL_ADC_Init+0x300>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9a      	lsrs	r2, r3, #18
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dac:	d110      	bne.n	8001dd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f023 0312 	bic.w	r3, r3, #18
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80d6 	bne.w	8001f8a <HAL_ADC_Init+0x2da>
 8001dde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80d1 	bne.w	8001f8a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80c9 	bne.w	8001f8a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e00:	f043 0202 	orr.w	r2, r3, #2
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_ADC_Init+0x304>)
 8001e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_ADC_Init+0x180>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_Init+0x180>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0x182>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11c      	bne.n	8001e70 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_Init+0x1a8>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_Init+0x1a8>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_Init+0x1aa>
 8001e58:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e5b      	ldrb	r3, [r3, #25]
 8001e74:	035b      	lsls	r3, r3, #13
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e7a:	2a01      	cmp	r2, #1
 8001e7c:	d002      	beq.n	8001e84 <HAL_ADC_Init+0x1d4>
 8001e7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e82:	e000      	b.n	8001e86 <HAL_ADC_Init+0x1d6>
 8001e84:	2200      	movs	r2, #0
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e96:	4313      	orrs	r3, r2
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d11b      	bne.n	8001edc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e5b      	ldrb	r3, [r3, #25]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	045a      	lsls	r2, r3, #17
 8001eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8001ebe:	e00d      	b.n	8001edc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d007      	beq.n	8001ef4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	4313      	orrs	r3, r2
 8001eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d114      	bne.n	8001f2c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7e1b      	ldrb	r3, [r3, #24]
 8001f1a:	039a      	lsls	r2, r3, #14
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4313      	orrs	r3, r2
 8001f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_ADC_Init+0x308>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f023 010f 	bic.w	r1, r3, #15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f60:	e007      	b.n	8001f72 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020f 	bic.w	r2, r2, #15
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f023 0303 	bic.w	r3, r3, #3
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
 8001f88:	e00a      	b.n	8001fa0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f023 0312 	bic.w	r3, r3, #18
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3768      	adds	r7, #104	; 0x68
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	431bde83 	.word	0x431bde83
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	fff0c007 	.word	0xfff0c007

08001fbc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d158      	bne.n	8002088 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_Start+0x28>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e054      	b.n	800208e <HAL_ADC_Start+0xd2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fbd1 	bl	8002794 <ADC_Enable>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d140      	bne.n	800207e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002032:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002046:	d106      	bne.n	8002056 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f023 0206 	bic.w	r2, r3, #6
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
 8002054:	e002      	b.n	800205c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	221c      	movs	r2, #28
 800206a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e006      	b.n	800208c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002086:	e001      	b.n	800208c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d102      	bne.n	80020b4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020ae:	2308      	movs	r3, #8
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e02e      	b.n	8002112 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_ADC_PollForConversion+0x178>)
 80020b6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d112      	bne.n	80020ea <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d11d      	bne.n	800210e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e08d      	b.n	8002206 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0220 	orr.w	r2, r3, #32
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07b      	b.n	8002206 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800210e:	230c      	movs	r3, #12
 8002110:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800211a:	f7ff fd99 	bl	8001c50 <HAL_GetTick>
 800211e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002120:	e021      	b.n	8002166 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002128:	d01d      	beq.n	8002166 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_ADC_PollForConversion+0xa8>
 8002130:	f7ff fd8e 	bl	8001c50 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d212      	bcs.n	8002166 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f043 0204 	orr.w	r2, r3, #4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0d6      	beq.n	8002122 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800218a:	2b00      	cmp	r3, #0
 800218c:	d131      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12c      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d125      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d112      	bne.n	80021da <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d112      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
 80021d8:	e00b      	b.n	80021f2 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	50000300 	.word	0x50000300

08002214 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002230:	b480      	push	{r7}
 8002232:	b09b      	sub	sp, #108	; 0x6c
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x22>
 800224e:	2302      	movs	r3, #2
 8002250:	e295      	b.n	800277e <HAL_ADC_ConfigChannel+0x54e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 8279 	bne.w	800275c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d81c      	bhi.n	80022ac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	461a      	mov	r2, r3
 8002286:	231f      	movs	r3, #31
 8002288:	4093      	lsls	r3, r2
 800228a:	43db      	mvns	r3, r3
 800228c:	4019      	ands	r1, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa00 f203 	lsl.w	r2, r0, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
 80022aa:	e063      	b.n	8002374 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d81e      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	4019      	ands	r1, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	3b1e      	subs	r3, #30
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
 80022f0:	e040      	b.n	8002374 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b0e      	cmp	r3, #14
 80022f8:	d81e      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	3b3c      	subs	r3, #60	; 0x3c
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	4019      	ands	r1, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	3b3c      	subs	r3, #60	; 0x3c
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
 8002336:	e01d      	b.n	8002374 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	3b5a      	subs	r3, #90	; 0x5a
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	4019      	ands	r1, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	3b5a      	subs	r3, #90	; 0x5a
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80e5 	bne.w	800254e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b09      	cmp	r3, #9
 800238a:	d91c      	bls.n	80023c6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	3b1e      	subs	r3, #30
 800239e:	2207      	movs	r2, #7
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4019      	ands	r1, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6898      	ldr	r0, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	3b1e      	subs	r3, #30
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	619a      	str	r2, [r3, #24]
 80023c4:	e019      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6959      	ldr	r1, [r3, #20]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	2207      	movs	r2, #7
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	4019      	ands	r1, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6898      	ldr	r0, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	3b01      	subs	r3, #1
 8002418:	2b03      	cmp	r3, #3
 800241a:	d84f      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0x28c>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_ADC_ConfigChannel+0x1f4>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	08002457 	.word	0x08002457
 800242c:	08002479 	.word	0x08002479
 8002430:	0800249b 	.word	0x0800249b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800243a:	4b97      	ldr	r3, [pc, #604]	; (8002698 <HAL_ADC_ConfigChannel+0x468>)
 800243c:	4013      	ands	r3, r2
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	0691      	lsls	r1, r2, #26
 8002444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002446:	430a      	orrs	r2, r1
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002454:	e07b      	b.n	800254e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800245c:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <HAL_ADC_ConfigChannel+0x468>)
 800245e:	4013      	ands	r3, r2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	0691      	lsls	r1, r2, #26
 8002466:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002468:	430a      	orrs	r2, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002474:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002476:	e06a      	b.n	800254e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800247e:	4b86      	ldr	r3, [pc, #536]	; (8002698 <HAL_ADC_ConfigChannel+0x468>)
 8002480:	4013      	ands	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	0691      	lsls	r1, r2, #26
 8002488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800248a:	430a      	orrs	r2, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002496:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002498:	e059      	b.n	800254e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024a0:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_ADC_ConfigChannel+0x468>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	0691      	lsls	r1, r2, #26
 80024aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ac:	430a      	orrs	r2, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024b8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ba:	e048      	b.n	800254e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d107      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	069b      	lsls	r3, r3, #26
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002502:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002526:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	069b      	lsls	r3, r3, #26
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800254a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800254c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_ADC_ConfigChannel+0x33e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x33e>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_ADC_ConfigChannel+0x340>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 80fe 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d00f      	beq.n	800259e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43da      	mvns	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	400a      	ands	r2, r1
 8002598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800259c:	e049      	b.n	8002632 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2201      	movs	r2, #1
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d91c      	bls.n	80025fa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1b      	subs	r3, #27
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1b      	subs	r3, #27
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
 80025f8:	e01b      	b.n	8002632 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6959      	ldr	r1, [r3, #20]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	2207      	movs	r2, #7
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	4019      	ands	r1, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6898      	ldr	r0, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	fa00 f203 	lsl.w	r2, r0, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_ADC_ConfigChannel+0x46c>)
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d105      	bne.n	800264a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800264e:	2b11      	cmp	r3, #17
 8002650:	d105      	bne.n	800265e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002662:	2b12      	cmp	r3, #18
 8002664:	f040 8085 	bne.w	8002772 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d17e      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10c      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x470>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x470>
 8002694:	2301      	movs	r3, #1
 8002696:	e004      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x472>
 8002698:	83fff000 	.word	0x83fff000
 800269c:	50000300 	.word	0x50000300
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d150      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x498>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x498>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_ADC_ConfigChannel+0x49a>
 80026c8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d13c      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d11d      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x4e2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d118      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_ADC_ConfigChannel+0x55c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_ADC_ConfigChannel+0x560>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9a      	lsrs	r2, r3, #18
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002702:	e002      	b.n	800270a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3b01      	subs	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f9      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002710:	e02e      	b.n	8002770 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b11      	cmp	r3, #17
 8002718:	d10b      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x502>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d106      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800272c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002730:	e01e      	b.n	8002770 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b12      	cmp	r3, #18
 8002738:	d11a      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002744:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002746:	e013      	b.n	8002770 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800275a:	e00a      	b.n	8002772 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800276e:	e000      	b.n	8002772 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002770:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800277a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800277e:	4618      	mov	r0, r3
 8002780:	376c      	adds	r7, #108	; 0x6c
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000
 8002790:	431bde83 	.word	0x431bde83

08002794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <ADC_Enable+0x2c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <ADC_Enable+0x2c>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <ADC_Enable+0x2e>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d143      	bne.n	800284e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <ADC_Enable+0xc4>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e02f      	b.n	8002850 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002800:	f7ff fa26 	bl	8001c50 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002806:	e01b      	b.n	8002840 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002808:	f7ff fa22 	bl	8001c50 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d914      	bls.n	8002840 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00d      	beq.n	8002840 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f043 0210 	orr.w	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e007      	b.n	8002850 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d1dc      	bne.n	8002808 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	8000003f 	.word	0x8000003f

0800285c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <ADC_Disable+0x2c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <ADC_Disable+0x2c>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <ADC_Disable+0x2e>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d047      	beq.n	800291e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030d 	and.w	r3, r3, #13
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10f      	bne.n	80028bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0202 	orr.w	r2, r2, #2
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2203      	movs	r2, #3
 80028b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028b4:	f7ff f9cc 	bl	8001c50 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ba:	e029      	b.n	8002910 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e023      	b.n	8002920 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028d8:	f7ff f9ba 	bl	8001c50 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d914      	bls.n	8002910 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10d      	bne.n	8002910 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d0dc      	beq.n	80028d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60d3      	str	r3, [r2, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	f7ff ff8e 	bl	80029c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff29 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff3e 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff8e 	bl	8002a1c <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5d 	bl	80029c8 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5a:	e14e      	b.n	8002dfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8140 	beq.w	8002df4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d005      	beq.n	8002b8c <HAL_GPIO_Init+0x40>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d130      	bne.n	8002bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0201 	and.w	r2, r3, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d017      	beq.n	8002c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d123      	bne.n	8002c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 809a 	beq.w	8002df4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a54      	ldr	r2, [pc, #336]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd8:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <HAL_GPIO_Init+0x2d0>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d02:	d013      	beq.n	8002d2c <HAL_GPIO_Init+0x1e0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <HAL_GPIO_Init+0x2d4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_GPIO_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <HAL_GPIO_Init+0x2d8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <HAL_GPIO_Init+0x1d8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <HAL_GPIO_Init+0x2dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_GPIO_Init+0x1d4>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x1e2>
 8002d20:	2305      	movs	r3, #5
 8002d22:	e004      	b.n	8002d2e <HAL_GPIO_Init+0x1e2>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e002      	b.n	8002d2e <HAL_GPIO_Init+0x1e2>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_GPIO_Init+0x1e2>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	f002 0203 	and.w	r2, r2, #3
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4093      	lsls	r3, r2
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d3e:	4937      	ldr	r1, [pc, #220]	; (8002e1c <HAL_GPIO_Init+0x2d0>)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d70:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_GPIO_Init+0x2e0>)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f aea9 	bne.w	8002b5c <HAL_GPIO_Init+0x10>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	48000800 	.word	0x48000800
 8002e28:	48000c00 	.word	0x48000c00
 8002e2c:	40010400 	.word	0x40010400

08002e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e001      	b.n	8002e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e081      	b.n	8002fa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe fc90 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e006      	b.n	8002f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d104      	bne.n	8002f2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d138      	bne.n	8003036 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e032      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	; 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003000:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	d139      	bne.n	80030ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003064:	2302      	movs	r3, #2
 8003066:	e033      	b.n	80030d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f001 b823 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 817d 	beq.w	8003412 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003118:	4bbc      	ldr	r3, [pc, #752]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00c      	beq.n	800313e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003124:	4bb9      	ldr	r3, [pc, #740]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d15c      	bne.n	80031ea <HAL_RCC_OscConfig+0x10e>
 8003130:	4bb6      	ldr	r3, [pc, #728]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d155      	bne.n	80031ea <HAL_RCC_OscConfig+0x10e>
 800313e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003142:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003152:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d102      	bne.n	8003170 <HAL_RCC_OscConfig+0x94>
 800316a:	4ba8      	ldr	r3, [pc, #672]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e015      	b.n	800319c <HAL_RCC_OscConfig+0xc0>
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800318c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003198:	4b9c      	ldr	r3, [pc, #624]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80031a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80031b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 811f 	beq.w	8003410 <HAL_RCC_OscConfig+0x334>
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8116 	bne.w	8003410 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f000 bfaf 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x12e>
 80031fc:	4b83      	ldr	r3, [pc, #524]	; (800340c <HAL_RCC_OscConfig+0x330>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a82      	ldr	r2, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e036      	b.n	8003278 <HAL_RCC_OscConfig+0x19c>
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x158>
 800321a:	4b7c      	ldr	r3, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7b      	ldr	r2, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b79      	ldr	r3, [pc, #484]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e021      	b.n	8003278 <HAL_RCC_OscConfig+0x19c>
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x184>
 8003246:	4b71      	ldr	r3, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a70      	ldr	r2, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6e      	ldr	r3, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6d      	ldr	r2, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0x19c>
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a69      	ldr	r2, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a66      	ldr	r2, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003278:	4b64      	ldr	r3, [pc, #400]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f023 020f 	bic.w	r2, r3, #15
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	495f      	ldr	r1, [pc, #380]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800328e:	4313      	orrs	r3, r2
 8003290:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d059      	beq.n	8003356 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fe fcd5 	bl	8001c50 <HAL_GetTick>
 80032a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fcd0 	bl	8001c50 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d902      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	f000 bf43 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 80032c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_OscConfig+0x218>
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x330>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e015      	b.n	8003320 <HAL_RCC_OscConfig+0x244>
 80032f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003310:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x330>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003324:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003328:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003334:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ab      	beq.n	80032ac <HAL_RCC_OscConfig+0x1d0>
 8003354:	e05d      	b.n	8003412 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe fc7b 	bl	8001c50 <HAL_GetTick>
 800335a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fc76 	bl	8001c50 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d902      	bls.n	8003376 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	f000 bee9 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 8003376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800338a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2cc>
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_RCC_OscConfig+0x330>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	e015      	b.n	80033d4 <HAL_RCC_OscConfig+0x2f8>
 80033a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_RCC_OscConfig+0x330>)
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033e0:	fa92 f2a2 	rbit	r2, r2
 80033e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0220 	orr.w	r2, r2, #32
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ab      	bne.n	8003360 <HAL_RCC_OscConfig+0x284>
 8003408:	e003      	b.n	8003412 <HAL_RCC_OscConfig+0x336>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 817d 	beq.w	8003722 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003428:	4ba6      	ldr	r3, [pc, #664]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003434:	4ba3      	ldr	r3, [pc, #652]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d172      	bne.n	8003526 <HAL_RCC_OscConfig+0x44a>
 8003440:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d16c      	bne.n	8003526 <HAL_RCC_OscConfig+0x44a>
 800344c:	2302      	movs	r3, #2
 800344e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800345e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x3a0>
 8003476:	4b93      	ldr	r3, [pc, #588]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e013      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800348e:	2302      	movs	r3, #2
 8003490:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003494:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034a0:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2202      	movs	r2, #2
 80034a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80034aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034ae:	fa92 f2a2 	rbit	r2, r2
 80034b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80034b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0220 	orr.w	r2, r2, #32
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCC_OscConfig+0x410>
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f000 be2e 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	21f8      	movs	r1, #248	; 0xf8
 8003502:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800350a:	fa91 f1a1 	rbit	r1, r1
 800350e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003512:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003516:	fab1 f181 	clz	r1, r1
 800351a:	b2c9      	uxtb	r1, r1
 800351c:	408b      	lsls	r3, r1
 800351e:	4969      	ldr	r1, [pc, #420]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003524:	e0fd      	b.n	8003722 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8088 	beq.w	8003648 <HAL_RCC_OscConfig+0x56c>
 8003538:	2301      	movs	r3, #1
 800353a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800354a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003558:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	461a      	mov	r2, r3
 8003560:	2301      	movs	r3, #1
 8003562:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fb74 	bl	8001c50 <HAL_GetTick>
 8003568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356e:	f7fe fb6f 	bl	8001c50 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	f000 bde2 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 8003584:	2302      	movs	r3, #2
 8003586:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003596:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4d8>
 80035ae:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e013      	b.n	80035dc <HAL_RCC_OscConfig+0x500>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035c6:	2302      	movs	r3, #2
 80035c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035d8:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2202      	movs	r2, #2
 80035de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035e6:	fa92 f2a2 	rbit	r2, r2
 80035ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80035f2:	fab2 f282 	clz	r2, r2
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	f042 0220 	orr.w	r2, r2, #32
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	f002 021f 	and.w	r2, r2, #31
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0af      	beq.n	800356e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	21f8      	movs	r1, #248	; 0xf8
 8003624:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800362c:	fa91 f1a1 	rbit	r1, r1
 8003630:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003634:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003638:	fab1 f181 	clz	r1, r1
 800363c:	b2c9      	uxtb	r1, r1
 800363e:	408b      	lsls	r3, r1
 8003640:	4920      	ldr	r1, [pc, #128]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
 8003646:	e06c      	b.n	8003722 <HAL_RCC_OscConfig+0x646>
 8003648:	2301      	movs	r3, #1
 800364a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800365a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	461a      	mov	r2, r3
 8003670:	2300      	movs	r3, #0
 8003672:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe faec 	bl	8001c50 <HAL_GetTick>
 8003678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe fae7 	bl	8001c50 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	f000 bd5a 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 8003694:	2302      	movs	r3, #2
 8003696:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80036a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d104      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5ec>
 80036be:	4b01      	ldr	r3, [pc, #4]	; (80036c4 <HAL_RCC_OscConfig+0x5e8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e015      	b.n	80036f0 <HAL_RCC_OscConfig+0x614>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	2302      	movs	r3, #2
 80036ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036da:	2302      	movs	r3, #2
 80036dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036ec:	4bc8      	ldr	r3, [pc, #800]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2202      	movs	r2, #2
 80036f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80036f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003702:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003706:	fab2 f282 	clz	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f002 021f 	and.w	r2, r2, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ad      	bne.n	800367e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8110 	beq.w	8003958 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d079      	beq.n	800383c <HAL_RCC_OscConfig+0x760>
 8003748:	2301      	movs	r3, #1
 800374a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800375a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	4bab      	ldr	r3, [pc, #684]	; (8003a14 <HAL_RCC_OscConfig+0x938>)
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fa6d 	bl	8001c50 <HAL_GetTick>
 8003776:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe fa68 	bl	8001c50 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d902      	bls.n	8003792 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	f000 bcdb 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 8003792:	2302      	movs	r3, #2
 8003794:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037ac:	2202      	movs	r2, #2
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	fa93 f2a3 	rbit	r2, r3
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d0:	2202      	movs	r2, #2
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 80037ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037f8:	2102      	movs	r1, #2
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f1a3 	rbit	r1, r3
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003812:	6019      	str	r1, [r3, #0]
  return result;
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0a0      	beq.n	800377c <HAL_RCC_OscConfig+0x6a0>
 800383a:	e08d      	b.n	8003958 <HAL_RCC_OscConfig+0x87c>
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800385e:	601a      	str	r2, [r3, #0]
  return result;
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003868:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <HAL_RCC_OscConfig+0x938>)
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fe f9e7 	bl	8001c50 <HAL_GetTick>
 8003882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003888:	f7fe f9e2 	bl	8001c50 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f000 bc55 	b.w	8004148 <HAL_RCC_OscConfig+0x106c>
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038a6:	2202      	movs	r2, #2
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ca:	2202      	movs	r2, #2
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003908:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 800390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003916:	2102      	movs	r1, #2
 8003918:	6019      	str	r1, [r3, #0]
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fa93 f1a3 	rbit	r1, r3
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003930:	6019      	str	r1, [r3, #0]
  return result;
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d197      	bne.n	8003888 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 81a1 	beq.w	8003cb0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 8003986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398a:	61d3      	str	r3, [r2, #28]
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_RCC_OscConfig+0x93c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11a      	bne.n	80039f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCC_OscConfig+0x93c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_RCC_OscConfig+0x93c>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fe f943 	bl	8001c50 <HAL_GetTick>
 80039ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	e009      	b.n	80039e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fe f93e 	bl	8001c50 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e3b1      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCC_OscConfig+0x93c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ef      	beq.n	80039d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCC_OscConfig+0x940>
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a02      	ldr	r2, [pc, #8]	; (8003a10 <HAL_RCC_OscConfig+0x934>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	e03c      	b.n	8003a88 <HAL_RCC_OscConfig+0x9ac>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	10908120 	.word	0x10908120
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x96a>
 8003a2c:	4bc1      	ldr	r3, [pc, #772]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4ac0      	ldr	r2, [pc, #768]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	4bbe      	ldr	r3, [pc, #760]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4abd      	ldr	r2, [pc, #756]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	e020      	b.n	8003a88 <HAL_RCC_OscConfig+0x9ac>
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x994>
 8003a56:	4bb7      	ldr	r3, [pc, #732]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4ab6      	ldr	r2, [pc, #728]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	4bb4      	ldr	r3, [pc, #720]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4ab3      	ldr	r2, [pc, #716]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6213      	str	r3, [r2, #32]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x9ac>
 8003a70:	4bb0      	ldr	r3, [pc, #704]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4aaf      	ldr	r2, [pc, #700]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6213      	str	r3, [r2, #32]
 8003a7c:	4bad      	ldr	r3, [pc, #692]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4aac      	ldr	r2, [pc, #688]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8081 	beq.w	8003b9c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe f8d9 	bl	8001c50 <HAL_GetTick>
 8003a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe f8d4 	bl	8001c50 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e345      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	fa93 f2a3 	rbit	r2, r3
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ae8:	2202      	movs	r2, #2
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fa93 f2a3 	rbit	r2, r3
 8003afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b02:	601a      	str	r2, [r3, #0]
  return result;
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0xa4c>
 8003b22:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	e013      	b.n	8003b50 <HAL_RCC_OscConfig+0xa74>
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b30:	2202      	movs	r2, #2
 8003b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	fa93 f2a3 	rbit	r2, r3
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b54:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b58:	2102      	movs	r1, #2
 8003b5a:	6011      	str	r1, [r2, #0]
 8003b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	fa92 f1a2 	rbit	r1, r2
 8003b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b6e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b72:	6011      	str	r1, [r2, #0]
  return result;
 8003b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b78:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d084      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x9c8>
 8003b9a:	e07f      	b.n	8003c9c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe f858 	bl	8001c50 <HAL_GetTick>
 8003ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	e00b      	b.n	8003bbe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe f853 	bl	8001c50 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e2c4      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f2a3 	rbit	r2, r3
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bea:	2202      	movs	r2, #2
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f2a3 	rbit	r2, r3
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c04:	601a      	str	r2, [r3, #0]
  return result;
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_OscConfig+0xb4e>
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	e013      	b.n	8003c52 <HAL_RCC_OscConfig+0xb76>
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c32:	2202      	movs	r2, #2
 8003c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	fa92 f1a2 	rbit	r1, r2
 8003c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c74:	6011      	str	r1, [r2, #0]
  return result;
 8003c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c7a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f002 021f 	and.w	r2, r2, #31
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d184      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8242 	beq.w	8004146 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCC_OscConfig+0xc58>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	f000 8213 	beq.w	80040f6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	f040 8162 	bne.w	8003fa6 <HAL_RCC_OscConfig+0xeca>
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d06:	601a      	str	r2, [r3, #0]
  return result;
 8003d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	461a      	mov	r2, r3
 8003d24:	2300      	movs	r3, #0
 8003d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd ff92 	bl	8001c50 <HAL_GetTick>
 8003d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d30:	e00c      	b.n	8003d4c <HAL_RCC_OscConfig+0xc70>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fd ff8a 	bl	8001c50 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e1fd      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d70:	601a      	str	r2, [r3, #0]
  return result;
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCC_OscConfig+0xcba>
 8003d90:	4bb0      	ldr	r3, [pc, #704]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	e027      	b.n	8003de6 <HAL_RCC_OscConfig+0xd0a>
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	fa93 f2a3 	rbit	r2, r3
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	fa93 f2a3 	rbit	r2, r3
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	4b9c      	ldr	r3, [pc, #624]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003df2:	6011      	str	r1, [r2, #0]
 8003df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	fa92 f1a2 	rbit	r1, r2
 8003e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e06:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e0a:	6011      	str	r1, [r2, #0]
  return result;
 8003e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e10:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	fab2 f282 	clz	r2, r2
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f042 0220 	orr.w	r2, r2, #32
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f002 021f 	and.w	r2, r2, #31
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d182      	bne.n	8003d38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e32:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	430b      	orrs	r3, r1
 8003e54:	497f      	ldr	r1, [pc, #508]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e7e:	601a      	str	r2, [r3, #0]
  return result;
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e88:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fed6 	bl	8001c50 <HAL_GetTick>
 8003ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea8:	e009      	b.n	8003ebe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fd fed1 	bl	8001c50 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e144      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	fa93 f2a3 	rbit	r2, r3
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ee2:	601a      	str	r2, [r3, #0]
  return result;
 8003ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003eec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_OscConfig+0xe2c>
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e027      	b.n	8003f58 <HAL_RCC_OscConfig+0xe7c>
 8003f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	fa92 f1a2 	rbit	r1, r2
 8003f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f7c:	6011      	str	r1, [r2, #0]
  return result;
 8003f7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	fab2 f282 	clz	r2, r2
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f042 0220 	orr.w	r2, r2, #32
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	f002 021f 	and.w	r2, r2, #31
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d082      	beq.n	8003eaa <HAL_RCC_OscConfig+0xdce>
 8003fa4:	e0cf      	b.n	8004146 <HAL_RCC_OscConfig+0x106a>
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	fa93 f2a3 	rbit	r2, r3
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fca:	601a      	str	r2, [r3, #0]
  return result;
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd fe30 	bl	8001c50 <HAL_GetTick>
 8003ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff4:	e009      	b.n	800400a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd fe2b 	bl	8001c50 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e09e      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800402e:	601a      	str	r2, [r3, #0]
  return result;
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004038:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d104      	bne.n	8004058 <HAL_RCC_OscConfig+0xf7c>
 800404e:	4b01      	ldr	r3, [pc, #4]	; (8004054 <HAL_RCC_OscConfig+0xf78>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	e029      	b.n	80040a8 <HAL_RCC_OscConfig+0xfcc>
 8004054:	40021000 	.word	0x40021000
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_OscConfig+0x1078>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	fa92 f1a2 	rbit	r1, r2
 80040c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040cc:	6011      	str	r1, [r2, #0]
  return result;
 80040ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d180      	bne.n	8003ff6 <HAL_RCC_OscConfig+0xf1a>
 80040f4:	e027      	b.n	8004146 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01e      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_OscConfig+0x1078>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004112:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004116:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	429a      	cmp	r2, r3
 8004128:	d10b      	bne.n	8004142 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800412a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800412e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b09e      	sub	sp, #120	; 0x78
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e162      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b90      	ldr	r3, [pc, #576]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	498b      	ldr	r1, [pc, #556]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e14a      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b82      	ldr	r3, [pc, #520]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	497f      	ldr	r1, [pc, #508]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80dc 	beq.w	8004384 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d13c      	bne.n	800424e <HAL_RCC_ClockConfig+0xf6>
 80041d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_ClockConfig+0xa6>
 80041f8:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	e00f      	b.n	800421e <HAL_RCC_ClockConfig+0xc6>
 80041fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	667b      	str	r3, [r7, #100]	; 0x64
 800420c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004210:	663b      	str	r3, [r7, #96]	; 0x60
 8004212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800421a:	4b67      	ldr	r3, [pc, #412]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004222:	65ba      	str	r2, [r7, #88]	; 0x58
 8004224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004226:	fa92 f2a2 	rbit	r2, r2
 800422a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800422c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800422e:	fab2 f282 	clz	r2, r2
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f042 0220 	orr.w	r2, r2, #32
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	f002 021f 	and.w	r2, r2, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f202 	lsl.w	r2, r1, r2
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d17b      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0f3      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d13c      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x178>
 8004256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d102      	bne.n	8004280 <HAL_RCC_ClockConfig+0x128>
 800427a:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_ClockConfig+0x148>
 8004280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004284:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	647b      	str	r3, [r7, #68]	; 0x44
 800428e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
 8004294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429c:	4b46      	ldr	r3, [pc, #280]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a8:	fa92 f2a2 	rbit	r2, r2
 80042ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b0:	fab2 f282 	clz	r2, r2
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	f042 0220 	orr.w	r2, r2, #32
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	f002 021f 	and.w	r2, r2, #31
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f202 	lsl.w	r2, r1, r2
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d13a      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0b2      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
 80042d0:	2302      	movs	r3, #2
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x1a0>
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	e00d      	b.n	8004314 <HAL_RCC_ClockConfig+0x1bc>
 80042f8:	2302      	movs	r3, #2
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
 8004304:	2302      	movs	r3, #2
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2202      	movs	r2, #2
 8004316:	61ba      	str	r2, [r7, #24]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	fa92 f2a2 	rbit	r2, r2
 800431e:	617a      	str	r2, [r7, #20]
  return result;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	fab2 f282 	clz	r2, r2
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f042 0220 	orr.w	r2, r2, #32
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f002 021f 	and.w	r2, r2, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f202 	lsl.w	r2, r1, r2
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e079      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	491a      	ldr	r1, [pc, #104]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004354:	f7fd fc7c 	bl	8001c50 <HAL_GetTick>
 8004358:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fd fc78 	bl	8001c50 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e061      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <HAL_RCC_ClockConfig+0x260>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d214      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	4906      	ldr	r1, [pc, #24]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_RCC_ClockConfig+0x25c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e040      	b.n	8004436 <HAL_RCC_ClockConfig+0x2de>
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCC_ClockConfig+0x2e8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	491a      	ldr	r1, [pc, #104]	; (8004440 <HAL_RCC_ClockConfig+0x2e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x2e8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4912      	ldr	r1, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x2e8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043fa:	f000 f829 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80043fe:	4601      	mov	r1, r0
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_RCC_ClockConfig+0x2e8>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004408:	22f0      	movs	r2, #240	; 0xf0
 800440a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	fa92 f2a2 	rbit	r2, r2
 8004412:	60fa      	str	r2, [r7, #12]
  return result;
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	fab2 f282 	clz	r2, r2
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	40d3      	lsrs	r3, r2
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x2ec>)
 8004420:	5cd3      	ldrb	r3, [r2, r3]
 8004422:	fa21 f303 	lsr.w	r3, r1, r3
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_RCC_ClockConfig+0x2f0>)
 8004428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_RCC_ClockConfig+0x2f4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fbca 	bl	8001bc8 <HAL_InitTick>
  
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3778      	adds	r7, #120	; 0x78
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	0800728c 	.word	0x0800728c
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b08b      	sub	sp, #44	; 0x2c
 8004454:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b04      	cmp	r3, #4
 8004478:	d002      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x30>
 800447a:	2b08      	cmp	r3, #8
 800447c:	d003      	beq.n	8004486 <HAL_RCC_GetSysClockFreq+0x36>
 800447e:	e03c      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004482:	623b      	str	r3, [r7, #32]
      break;
 8004484:	e03c      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800448c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004490:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	fa92 f2a2 	rbit	r2, r2
 8004498:	607a      	str	r2, [r7, #4]
  return result;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	40d3      	lsrs	r3, r2
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	220f      	movs	r2, #15
 80044b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fa92 f2a2 	rbit	r2, r2
 80044bc:	60fa      	str	r2, [r7, #12]
  return result;
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	40d3      	lsrs	r3, r2
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <HAL_RCC_GetSysClockFreq+0xcc>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	e004      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	623b      	str	r3, [r7, #32]
      break;
 80044f8:	e002      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044fc:	623b      	str	r3, [r7, #32]
      break;
 80044fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004500:	6a3b      	ldr	r3, [r7, #32]
}
 8004502:	4618      	mov	r0, r3
 8004504:	372c      	adds	r7, #44	; 0x2c
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	080072a4 	.word	0x080072a4
 800451c:	080072b4 	.word	0x080072b4
 8004520:	003d0900 	.word	0x003d0900

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004542:	f7ff ffef 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004546:	4601      	mov	r1, r0
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004550:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004554:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	fa92 f2a2 	rbit	r2, r2
 800455c:	603a      	str	r2, [r7, #0]
  return result;
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	40d3      	lsrs	r3, r2
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <HAL_RCC_GetPCLK1Freq+0x40>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	0800729c 	.word	0x0800729c

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004586:	f7ff ffcd 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800458a:	4601      	mov	r1, r0
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004594:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004598:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	fa92 f2a2 	rbit	r2, r2
 80045a0:	603a      	str	r2, [r7, #0]
  return result;
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	40d3      	lsrs	r3, r2
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	0800729c 	.word	0x0800729c

080045c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b092      	sub	sp, #72	; 0x48
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80d4 	beq.w	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e8:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10e      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a4a      	ldr	r2, [pc, #296]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	61d3      	str	r3, [r2, #28]
 8004600:	4b48      	ldr	r3, [pc, #288]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b45      	ldr	r3, [pc, #276]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b42      	ldr	r3, [pc, #264]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a41      	ldr	r2, [pc, #260]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fd fb11 	bl	8001c50 <HAL_GetTick>
 800462e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fd fb0d 	bl	8001c50 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	; 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e14b      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004650:	4b34      	ldr	r3, [pc, #208]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8084 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800466c:	429a      	cmp	r2, r3
 800466e:	d07c      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	4b26      	ldr	r3, [pc, #152]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	2301      	movs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d04b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd fabd 	bl	8001c50 <HAL_GetTick>
 80046d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fd fab9 	bl	8001c50 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0f5      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80046f0:	2302      	movs	r3, #2
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	2302      	movs	r3, #2
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	61fb      	str	r3, [r7, #28]
  return result;
 8004708:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d108      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800471e:	4b01      	ldr	r3, [pc, #4]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	e00d      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004724:	40021000 	.word	0x40021000
 8004728:	40007000 	.word	0x40007000
 800472c:	10908100 	.word	0x10908100
 8004730:	2302      	movs	r3, #2
 8004732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	4b69      	ldr	r3, [pc, #420]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2202      	movs	r2, #2
 8004742:	613a      	str	r2, [r7, #16]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	fa92 f2a2 	rbit	r2, r2
 800474a:	60fa      	str	r2, [r7, #12]
  return result;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f002 021f 	and.w	r2, r2, #31
 800475e:	2101      	movs	r1, #1
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0b7      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800476a:	4b5e      	ldr	r3, [pc, #376]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	495b      	ldr	r1, [pc, #364]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004778:	4313      	orrs	r3, r2
 800477a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800477c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004784:	4b57      	ldr	r3, [pc, #348]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4a56      	ldr	r2, [pc, #344]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800478a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479c:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494e      	ldr	r1, [pc, #312]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ba:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f023 0210 	bic.w	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4947      	ldr	r1, [pc, #284]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	493f      	ldr	r1, [pc, #252]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047f6:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f023 0220 	bic.w	r2, r3, #32
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	4938      	ldr	r1, [pc, #224]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004804:	4313      	orrs	r3, r2
 8004806:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004814:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	4930      	ldr	r1, [pc, #192]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004822:	4313      	orrs	r3, r2
 8004824:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004832:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4929      	ldr	r1, [pc, #164]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800485e:	4313      	orrs	r3, r2
 8004860:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	491a      	ldr	r1, [pc, #104]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487c:	4313      	orrs	r3, r2
 800487e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800488c:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	4912      	ldr	r1, [pc, #72]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800489a:	4313      	orrs	r3, r2
 800489c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	490b      	ldr	r1, [pc, #44]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3748      	adds	r7, #72	; 0x48
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e049      	b.n	800498e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc ffc6 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fe38 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e033      	b.n	8004a18 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <HAL_TIM_Base_Start+0x8c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIM_Base_Start+0x3e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ca:	d004      	beq.n	80049d6 <HAL_TIM_Base_Start+0x3e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_TIM_Base_Start+0x90>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d115      	bne.n	8004a02 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_TIM_Base_Start+0x94>)
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d015      	beq.n	8004a14 <HAL_TIM_Base_Start+0x7c>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d011      	beq.n	8004a14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e008      	b.n	8004a14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	00010007 	.word	0x00010007

08004a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e049      	b.n	8004ad6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f841 	bl	8004ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fd94 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_TIM_PWM_Start+0x24>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e03c      	b.n	8004b92 <HAL_TIM_PWM_Start+0x9e>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d109      	bne.n	8004b32 <HAL_TIM_PWM_Start+0x3e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	bf14      	ite	ne
 8004b2a:	2301      	movne	r3, #1
 8004b2c:	2300      	moveq	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	e02f      	b.n	8004b92 <HAL_TIM_PWM_Start+0x9e>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d109      	bne.n	8004b4c <HAL_TIM_PWM_Start+0x58>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e022      	b.n	8004b92 <HAL_TIM_PWM_Start+0x9e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d109      	bne.n	8004b66 <HAL_TIM_PWM_Start+0x72>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e015      	b.n	8004b92 <HAL_TIM_PWM_Start+0x9e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d109      	bne.n	8004b80 <HAL_TIM_PWM_Start+0x8c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e008      	b.n	8004b92 <HAL_TIM_PWM_Start+0x9e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e083      	b.n	8004ca2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xb6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	e023      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xc6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	e01b      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xfe>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start+0xd6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	e013      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xfe>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_PWM_Start+0xe6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd8:	e00b      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xfe>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0xf6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be8:	e003      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xfe>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fa1c 	bl	8006038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a29      	ldr	r2, [pc, #164]	; (8004cac <HAL_TIM_PWM_Start+0x1b8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_PWM_Start+0x134>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a28      	ldr	r2, [pc, #160]	; (8004cb0 <HAL_TIM_PWM_Start+0x1bc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_PWM_Start+0x134>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a26      	ldr	r2, [pc, #152]	; (8004cb4 <HAL_TIM_PWM_Start+0x1c0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_PWM_Start+0x134>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <HAL_TIM_PWM_Start+0x1c4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_PWM_Start+0x138>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_TIM_PWM_Start+0x13a>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a19      	ldr	r2, [pc, #100]	; (8004cac <HAL_TIM_PWM_Start+0x1b8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_TIM_PWM_Start+0x16c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d004      	beq.n	8004c60 <HAL_TIM_PWM_Start+0x16c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <HAL_TIM_PWM_Start+0x1bc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d115      	bne.n	8004c8c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_TIM_PWM_Start+0x1c8>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d015      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1aa>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d011      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	e008      	b.n	8004c9e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	40014400 	.word	0x40014400
 8004cb8:	40014800 	.word	0x40014800
 8004cbc:	00010007 	.word	0x00010007

08004cc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e049      	b.n	8004d66 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f841 	bl	8004d6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f000 fc4c 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d122      	bne.n	8004dde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d11b      	bne.n	8004dde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0202 	mvn.w	r2, #2
 8004dae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fbca 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8004dca:	e005      	b.n	8004dd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fbbc 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fbcd 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d122      	bne.n	8004e32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d11b      	bne.n	8004e32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0204 	mvn.w	r2, #4
 8004e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fba0 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8004e1e:	e005      	b.n	8004e2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb92 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fba3 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d122      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11b      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0208 	mvn.w	r2, #8
 8004e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb76 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8004e72:	e005      	b.n	8004e80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb68 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb79 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d122      	bne.n	8004eda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d11b      	bne.n	8004eda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0210 	mvn.w	r2, #16
 8004eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fb4c 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8004ec6:	e005      	b.n	8004ed4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb3e 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fb4f 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f06f 0201 	mvn.w	r2, #1
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb18 	bl	8005536 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 f919 	bl	8006164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 f90c 	bl	8006178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fafd 	bl	8005586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0220 	mvn.w	r2, #32
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 f8cc 	bl	8006150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_IC_ConfigChannel+0x1e>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e088      	b.n	80050f0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004ffc:	f000 fe76 	bl	8005cec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 020c 	bic.w	r2, r2, #12
 800500e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
 8005022:	e060      	b.n	80050e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d11c      	bne.n	8005064 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800503a:	f000 fedc 	bl	8005df6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800504c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6999      	ldr	r1, [r3, #24]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	021a      	lsls	r2, r3, #8
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
 8005062:	e040      	b.n	80050e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b08      	cmp	r3, #8
 8005068:	d11b      	bne.n	80050a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800507a:	f000 ff29 	bl	8005ed0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 020c 	bic.w	r2, r2, #12
 800508c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	61da      	str	r2, [r3, #28]
 80050a0:	e021      	b.n	80050e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d11c      	bne.n	80050e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80050b8:	f000 ff46 	bl	8005f48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69d9      	ldr	r1, [r3, #28]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	61da      	str	r2, [r3, #28]
 80050e0:	e001      	b.n	80050e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ff      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b14      	cmp	r3, #20
 8005122:	f200 80f0 	bhi.w	8005306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005181 	.word	0x08005181
 8005130:	08005307 	.word	0x08005307
 8005134:	08005307 	.word	0x08005307
 8005138:	08005307 	.word	0x08005307
 800513c:	080051c1 	.word	0x080051c1
 8005140:	08005307 	.word	0x08005307
 8005144:	08005307 	.word	0x08005307
 8005148:	08005307 	.word	0x08005307
 800514c:	08005203 	.word	0x08005203
 8005150:	08005307 	.word	0x08005307
 8005154:	08005307 	.word	0x08005307
 8005158:	08005307 	.word	0x08005307
 800515c:	08005243 	.word	0x08005243
 8005160:	08005307 	.word	0x08005307
 8005164:	08005307 	.word	0x08005307
 8005168:	08005307 	.word	0x08005307
 800516c:	08005285 	.word	0x08005285
 8005170:	08005307 	.word	0x08005307
 8005174:	08005307 	.word	0x08005307
 8005178:	08005307 	.word	0x08005307
 800517c:	080052c5 	.word	0x080052c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fa76 	bl	8005678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0208 	orr.w	r2, r2, #8
 800519a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0204 	bic.w	r2, r2, #4
 80051aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6999      	ldr	r1, [r3, #24]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	619a      	str	r2, [r3, #24]
      break;
 80051be:	e0a5      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fadc 	bl	8005784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	619a      	str	r2, [r3, #24]
      break;
 8005200:	e084      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fb3b 	bl	8005884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0208 	orr.w	r2, r2, #8
 800521c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0204 	bic.w	r2, r2, #4
 800522c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69d9      	ldr	r1, [r3, #28]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	61da      	str	r2, [r3, #28]
      break;
 8005240:	e064      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fb99 	bl	8005980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	021a      	lsls	r2, r3, #8
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	61da      	str	r2, [r3, #28]
      break;
 8005282:	e043      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fbdc 	bl	8005a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0208 	orr.w	r2, r2, #8
 800529e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0204 	bic.w	r2, r2, #4
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052c2:	e023      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fc1a 	bl	8005b04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	021a      	lsls	r2, r3, #8
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005304:	e002      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
      break;
 800530a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop

08005320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIM_ConfigClockSource+0x1c>
 8005338:	2302      	movs	r3, #2
 800533a:	e0b6      	b.n	80054aa <HAL_TIM_ConfigClockSource+0x18a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005378:	d03e      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xd8>
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537e:	f200 8087 	bhi.w	8005490 <HAL_TIM_ConfigClockSource+0x170>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	f000 8086 	beq.w	8005496 <HAL_TIM_ConfigClockSource+0x176>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	d87f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 8005390:	2b70      	cmp	r3, #112	; 0x70
 8005392:	d01a      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0xaa>
 8005394:	2b70      	cmp	r3, #112	; 0x70
 8005396:	d87b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 8005398:	2b60      	cmp	r3, #96	; 0x60
 800539a:	d050      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x11e>
 800539c:	2b60      	cmp	r3, #96	; 0x60
 800539e:	d877      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 80053a0:	2b50      	cmp	r3, #80	; 0x50
 80053a2:	d03c      	beq.n	800541e <HAL_TIM_ConfigClockSource+0xfe>
 80053a4:	2b50      	cmp	r3, #80	; 0x50
 80053a6:	d873      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d058      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x13e>
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d86f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d064      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15e>
 80053b4:	2b30      	cmp	r3, #48	; 0x30
 80053b6:	d86b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d060      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15e>
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d867      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15e>
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d05a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15e>
 80053c8:	e062      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	f000 fe0d 	bl	8005ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	609a      	str	r2, [r3, #8]
      break;
 80053f6:	e04f      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	f000 fdf6 	bl	8005ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800541a:	609a      	str	r2, [r3, #8]
      break;
 800541c:	e03c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	461a      	mov	r2, r3
 800542c:	f000 fcb4 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2150      	movs	r1, #80	; 0x50
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fdc3 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 800543c:	e02c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fd10 	bl	8005e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2160      	movs	r1, #96	; 0x60
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fdb3 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 800545c:	e01c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fc94 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	; 0x40
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fda3 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 800547c:	e00c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 fd9a 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 800548e:	e003      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e000      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e031      	b.n	800552e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb71 	bl	8005bc4 <TIM_SlaveTimer_SetConfig>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e018      	b.n	800552e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800551a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <TIM_Base_SetConfig+0xcc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x20>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a25      	ldr	r2, [pc, #148]	; (8005668 <TIM_Base_SetConfig+0xcc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00f      	beq.n	80055f6 <TIM_Base_SetConfig+0x5a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0x5a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a22      	ldr	r2, [pc, #136]	; (800566c <TIM_Base_SetConfig+0xd0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0x5a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a21      	ldr	r2, [pc, #132]	; (8005670 <TIM_Base_SetConfig+0xd4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0x5a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a20      	ldr	r2, [pc, #128]	; (8005674 <TIM_Base_SetConfig+0xd8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <TIM_Base_SetConfig+0xcc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0xb0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a0d      	ldr	r2, [pc, #52]	; (800566c <TIM_Base_SetConfig+0xd0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <TIM_Base_SetConfig+0xd4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xb0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <TIM_Base_SetConfig+0xd8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800

08005678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0302 	bic.w	r3, r3, #2
 80056c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a28      	ldr	r2, [pc, #160]	; (8005774 <TIM_OC1_SetConfig+0xfc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <TIM_OC1_SetConfig+0x78>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a27      	ldr	r2, [pc, #156]	; (8005778 <TIM_OC1_SetConfig+0x100>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <TIM_OC1_SetConfig+0x78>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a26      	ldr	r2, [pc, #152]	; (800577c <TIM_OC1_SetConfig+0x104>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_OC1_SetConfig+0x78>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <TIM_OC1_SetConfig+0x108>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10c      	bne.n	800570a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 0308 	bic.w	r3, r3, #8
 80056f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <TIM_OC1_SetConfig+0xfc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_OC1_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <TIM_OC1_SetConfig+0x100>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC1_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <TIM_OC1_SetConfig+0x104>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC1_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <TIM_OC1_SetConfig+0x108>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0210 	bic.w	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0320 	bic.w	r3, r3, #32
 80057d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a24      	ldr	r2, [pc, #144]	; (8005874 <TIM_OC2_SetConfig+0xf0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10d      	bne.n	8005804 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <TIM_OC2_SetConfig+0xf0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_OC2_SetConfig+0xa0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <TIM_OC2_SetConfig+0xf4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_OC2_SetConfig+0xa0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a19      	ldr	r2, [pc, #100]	; (800587c <TIM_OC2_SetConfig+0xf8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC2_SetConfig+0xa0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <TIM_OC2_SetConfig+0xfc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d113      	bne.n	800584c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005832:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <TIM_OC3_SetConfig+0xec>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10d      	bne.n	8005902 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005900:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <TIM_OC3_SetConfig+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC3_SetConfig+0x9e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	; (8005974 <TIM_OC3_SetConfig+0xf0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC3_SetConfig+0x9e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <TIM_OC3_SetConfig+0xf4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0x9e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC3_SetConfig+0xf8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d113      	bne.n	800594a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <TIM_OC4_SetConfig+0xb8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC4_SetConfig+0x7c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <TIM_OC4_SetConfig+0xbc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC4_SetConfig+0x7c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a14      	ldr	r2, [pc, #80]	; (8005a40 <TIM_OC4_SetConfig+0xc0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC4_SetConfig+0x7c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <TIM_OC4_SetConfig+0xc4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800

08005a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <TIM_OC5_SetConfig+0xac>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_OC5_SetConfig+0x72>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC5_SetConfig+0xb0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <TIM_OC5_SetConfig+0x72>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <TIM_OC5_SetConfig+0xb4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC5_SetConfig+0x72>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <TIM_OC5_SetConfig+0xb8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d109      	bne.n	8005ace <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800

08005b04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	051b      	lsls	r3, r3, #20
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <TIM_OC6_SetConfig+0xb0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC6_SetConfig+0x74>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC6_SetConfig+0xb4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC6_SetConfig+0x74>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <TIM_OC6_SetConfig+0xb8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC6_SetConfig+0x74>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <TIM_OC6_SetConfig+0xbc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	f023 0307 	bic.w	r3, r3, #7
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b70      	cmp	r3, #112	; 0x70
 8005c10:	d01a      	beq.n	8005c48 <TIM_SlaveTimer_SetConfig+0x84>
 8005c12:	2b70      	cmp	r3, #112	; 0x70
 8005c14:	d860      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c16:	2b60      	cmp	r3, #96	; 0x60
 8005c18:	d054      	beq.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x100>
 8005c1a:	2b60      	cmp	r3, #96	; 0x60
 8005c1c:	d85c      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c1e:	2b50      	cmp	r3, #80	; 0x50
 8005c20:	d046      	beq.n	8005cb0 <TIM_SlaveTimer_SetConfig+0xec>
 8005c22:	2b50      	cmp	r3, #80	; 0x50
 8005c24:	d858      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d019      	beq.n	8005c5e <TIM_SlaveTimer_SetConfig+0x9a>
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d854      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d055      	beq.n	8005cde <TIM_SlaveTimer_SetConfig+0x11a>
 8005c32:	2b30      	cmp	r3, #48	; 0x30
 8005c34:	d850      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d051      	beq.n	8005cde <TIM_SlaveTimer_SetConfig+0x11a>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d84c      	bhi.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04d      	beq.n	8005cde <TIM_SlaveTimer_SetConfig+0x11a>
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d04b      	beq.n	8005cde <TIM_SlaveTimer_SetConfig+0x11a>
 8005c46:	e047      	b.n	8005cd8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c58:	f000 f9ce 	bl	8005ff8 <TIM_ETR_SetConfig>
      break;
 8005c5c:	e040      	b.n	8005ce0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d101      	bne.n	8005c6a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e03b      	b.n	8005ce2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
      break;
 8005cae:	e017      	b.n	8005ce0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f000 f86b 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      break;
 8005cc2:	e00d      	b.n	8005ce0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f000 f8cd 	bl	8005e70 <TIM_TI2_ConfigInputStage>
      break;
 8005cd6:	e003      	b.n	8005ce0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
      break;
 8005cdc:	e000      	b.n	8005ce0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005cde:	bf00      	nop
  }

  return status;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f023 0201 	bic.w	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <TIM_TI1_SetConfig+0xa4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <TIM_TI1_SetConfig+0x3e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d003      	beq.n	8005d2a <TIM_TI1_SetConfig+0x3e>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <TIM_TI1_SetConfig+0xa8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <TIM_TI1_SetConfig+0x42>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <TIM_TI1_SetConfig+0x44>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e003      	b.n	8005d4e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f023 030a 	bic.w	r3, r3, #10
 8005d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f003 030a 	and.w	r3, r3, #10
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40014000 	.word	0x40014000

08005d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	031b      	lsls	r3, r3, #12
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f023 0210 	bic.w	r2, r3, #16
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	031b      	lsls	r3, r3, #12
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	031b      	lsls	r3, r3, #12
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	031b      	lsls	r3, r3, #12
 8005fa0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	021a      	lsls	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2201      	movs	r2, #1
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006098:	2302      	movs	r3, #2
 800609a:	e04f      	b.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d009      	beq.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006104:	d004      	beq.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a10      	ldr	r2, [pc, #64]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10c      	bne.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40014000 	.word	0x40014000

08006150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e040      	b.n	8006220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fc0a 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2224      	movs	r2, #36	; 0x24
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f82c 	bl	8006228 <UART_SetConfig>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e022      	b.n	8006220 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f956 	bl	8006494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9dd 	bl	80065d8 <UART_CheckIdleState>
 800621e:	4603      	mov	r3, r0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b8a      	ldr	r3, [pc, #552]	; (800647c <UART_SetConfig+0x254>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	6979      	ldr	r1, [r7, #20]
 800625c:	430b      	orrs	r3, r1
 800625e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a78      	ldr	r2, [pc, #480]	; (8006480 <UART_SetConfig+0x258>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d120      	bne.n	80062e6 <UART_SetConfig+0xbe>
 80062a4:	4b77      	ldr	r3, [pc, #476]	; (8006484 <UART_SetConfig+0x25c>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d817      	bhi.n	80062e0 <UART_SetConfig+0xb8>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x90>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062d5 	.word	0x080062d5
 80062c0:	080062db 	.word	0x080062db
 80062c4:	080062cf 	.word	0x080062cf
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e01d      	b.n	800630a <UART_SetConfig+0xe2>
 80062ce:	2302      	movs	r3, #2
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e01a      	b.n	800630a <UART_SetConfig+0xe2>
 80062d4:	2304      	movs	r3, #4
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e017      	b.n	800630a <UART_SetConfig+0xe2>
 80062da:	2308      	movs	r3, #8
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e014      	b.n	800630a <UART_SetConfig+0xe2>
 80062e0:	2310      	movs	r3, #16
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e011      	b.n	800630a <UART_SetConfig+0xe2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a67      	ldr	r2, [pc, #412]	; (8006488 <UART_SetConfig+0x260>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d102      	bne.n	80062f6 <UART_SetConfig+0xce>
 80062f0:	2300      	movs	r3, #0
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e009      	b.n	800630a <UART_SetConfig+0xe2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a64      	ldr	r2, [pc, #400]	; (800648c <UART_SetConfig+0x264>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d102      	bne.n	8006306 <UART_SetConfig+0xde>
 8006300:	2300      	movs	r3, #0
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e001      	b.n	800630a <UART_SetConfig+0xe2>
 8006306:	2310      	movs	r3, #16
 8006308:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006312:	d15a      	bne.n	80063ca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006314:	7ffb      	ldrb	r3, [r7, #31]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d827      	bhi.n	800636a <UART_SetConfig+0x142>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0xf8>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006345 	.word	0x08006345
 8006324:	0800634d 	.word	0x0800634d
 8006328:	08006355 	.word	0x08006355
 800632c:	0800636b 	.word	0x0800636b
 8006330:	0800635b 	.word	0x0800635b
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800636b 	.word	0x0800636b
 800633c:	0800636b 	.word	0x0800636b
 8006340:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006344:	f7fe f8fa 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006348:	61b8      	str	r0, [r7, #24]
        break;
 800634a:	e013      	b.n	8006374 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7fe f918 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8006350:	61b8      	str	r0, [r7, #24]
        break;
 8006352:	e00f      	b.n	8006374 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b4e      	ldr	r3, [pc, #312]	; (8006490 <UART_SetConfig+0x268>)
 8006356:	61bb      	str	r3, [r7, #24]
        break;
 8006358:	e00c      	b.n	8006374 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fe f879 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800635e:	61b8      	str	r0, [r7, #24]
        break;
 8006360:	e008      	b.n	8006374 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	61bb      	str	r3, [r7, #24]
        break;
 8006368:	e004      	b.n	8006374 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	77bb      	strb	r3, [r7, #30]
        break;
 8006372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d074      	beq.n	8006464 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	005a      	lsls	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d916      	bls.n	80063c4 <UART_SetConfig+0x19c>
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d212      	bcs.n	80063c4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f023 030f 	bic.w	r3, r3, #15
 80063a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	89fb      	ldrh	r3, [r7, #14]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	89fa      	ldrh	r2, [r7, #14]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e04f      	b.n	8006464 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	77bb      	strb	r3, [r7, #30]
 80063c8:	e04c      	b.n	8006464 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d828      	bhi.n	8006422 <UART_SetConfig+0x1fa>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x1b0>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006405 	.word	0x08006405
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	08006423 	.word	0x08006423
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006423 	.word	0x08006423
 80063f0:	08006423 	.word	0x08006423
 80063f4:	08006423 	.word	0x08006423
 80063f8:	0800641b 	.word	0x0800641b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fe f89e 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006400:	61b8      	str	r0, [r7, #24]
        break;
 8006402:	e013      	b.n	800642c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fe f8bc 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8006408:	61b8      	str	r0, [r7, #24]
        break;
 800640a:	e00f      	b.n	800642c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800640c:	4b20      	ldr	r3, [pc, #128]	; (8006490 <UART_SetConfig+0x268>)
 800640e:	61bb      	str	r3, [r7, #24]
        break;
 8006410:	e00c      	b.n	800642c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006412:	f7fe f81d 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006416:	61b8      	str	r0, [r7, #24]
        break;
 8006418:	e008      	b.n	800642c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641e:	61bb      	str	r3, [r7, #24]
        break;
 8006420:	e004      	b.n	800642c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	77bb      	strb	r3, [r7, #30]
        break;
 800642a:	bf00      	nop
    }

    if (pclk != 0U)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	085a      	lsrs	r2, r3, #1
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d909      	bls.n	8006460 <UART_SetConfig+0x238>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006452:	d205      	bcs.n	8006460 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	b29a      	uxth	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e001      	b.n	8006464 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006470:	7fbb      	ldrb	r3, [r7, #30]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	efff69f3 	.word	0xefff69f3
 8006480:	40013800 	.word	0x40013800
 8006484:	40021000 	.word	0x40021000
 8006488:	40004400 	.word	0x40004400
 800648c:	40004800 	.word	0x40004800
 8006490:	007a1200 	.word	0x007a1200

08006494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01a      	beq.n	80065aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006592:	d10a      	bne.n	80065aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b098      	sub	sp, #96	; 0x60
 80065dc:	af02      	add	r7, sp, #8
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e8:	f7fb fb32 	bl	8001c50 <HAL_GetTick>
 80065ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d12e      	bne.n	800665a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f88c 	bl	8006728 <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d021      	beq.n	800665a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662a:	653b      	str	r3, [r7, #80]	; 0x50
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800663a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e6      	bne.n	8006616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e062      	b.n	8006720 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b04      	cmp	r3, #4
 8006666:	d149      	bne.n	80066fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006670:	2200      	movs	r2, #0
 8006672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f856 	bl	8006728 <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d03c      	beq.n	80066fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	623b      	str	r3, [r7, #32]
   return(result);
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
 80066a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d4:	61fa      	str	r2, [r7, #28]
 80066d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	617b      	str	r3, [r7, #20]
   return(result);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e011      	b.n	8006720 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3758      	adds	r7, #88	; 0x58
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006738:	e049      	b.n	80067ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006740:	d045      	beq.n	80067ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006742:	f7fb fa85 	bl	8001c50 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	429a      	cmp	r2, r3
 8006750:	d302      	bcc.n	8006758 <UART_WaitOnFlagUntilTimeout+0x30>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e048      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d031      	beq.n	80067ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b08      	cmp	r3, #8
 8006776:	d110      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2208      	movs	r2, #8
 800677e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f838 	bl	80067f6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2208      	movs	r2, #8
 800678a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e029      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a8:	d111      	bne.n	80067ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f81e 	bl	80067f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e00f      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4013      	ands	r3, r2
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	bf0c      	ite	eq
 80067de:	2301      	moveq	r3, #1
 80067e0:	2300      	movne	r3, #0
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d0a6      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b095      	sub	sp, #84	; 0x54
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e6      	bne.n	80067fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3308      	adds	r3, #8
 800684e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	2b01      	cmp	r3, #1
 800686a:	d118      	bne.n	800689e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	60bb      	str	r3, [r7, #8]
   return(result);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0310 	bic.w	r3, r3, #16
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068b2:	bf00      	nop
 80068b4:	3754      	adds	r7, #84	; 0x54
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <siprintf>:
 80068c0:	b40e      	push	{r1, r2, r3}
 80068c2:	b500      	push	{lr}
 80068c4:	b09c      	sub	sp, #112	; 0x70
 80068c6:	ab1d      	add	r3, sp, #116	; 0x74
 80068c8:	9002      	str	r0, [sp, #8]
 80068ca:	9006      	str	r0, [sp, #24]
 80068cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d0:	4809      	ldr	r0, [pc, #36]	; (80068f8 <siprintf+0x38>)
 80068d2:	9107      	str	r1, [sp, #28]
 80068d4:	9104      	str	r1, [sp, #16]
 80068d6:	4909      	ldr	r1, [pc, #36]	; (80068fc <siprintf+0x3c>)
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	6800      	ldr	r0, [r0, #0]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	a902      	add	r1, sp, #8
 80068e4:	f000 f89a 	bl	8006a1c <_svfiprintf_r>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	b01c      	add	sp, #112	; 0x70
 80068f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f4:	b003      	add	sp, #12
 80068f6:	4770      	bx	lr
 80068f8:	20000058 	.word	0x20000058
 80068fc:	ffff0208 	.word	0xffff0208

08006900 <memset>:
 8006900:	4402      	add	r2, r0
 8006902:	4603      	mov	r3, r0
 8006904:	4293      	cmp	r3, r2
 8006906:	d100      	bne.n	800690a <memset+0xa>
 8006908:	4770      	bx	lr
 800690a:	f803 1b01 	strb.w	r1, [r3], #1
 800690e:	e7f9      	b.n	8006904 <memset+0x4>

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000058 	.word	0x20000058

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4d0d      	ldr	r5, [pc, #52]	; (8006954 <__libc_init_array+0x38>)
 8006920:	4c0d      	ldr	r4, [pc, #52]	; (8006958 <__libc_init_array+0x3c>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	2600      	movs	r6, #0
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	4d0b      	ldr	r5, [pc, #44]	; (800695c <__libc_init_array+0x40>)
 800692e:	4c0c      	ldr	r4, [pc, #48]	; (8006960 <__libc_init_array+0x44>)
 8006930:	f000 fc6a 	bl	8007208 <_init>
 8006934:	1b64      	subs	r4, r4, r5
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	2600      	movs	r6, #0
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	080072f8 	.word	0x080072f8
 8006958:	080072f8 	.word	0x080072f8
 800695c:	080072f8 	.word	0x080072f8
 8006960:	080072fc 	.word	0x080072fc

08006964 <__retarget_lock_acquire_recursive>:
 8006964:	4770      	bx	lr

08006966 <__retarget_lock_release_recursive>:
 8006966:	4770      	bx	lr

08006968 <__ssputs_r>:
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	688e      	ldr	r6, [r1, #8]
 800696e:	461f      	mov	r7, r3
 8006970:	42be      	cmp	r6, r7
 8006972:	680b      	ldr	r3, [r1, #0]
 8006974:	4682      	mov	sl, r0
 8006976:	460c      	mov	r4, r1
 8006978:	4690      	mov	r8, r2
 800697a:	d82c      	bhi.n	80069d6 <__ssputs_r+0x6e>
 800697c:	898a      	ldrh	r2, [r1, #12]
 800697e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006982:	d026      	beq.n	80069d2 <__ssputs_r+0x6a>
 8006984:	6965      	ldr	r5, [r4, #20]
 8006986:	6909      	ldr	r1, [r1, #16]
 8006988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800698c:	eba3 0901 	sub.w	r9, r3, r1
 8006990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006994:	1c7b      	adds	r3, r7, #1
 8006996:	444b      	add	r3, r9
 8006998:	106d      	asrs	r5, r5, #1
 800699a:	429d      	cmp	r5, r3
 800699c:	bf38      	it	cc
 800699e:	461d      	movcc	r5, r3
 80069a0:	0553      	lsls	r3, r2, #21
 80069a2:	d527      	bpl.n	80069f4 <__ssputs_r+0x8c>
 80069a4:	4629      	mov	r1, r5
 80069a6:	f000 f957 	bl	8006c58 <_malloc_r>
 80069aa:	4606      	mov	r6, r0
 80069ac:	b360      	cbz	r0, 8006a08 <__ssputs_r+0xa0>
 80069ae:	6921      	ldr	r1, [r4, #16]
 80069b0:	464a      	mov	r2, r9
 80069b2:	f000 fbc7 	bl	8007144 <memcpy>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	6126      	str	r6, [r4, #16]
 80069c4:	6165      	str	r5, [r4, #20]
 80069c6:	444e      	add	r6, r9
 80069c8:	eba5 0509 	sub.w	r5, r5, r9
 80069cc:	6026      	str	r6, [r4, #0]
 80069ce:	60a5      	str	r5, [r4, #8]
 80069d0:	463e      	mov	r6, r7
 80069d2:	42be      	cmp	r6, r7
 80069d4:	d900      	bls.n	80069d8 <__ssputs_r+0x70>
 80069d6:	463e      	mov	r6, r7
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	4632      	mov	r2, r6
 80069dc:	4641      	mov	r1, r8
 80069de:	f000 fb86 	bl	80070ee <memmove>
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	1b9b      	subs	r3, r3, r6
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	4433      	add	r3, r6
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2000      	movs	r0, #0
 80069f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f4:	462a      	mov	r2, r5
 80069f6:	f000 fb4b 	bl	8007090 <_realloc_r>
 80069fa:	4606      	mov	r6, r0
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d1e0      	bne.n	80069c2 <__ssputs_r+0x5a>
 8006a00:	6921      	ldr	r1, [r4, #16]
 8006a02:	4650      	mov	r0, sl
 8006a04:	f000 fbac 	bl	8007160 <_free_r>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	f8ca 3000 	str.w	r3, [sl]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1a:	e7e9      	b.n	80069f0 <__ssputs_r+0x88>

08006a1c <_svfiprintf_r>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	4698      	mov	r8, r3
 8006a22:	898b      	ldrh	r3, [r1, #12]
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	b09d      	sub	sp, #116	; 0x74
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	d50e      	bpl.n	8006a4e <_svfiprintf_r+0x32>
 8006a30:	690b      	ldr	r3, [r1, #16]
 8006a32:	b963      	cbnz	r3, 8006a4e <_svfiprintf_r+0x32>
 8006a34:	2140      	movs	r1, #64	; 0x40
 8006a36:	f000 f90f 	bl	8006c58 <_malloc_r>
 8006a3a:	6028      	str	r0, [r5, #0]
 8006a3c:	6128      	str	r0, [r5, #16]
 8006a3e:	b920      	cbnz	r0, 8006a4a <_svfiprintf_r+0x2e>
 8006a40:	230c      	movs	r3, #12
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a48:	e0d0      	b.n	8006bec <_svfiprintf_r+0x1d0>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	616b      	str	r3, [r5, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9309      	str	r3, [sp, #36]	; 0x24
 8006a52:	2320      	movs	r3, #32
 8006a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a5c:	2330      	movs	r3, #48	; 0x30
 8006a5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c04 <_svfiprintf_r+0x1e8>
 8006a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a72:	b10a      	cbz	r2, 8006a78 <_svfiprintf_r+0x5c>
 8006a74:	2a25      	cmp	r2, #37	; 0x25
 8006a76:	d1f9      	bne.n	8006a6c <_svfiprintf_r+0x50>
 8006a78:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7c:	d00b      	beq.n	8006a96 <_svfiprintf_r+0x7a>
 8006a7e:	465b      	mov	r3, fp
 8006a80:	4622      	mov	r2, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ff6f 	bl	8006968 <__ssputs_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f000 80a9 	beq.w	8006be2 <_svfiprintf_r+0x1c6>
 8006a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a92:	445a      	add	r2, fp
 8006a94:	9209      	str	r2, [sp, #36]	; 0x24
 8006a96:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80a1 	beq.w	8006be2 <_svfiprintf_r+0x1c6>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aaa:	f10a 0a01 	add.w	sl, sl, #1
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab8:	4654      	mov	r4, sl
 8006aba:	2205      	movs	r2, #5
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	4850      	ldr	r0, [pc, #320]	; (8006c04 <_svfiprintf_r+0x1e8>)
 8006ac2:	f7f9 fb8d 	bl	80001e0 <memchr>
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	b9d8      	cbnz	r0, 8006b02 <_svfiprintf_r+0xe6>
 8006aca:	06d0      	lsls	r0, r2, #27
 8006acc:	bf44      	itt	mi
 8006ace:	2320      	movmi	r3, #32
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad4:	0711      	lsls	r1, r2, #28
 8006ad6:	bf44      	itt	mi
 8006ad8:	232b      	movmi	r3, #43	; 0x2b
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ade:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae4:	d015      	beq.n	8006b12 <_svfiprintf_r+0xf6>
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	4654      	mov	r4, sl
 8006aea:	2000      	movs	r0, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4621      	mov	r1, r4
 8006af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af6:	3b30      	subs	r3, #48	; 0x30
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d94d      	bls.n	8006b98 <_svfiprintf_r+0x17c>
 8006afc:	b1b0      	cbz	r0, 8006b2c <_svfiprintf_r+0x110>
 8006afe:	9207      	str	r2, [sp, #28]
 8006b00:	e014      	b.n	8006b2c <_svfiprintf_r+0x110>
 8006b02:	eba0 0308 	sub.w	r3, r0, r8
 8006b06:	fa09 f303 	lsl.w	r3, r9, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	46a2      	mov	sl, r4
 8006b10:	e7d2      	b.n	8006ab8 <_svfiprintf_r+0x9c>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	1d19      	adds	r1, r3, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	9103      	str	r1, [sp, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfbb      	ittet	lt
 8006b1e:	425b      	neglt	r3, r3
 8006b20:	f042 0202 	orrlt.w	r2, r2, #2
 8006b24:	9307      	strge	r3, [sp, #28]
 8006b26:	9307      	strlt	r3, [sp, #28]
 8006b28:	bfb8      	it	lt
 8006b2a:	9204      	strlt	r2, [sp, #16]
 8006b2c:	7823      	ldrb	r3, [r4, #0]
 8006b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b30:	d10c      	bne.n	8006b4c <_svfiprintf_r+0x130>
 8006b32:	7863      	ldrb	r3, [r4, #1]
 8006b34:	2b2a      	cmp	r3, #42	; 0x2a
 8006b36:	d134      	bne.n	8006ba2 <_svfiprintf_r+0x186>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9203      	str	r2, [sp, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bfb8      	it	lt
 8006b44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b48:	3402      	adds	r4, #2
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006c14 <_svfiprintf_r+0x1f8>
 8006b50:	7821      	ldrb	r1, [r4, #0]
 8006b52:	2203      	movs	r2, #3
 8006b54:	4650      	mov	r0, sl
 8006b56:	f7f9 fb43 	bl	80001e0 <memchr>
 8006b5a:	b138      	cbz	r0, 8006b6c <_svfiprintf_r+0x150>
 8006b5c:	9b04      	ldr	r3, [sp, #16]
 8006b5e:	eba0 000a 	sub.w	r0, r0, sl
 8006b62:	2240      	movs	r2, #64	; 0x40
 8006b64:	4082      	lsls	r2, r0
 8006b66:	4313      	orrs	r3, r2
 8006b68:	3401      	adds	r4, #1
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b70:	4825      	ldr	r0, [pc, #148]	; (8006c08 <_svfiprintf_r+0x1ec>)
 8006b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b76:	2206      	movs	r2, #6
 8006b78:	f7f9 fb32 	bl	80001e0 <memchr>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d038      	beq.n	8006bf2 <_svfiprintf_r+0x1d6>
 8006b80:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <_svfiprintf_r+0x1f0>)
 8006b82:	bb1b      	cbnz	r3, 8006bcc <_svfiprintf_r+0x1b0>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	3307      	adds	r3, #7
 8006b88:	f023 0307 	bic.w	r3, r3, #7
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	9303      	str	r3, [sp, #12]
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	4433      	add	r3, r6
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	e768      	b.n	8006a6a <_svfiprintf_r+0x4e>
 8006b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	e7a6      	b.n	8006af0 <_svfiprintf_r+0xd4>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	3401      	adds	r4, #1
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f04f 0c0a 	mov.w	ip, #10
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb4:	3a30      	subs	r2, #48	; 0x30
 8006bb6:	2a09      	cmp	r2, #9
 8006bb8:	d903      	bls.n	8006bc2 <_svfiprintf_r+0x1a6>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0c6      	beq.n	8006b4c <_svfiprintf_r+0x130>
 8006bbe:	9105      	str	r1, [sp, #20]
 8006bc0:	e7c4      	b.n	8006b4c <_svfiprintf_r+0x130>
 8006bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e7f0      	b.n	8006bae <_svfiprintf_r+0x192>
 8006bcc:	ab03      	add	r3, sp, #12
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <_svfiprintf_r+0x1f4>)
 8006bd4:	a904      	add	r1, sp, #16
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f3af 8000 	nop.w
 8006bdc:	1c42      	adds	r2, r0, #1
 8006bde:	4606      	mov	r6, r0
 8006be0:	d1d6      	bne.n	8006b90 <_svfiprintf_r+0x174>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	065b      	lsls	r3, r3, #25
 8006be6:	f53f af2d 	bmi.w	8006a44 <_svfiprintf_r+0x28>
 8006bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bec:	b01d      	add	sp, #116	; 0x74
 8006bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf2:	ab03      	add	r3, sp, #12
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <_svfiprintf_r+0x1f4>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f000 f919 	bl	8006e34 <_printf_i>
 8006c02:	e7eb      	b.n	8006bdc <_svfiprintf_r+0x1c0>
 8006c04:	080072c4 	.word	0x080072c4
 8006c08:	080072ce 	.word	0x080072ce
 8006c0c:	00000000 	.word	0x00000000
 8006c10:	08006969 	.word	0x08006969
 8006c14:	080072ca 	.word	0x080072ca

08006c18 <sbrk_aligned>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4e0e      	ldr	r6, [pc, #56]	; (8006c54 <sbrk_aligned+0x3c>)
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	6831      	ldr	r1, [r6, #0]
 8006c20:	4605      	mov	r5, r0
 8006c22:	b911      	cbnz	r1, 8006c2a <sbrk_aligned+0x12>
 8006c24:	f000 fa7e 	bl	8007124 <_sbrk_r>
 8006c28:	6030      	str	r0, [r6, #0]
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 fa79 	bl	8007124 <_sbrk_r>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d00a      	beq.n	8006c4c <sbrk_aligned+0x34>
 8006c36:	1cc4      	adds	r4, r0, #3
 8006c38:	f024 0403 	bic.w	r4, r4, #3
 8006c3c:	42a0      	cmp	r0, r4
 8006c3e:	d007      	beq.n	8006c50 <sbrk_aligned+0x38>
 8006c40:	1a21      	subs	r1, r4, r0
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fa6e 	bl	8007124 <_sbrk_r>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d101      	bne.n	8006c50 <sbrk_aligned+0x38>
 8006c4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	2000039c 	.word	0x2000039c

08006c58 <_malloc_r>:
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	1ccd      	adds	r5, r1, #3
 8006c5e:	f025 0503 	bic.w	r5, r5, #3
 8006c62:	3508      	adds	r5, #8
 8006c64:	2d0c      	cmp	r5, #12
 8006c66:	bf38      	it	cc
 8006c68:	250c      	movcc	r5, #12
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	db01      	blt.n	8006c74 <_malloc_r+0x1c>
 8006c70:	42a9      	cmp	r1, r5
 8006c72:	d905      	bls.n	8006c80 <_malloc_r+0x28>
 8006c74:	230c      	movs	r3, #12
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	2600      	movs	r6, #0
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d54 <_malloc_r+0xfc>
 8006c84:	f000 f9f8 	bl	8007078 <__malloc_lock>
 8006c88:	f8d8 3000 	ldr.w	r3, [r8]
 8006c8c:	461c      	mov	r4, r3
 8006c8e:	bb5c      	cbnz	r4, 8006ce8 <_malloc_r+0x90>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ffc0 	bl	8006c18 <sbrk_aligned>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	d155      	bne.n	8006d4a <_malloc_r+0xf2>
 8006c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8006ca2:	4626      	mov	r6, r4
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	d145      	bne.n	8006d34 <_malloc_r+0xdc>
 8006ca8:	2c00      	cmp	r4, #0
 8006caa:	d048      	beq.n	8006d3e <_malloc_r+0xe6>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	eb04 0903 	add.w	r9, r4, r3
 8006cb6:	f000 fa35 	bl	8007124 <_sbrk_r>
 8006cba:	4581      	cmp	r9, r0
 8006cbc:	d13f      	bne.n	8006d3e <_malloc_r+0xe6>
 8006cbe:	6821      	ldr	r1, [r4, #0]
 8006cc0:	1a6d      	subs	r5, r5, r1
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ffa7 	bl	8006c18 <sbrk_aligned>
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d037      	beq.n	8006d3e <_malloc_r+0xe6>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	442b      	add	r3, r5
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d038      	beq.n	8006d4e <_malloc_r+0xf6>
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	42a2      	cmp	r2, r4
 8006ce0:	d12b      	bne.n	8006d3a <_malloc_r+0xe2>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	e00f      	b.n	8006d08 <_malloc_r+0xb0>
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	1b52      	subs	r2, r2, r5
 8006cec:	d41f      	bmi.n	8006d2e <_malloc_r+0xd6>
 8006cee:	2a0b      	cmp	r2, #11
 8006cf0:	d917      	bls.n	8006d22 <_malloc_r+0xca>
 8006cf2:	1961      	adds	r1, r4, r5
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	6025      	str	r5, [r4, #0]
 8006cf8:	bf18      	it	ne
 8006cfa:	6059      	strne	r1, [r3, #4]
 8006cfc:	6863      	ldr	r3, [r4, #4]
 8006cfe:	bf08      	it	eq
 8006d00:	f8c8 1000 	streq.w	r1, [r8]
 8006d04:	5162      	str	r2, [r4, r5]
 8006d06:	604b      	str	r3, [r1, #4]
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f104 060b 	add.w	r6, r4, #11
 8006d0e:	f000 f9b9 	bl	8007084 <__malloc_unlock>
 8006d12:	f026 0607 	bic.w	r6, r6, #7
 8006d16:	1d23      	adds	r3, r4, #4
 8006d18:	1af2      	subs	r2, r6, r3
 8006d1a:	d0ae      	beq.n	8006c7a <_malloc_r+0x22>
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	50a3      	str	r3, [r4, r2]
 8006d20:	e7ab      	b.n	8006c7a <_malloc_r+0x22>
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	6862      	ldr	r2, [r4, #4]
 8006d26:	d1dd      	bne.n	8006ce4 <_malloc_r+0x8c>
 8006d28:	f8c8 2000 	str.w	r2, [r8]
 8006d2c:	e7ec      	b.n	8006d08 <_malloc_r+0xb0>
 8006d2e:	4623      	mov	r3, r4
 8006d30:	6864      	ldr	r4, [r4, #4]
 8006d32:	e7ac      	b.n	8006c8e <_malloc_r+0x36>
 8006d34:	4634      	mov	r4, r6
 8006d36:	6876      	ldr	r6, [r6, #4]
 8006d38:	e7b4      	b.n	8006ca4 <_malloc_r+0x4c>
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	e7cc      	b.n	8006cd8 <_malloc_r+0x80>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4638      	mov	r0, r7
 8006d44:	f000 f99e 	bl	8007084 <__malloc_unlock>
 8006d48:	e797      	b.n	8006c7a <_malloc_r+0x22>
 8006d4a:	6025      	str	r5, [r4, #0]
 8006d4c:	e7dc      	b.n	8006d08 <_malloc_r+0xb0>
 8006d4e:	605b      	str	r3, [r3, #4]
 8006d50:	deff      	udf	#255	; 0xff
 8006d52:	bf00      	nop
 8006d54:	20000398 	.word	0x20000398

08006d58 <_printf_common>:
 8006d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	4699      	mov	r9, r3
 8006d60:	688a      	ldr	r2, [r1, #8]
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	bfb8      	it	lt
 8006d6c:	4613      	movlt	r3, r2
 8006d6e:	6033      	str	r3, [r6, #0]
 8006d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d74:	4607      	mov	r7, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	b10a      	cbz	r2, 8006d7e <_printf_common+0x26>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	6033      	str	r3, [r6, #0]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	0699      	lsls	r1, r3, #26
 8006d82:	bf42      	ittt	mi
 8006d84:	6833      	ldrmi	r3, [r6, #0]
 8006d86:	3302      	addmi	r3, #2
 8006d88:	6033      	strmi	r3, [r6, #0]
 8006d8a:	6825      	ldr	r5, [r4, #0]
 8006d8c:	f015 0506 	ands.w	r5, r5, #6
 8006d90:	d106      	bne.n	8006da0 <_printf_common+0x48>
 8006d92:	f104 0a19 	add.w	sl, r4, #25
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	6832      	ldr	r2, [r6, #0]
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dc26      	bgt.n	8006dee <_printf_common+0x96>
 8006da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da4:	1e13      	subs	r3, r2, #0
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	bf18      	it	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	0692      	lsls	r2, r2, #26
 8006dae:	d42b      	bmi.n	8006e08 <_printf_common+0xb0>
 8006db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db4:	4649      	mov	r1, r9
 8006db6:	4638      	mov	r0, r7
 8006db8:	47c0      	blx	r8
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d01e      	beq.n	8006dfc <_printf_common+0xa4>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	f003 0306 	and.w	r3, r3, #6
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	bf02      	ittt	eq
 8006dca:	68e5      	ldreq	r5, [r4, #12]
 8006dcc:	6833      	ldreq	r3, [r6, #0]
 8006dce:	1aed      	subeq	r5, r5, r3
 8006dd0:	68a3      	ldr	r3, [r4, #8]
 8006dd2:	bf0c      	ite	eq
 8006dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd8:	2500      	movne	r5, #0
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	bfc4      	itt	gt
 8006dde:	1a9b      	subgt	r3, r3, r2
 8006de0:	18ed      	addgt	r5, r5, r3
 8006de2:	2600      	movs	r6, #0
 8006de4:	341a      	adds	r4, #26
 8006de6:	42b5      	cmp	r5, r6
 8006de8:	d11a      	bne.n	8006e20 <_printf_common+0xc8>
 8006dea:	2000      	movs	r0, #0
 8006dec:	e008      	b.n	8006e00 <_printf_common+0xa8>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4652      	mov	r2, sl
 8006df2:	4649      	mov	r1, r9
 8006df4:	4638      	mov	r0, r7
 8006df6:	47c0      	blx	r8
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d103      	bne.n	8006e04 <_printf_common+0xac>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e04:	3501      	adds	r5, #1
 8006e06:	e7c6      	b.n	8006d96 <_printf_common+0x3e>
 8006e08:	18e1      	adds	r1, r4, r3
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	2030      	movs	r0, #48	; 0x30
 8006e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e12:	4422      	add	r2, r4
 8006e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	e7c7      	b.n	8006db0 <_printf_common+0x58>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4622      	mov	r2, r4
 8006e24:	4649      	mov	r1, r9
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c0      	blx	r8
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d0e6      	beq.n	8006dfc <_printf_common+0xa4>
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7d9      	b.n	8006de6 <_printf_common+0x8e>
	...

08006e34 <_printf_i>:
 8006e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	7e0f      	ldrb	r7, [r1, #24]
 8006e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e3c:	2f78      	cmp	r7, #120	; 0x78
 8006e3e:	4691      	mov	r9, r2
 8006e40:	4680      	mov	r8, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	469a      	mov	sl, r3
 8006e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e4a:	d807      	bhi.n	8006e5c <_printf_i+0x28>
 8006e4c:	2f62      	cmp	r7, #98	; 0x62
 8006e4e:	d80a      	bhi.n	8006e66 <_printf_i+0x32>
 8006e50:	2f00      	cmp	r7, #0
 8006e52:	f000 80d4 	beq.w	8006ffe <_printf_i+0x1ca>
 8006e56:	2f58      	cmp	r7, #88	; 0x58
 8006e58:	f000 80c0 	beq.w	8006fdc <_printf_i+0x1a8>
 8006e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e64:	e03a      	b.n	8006edc <_printf_i+0xa8>
 8006e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e6a:	2b15      	cmp	r3, #21
 8006e6c:	d8f6      	bhi.n	8006e5c <_printf_i+0x28>
 8006e6e:	a101      	add	r1, pc, #4	; (adr r1, 8006e74 <_printf_i+0x40>)
 8006e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ee1 	.word	0x08006ee1
 8006e7c:	08006e5d 	.word	0x08006e5d
 8006e80:	08006e5d 	.word	0x08006e5d
 8006e84:	08006e5d 	.word	0x08006e5d
 8006e88:	08006e5d 	.word	0x08006e5d
 8006e8c:	08006ee1 	.word	0x08006ee1
 8006e90:	08006e5d 	.word	0x08006e5d
 8006e94:	08006e5d 	.word	0x08006e5d
 8006e98:	08006e5d 	.word	0x08006e5d
 8006e9c:	08006e5d 	.word	0x08006e5d
 8006ea0:	08006fe5 	.word	0x08006fe5
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006f9f 	.word	0x08006f9f
 8006eac:	08006e5d 	.word	0x08006e5d
 8006eb0:	08006e5d 	.word	0x08006e5d
 8006eb4:	08007007 	.word	0x08007007
 8006eb8:	08006e5d 	.word	0x08006e5d
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006e5d 	.word	0x08006e5d
 8006ec4:	08006e5d 	.word	0x08006e5d
 8006ec8:	08006fa7 	.word	0x08006fa7
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	1d1a      	adds	r2, r3, #4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	602a      	str	r2, [r5, #0]
 8006ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006edc:	2301      	movs	r3, #1
 8006ede:	e09f      	b.n	8007020 <_printf_i+0x1ec>
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	0607      	lsls	r7, r0, #24
 8006ee6:	f103 0104 	add.w	r1, r3, #4
 8006eea:	6029      	str	r1, [r5, #0]
 8006eec:	d501      	bpl.n	8006ef2 <_printf_i+0xbe>
 8006eee:	681e      	ldr	r6, [r3, #0]
 8006ef0:	e003      	b.n	8006efa <_printf_i+0xc6>
 8006ef2:	0646      	lsls	r6, r0, #25
 8006ef4:	d5fb      	bpl.n	8006eee <_printf_i+0xba>
 8006ef6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	da03      	bge.n	8006f06 <_printf_i+0xd2>
 8006efe:	232d      	movs	r3, #45	; 0x2d
 8006f00:	4276      	negs	r6, r6
 8006f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f06:	485a      	ldr	r0, [pc, #360]	; (8007070 <_printf_i+0x23c>)
 8006f08:	230a      	movs	r3, #10
 8006f0a:	e012      	b.n	8006f32 <_printf_i+0xfe>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	6029      	str	r1, [r5, #0]
 8006f14:	0605      	lsls	r5, r0, #24
 8006f16:	d501      	bpl.n	8006f1c <_printf_i+0xe8>
 8006f18:	681e      	ldr	r6, [r3, #0]
 8006f1a:	e002      	b.n	8006f22 <_printf_i+0xee>
 8006f1c:	0641      	lsls	r1, r0, #25
 8006f1e:	d5fb      	bpl.n	8006f18 <_printf_i+0xe4>
 8006f20:	881e      	ldrh	r6, [r3, #0]
 8006f22:	4853      	ldr	r0, [pc, #332]	; (8007070 <_printf_i+0x23c>)
 8006f24:	2f6f      	cmp	r7, #111	; 0x6f
 8006f26:	bf0c      	ite	eq
 8006f28:	2308      	moveq	r3, #8
 8006f2a:	230a      	movne	r3, #10
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f32:	6865      	ldr	r5, [r4, #4]
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	bfa2      	ittt	ge
 8006f3a:	6821      	ldrge	r1, [r4, #0]
 8006f3c:	f021 0104 	bicge.w	r1, r1, #4
 8006f40:	6021      	strge	r1, [r4, #0]
 8006f42:	b90e      	cbnz	r6, 8006f48 <_printf_i+0x114>
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d04b      	beq.n	8006fe0 <_printf_i+0x1ac>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f52:	5dc7      	ldrb	r7, [r0, r7]
 8006f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f58:	4637      	mov	r7, r6
 8006f5a:	42bb      	cmp	r3, r7
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	d9f4      	bls.n	8006f4a <_printf_i+0x116>
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10b      	bne.n	8006f7c <_printf_i+0x148>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07de      	lsls	r6, r3, #31
 8006f68:	d508      	bpl.n	8006f7c <_printf_i+0x148>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	6861      	ldr	r1, [r4, #4]
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	bfde      	ittt	le
 8006f72:	2330      	movle	r3, #48	; 0x30
 8006f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f7c:	1b52      	subs	r2, r2, r5
 8006f7e:	6122      	str	r2, [r4, #16]
 8006f80:	f8cd a000 	str.w	sl, [sp]
 8006f84:	464b      	mov	r3, r9
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f7ff fee4 	bl	8006d58 <_printf_common>
 8006f90:	3001      	adds	r0, #1
 8006f92:	d14a      	bne.n	800702a <_printf_i+0x1f6>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f98:	b004      	add	sp, #16
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	f043 0320 	orr.w	r3, r3, #32
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	4833      	ldr	r0, [pc, #204]	; (8007074 <_printf_i+0x240>)
 8006fa8:	2778      	movs	r7, #120	; 0x78
 8006faa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	6829      	ldr	r1, [r5, #0]
 8006fb2:	061f      	lsls	r7, r3, #24
 8006fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fb8:	d402      	bmi.n	8006fc0 <_printf_i+0x18c>
 8006fba:	065f      	lsls	r7, r3, #25
 8006fbc:	bf48      	it	mi
 8006fbe:	b2b6      	uxthmi	r6, r6
 8006fc0:	07df      	lsls	r7, r3, #31
 8006fc2:	bf48      	it	mi
 8006fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006fc8:	6029      	str	r1, [r5, #0]
 8006fca:	bf48      	it	mi
 8006fcc:	6023      	strmi	r3, [r4, #0]
 8006fce:	b91e      	cbnz	r6, 8006fd8 <_printf_i+0x1a4>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	f023 0320 	bic.w	r3, r3, #32
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	2310      	movs	r3, #16
 8006fda:	e7a7      	b.n	8006f2c <_printf_i+0xf8>
 8006fdc:	4824      	ldr	r0, [pc, #144]	; (8007070 <_printf_i+0x23c>)
 8006fde:	e7e4      	b.n	8006faa <_printf_i+0x176>
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	e7bd      	b.n	8006f60 <_printf_i+0x12c>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	6826      	ldr	r6, [r4, #0]
 8006fe8:	6961      	ldr	r1, [r4, #20]
 8006fea:	1d18      	adds	r0, r3, #4
 8006fec:	6028      	str	r0, [r5, #0]
 8006fee:	0635      	lsls	r5, r6, #24
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	d501      	bpl.n	8006ff8 <_printf_i+0x1c4>
 8006ff4:	6019      	str	r1, [r3, #0]
 8006ff6:	e002      	b.n	8006ffe <_printf_i+0x1ca>
 8006ff8:	0670      	lsls	r0, r6, #25
 8006ffa:	d5fb      	bpl.n	8006ff4 <_printf_i+0x1c0>
 8006ffc:	8019      	strh	r1, [r3, #0]
 8006ffe:	2300      	movs	r3, #0
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	4615      	mov	r5, r2
 8007004:	e7bc      	b.n	8006f80 <_printf_i+0x14c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	1d1a      	adds	r2, r3, #4
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	2100      	movs	r1, #0
 8007012:	4628      	mov	r0, r5
 8007014:	f7f9 f8e4 	bl	80001e0 <memchr>
 8007018:	b108      	cbz	r0, 800701e <_printf_i+0x1ea>
 800701a:	1b40      	subs	r0, r0, r5
 800701c:	6060      	str	r0, [r4, #4]
 800701e:	6863      	ldr	r3, [r4, #4]
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	2300      	movs	r3, #0
 8007024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007028:	e7aa      	b.n	8006f80 <_printf_i+0x14c>
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	462a      	mov	r2, r5
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d0ad      	beq.n	8006f94 <_printf_i+0x160>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	079b      	lsls	r3, r3, #30
 800703c:	d413      	bmi.n	8007066 <_printf_i+0x232>
 800703e:	68e0      	ldr	r0, [r4, #12]
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	4298      	cmp	r0, r3
 8007044:	bfb8      	it	lt
 8007046:	4618      	movlt	r0, r3
 8007048:	e7a6      	b.n	8006f98 <_printf_i+0x164>
 800704a:	2301      	movs	r3, #1
 800704c:	4632      	mov	r2, r6
 800704e:	4649      	mov	r1, r9
 8007050:	4640      	mov	r0, r8
 8007052:	47d0      	blx	sl
 8007054:	3001      	adds	r0, #1
 8007056:	d09d      	beq.n	8006f94 <_printf_i+0x160>
 8007058:	3501      	adds	r5, #1
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	9903      	ldr	r1, [sp, #12]
 800705e:	1a5b      	subs	r3, r3, r1
 8007060:	42ab      	cmp	r3, r5
 8007062:	dcf2      	bgt.n	800704a <_printf_i+0x216>
 8007064:	e7eb      	b.n	800703e <_printf_i+0x20a>
 8007066:	2500      	movs	r5, #0
 8007068:	f104 0619 	add.w	r6, r4, #25
 800706c:	e7f5      	b.n	800705a <_printf_i+0x226>
 800706e:	bf00      	nop
 8007070:	080072d5 	.word	0x080072d5
 8007074:	080072e6 	.word	0x080072e6

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_lock+0x8>)
 800707a:	f7ff bc73 	b.w	8006964 <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000394 	.word	0x20000394

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_unlock+0x8>)
 8007086:	f7ff bc6e 	b.w	8006966 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000394 	.word	0x20000394

08007090 <_realloc_r>:
 8007090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007094:	4680      	mov	r8, r0
 8007096:	4614      	mov	r4, r2
 8007098:	460e      	mov	r6, r1
 800709a:	b921      	cbnz	r1, 80070a6 <_realloc_r+0x16>
 800709c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a0:	4611      	mov	r1, r2
 80070a2:	f7ff bdd9 	b.w	8006c58 <_malloc_r>
 80070a6:	b92a      	cbnz	r2, 80070b4 <_realloc_r+0x24>
 80070a8:	f000 f85a 	bl	8007160 <_free_r>
 80070ac:	4625      	mov	r5, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b4:	f000 f8a0 	bl	80071f8 <_malloc_usable_size_r>
 80070b8:	4284      	cmp	r4, r0
 80070ba:	4607      	mov	r7, r0
 80070bc:	d802      	bhi.n	80070c4 <_realloc_r+0x34>
 80070be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070c2:	d812      	bhi.n	80070ea <_realloc_r+0x5a>
 80070c4:	4621      	mov	r1, r4
 80070c6:	4640      	mov	r0, r8
 80070c8:	f7ff fdc6 	bl	8006c58 <_malloc_r>
 80070cc:	4605      	mov	r5, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0ed      	beq.n	80070ae <_realloc_r+0x1e>
 80070d2:	42bc      	cmp	r4, r7
 80070d4:	4622      	mov	r2, r4
 80070d6:	4631      	mov	r1, r6
 80070d8:	bf28      	it	cs
 80070da:	463a      	movcs	r2, r7
 80070dc:	f000 f832 	bl	8007144 <memcpy>
 80070e0:	4631      	mov	r1, r6
 80070e2:	4640      	mov	r0, r8
 80070e4:	f000 f83c 	bl	8007160 <_free_r>
 80070e8:	e7e1      	b.n	80070ae <_realloc_r+0x1e>
 80070ea:	4635      	mov	r5, r6
 80070ec:	e7df      	b.n	80070ae <_realloc_r+0x1e>

080070ee <memmove>:
 80070ee:	4288      	cmp	r0, r1
 80070f0:	b510      	push	{r4, lr}
 80070f2:	eb01 0402 	add.w	r4, r1, r2
 80070f6:	d902      	bls.n	80070fe <memmove+0x10>
 80070f8:	4284      	cmp	r4, r0
 80070fa:	4623      	mov	r3, r4
 80070fc:	d807      	bhi.n	800710e <memmove+0x20>
 80070fe:	1e43      	subs	r3, r0, #1
 8007100:	42a1      	cmp	r1, r4
 8007102:	d008      	beq.n	8007116 <memmove+0x28>
 8007104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007108:	f803 2f01 	strb.w	r2, [r3, #1]!
 800710c:	e7f8      	b.n	8007100 <memmove+0x12>
 800710e:	4402      	add	r2, r0
 8007110:	4601      	mov	r1, r0
 8007112:	428a      	cmp	r2, r1
 8007114:	d100      	bne.n	8007118 <memmove+0x2a>
 8007116:	bd10      	pop	{r4, pc}
 8007118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007120:	e7f7      	b.n	8007112 <memmove+0x24>
	...

08007124 <_sbrk_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d06      	ldr	r5, [pc, #24]	; (8007140 <_sbrk_r+0x1c>)
 8007128:	2300      	movs	r3, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	f7fa fcc2 	bl	8001ab8 <_sbrk>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_sbrk_r+0x1a>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_sbrk_r+0x1a>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	200003a0 	.word	0x200003a0

08007144 <memcpy>:
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800714c:	d100      	bne.n	8007150 <memcpy+0xc>
 800714e:	4770      	bx	lr
 8007150:	b510      	push	{r4, lr}
 8007152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715a:	4291      	cmp	r1, r2
 800715c:	d1f9      	bne.n	8007152 <memcpy+0xe>
 800715e:	bd10      	pop	{r4, pc}

08007160 <_free_r>:
 8007160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007162:	2900      	cmp	r1, #0
 8007164:	d044      	beq.n	80071f0 <_free_r+0x90>
 8007166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716a:	9001      	str	r0, [sp, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f1a1 0404 	sub.w	r4, r1, #4
 8007172:	bfb8      	it	lt
 8007174:	18e4      	addlt	r4, r4, r3
 8007176:	f7ff ff7f 	bl	8007078 <__malloc_lock>
 800717a:	4a1e      	ldr	r2, [pc, #120]	; (80071f4 <_free_r+0x94>)
 800717c:	9801      	ldr	r0, [sp, #4]
 800717e:	6813      	ldr	r3, [r2, #0]
 8007180:	b933      	cbnz	r3, 8007190 <_free_r+0x30>
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	6014      	str	r4, [r2, #0]
 8007186:	b003      	add	sp, #12
 8007188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800718c:	f7ff bf7a 	b.w	8007084 <__malloc_unlock>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d908      	bls.n	80071a6 <_free_r+0x46>
 8007194:	6825      	ldr	r5, [r4, #0]
 8007196:	1961      	adds	r1, r4, r5
 8007198:	428b      	cmp	r3, r1
 800719a:	bf01      	itttt	eq
 800719c:	6819      	ldreq	r1, [r3, #0]
 800719e:	685b      	ldreq	r3, [r3, #4]
 80071a0:	1949      	addeq	r1, r1, r5
 80071a2:	6021      	streq	r1, [r4, #0]
 80071a4:	e7ed      	b.n	8007182 <_free_r+0x22>
 80071a6:	461a      	mov	r2, r3
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	b10b      	cbz	r3, 80071b0 <_free_r+0x50>
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d9fa      	bls.n	80071a6 <_free_r+0x46>
 80071b0:	6811      	ldr	r1, [r2, #0]
 80071b2:	1855      	adds	r5, r2, r1
 80071b4:	42a5      	cmp	r5, r4
 80071b6:	d10b      	bne.n	80071d0 <_free_r+0x70>
 80071b8:	6824      	ldr	r4, [r4, #0]
 80071ba:	4421      	add	r1, r4
 80071bc:	1854      	adds	r4, r2, r1
 80071be:	42a3      	cmp	r3, r4
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	d1e0      	bne.n	8007186 <_free_r+0x26>
 80071c4:	681c      	ldr	r4, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	6053      	str	r3, [r2, #4]
 80071ca:	440c      	add	r4, r1
 80071cc:	6014      	str	r4, [r2, #0]
 80071ce:	e7da      	b.n	8007186 <_free_r+0x26>
 80071d0:	d902      	bls.n	80071d8 <_free_r+0x78>
 80071d2:	230c      	movs	r3, #12
 80071d4:	6003      	str	r3, [r0, #0]
 80071d6:	e7d6      	b.n	8007186 <_free_r+0x26>
 80071d8:	6825      	ldr	r5, [r4, #0]
 80071da:	1961      	adds	r1, r4, r5
 80071dc:	428b      	cmp	r3, r1
 80071de:	bf04      	itt	eq
 80071e0:	6819      	ldreq	r1, [r3, #0]
 80071e2:	685b      	ldreq	r3, [r3, #4]
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	bf04      	itt	eq
 80071e8:	1949      	addeq	r1, r1, r5
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	6054      	str	r4, [r2, #4]
 80071ee:	e7ca      	b.n	8007186 <_free_r+0x26>
 80071f0:	b003      	add	sp, #12
 80071f2:	bd30      	pop	{r4, r5, pc}
 80071f4:	20000398 	.word	0x20000398

080071f8 <_malloc_usable_size_r>:
 80071f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fc:	1f18      	subs	r0, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfbc      	itt	lt
 8007202:	580b      	ldrlt	r3, [r1, r0]
 8007204:	18c0      	addlt	r0, r0, r3
 8007206:	4770      	bx	lr

08007208 <_init>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr

08007214 <_fini>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr
