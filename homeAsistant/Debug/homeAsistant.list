
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072d0  080072d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080072d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000005c  08007334  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08007334  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f4f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c9  00000000  00000000  0003301e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  00036590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf25  00000000  00000000  000372bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015994  00000000  00000000  000541e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad7f3  00000000  00000000  00069b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d2c  00000000  00000000  0011736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071ec 	.word	0x080071ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080071ec 	.word	0x080071ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000a6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a76:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000a7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a7e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f80e 	bl	8000ab2 <Lcd_init>

	return lcd;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	461d      	mov	r5, r3
 8000a9a:	f107 0410 	add.w	r4, r7, #16
 8000a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aa6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}

08000ab2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7d9b      	ldrb	r3, [r3, #22]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000ac2:	2133      	movs	r1, #51	; 0x33
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f87b 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000aca:	2132      	movs	r1, #50	; 0x32
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f877 	bl	8000bc0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000ad2:	2128      	movs	r1, #40	; 0x28
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f873 	bl	8000bc0 <lcd_write_command>
 8000ada:	e003      	b.n	8000ae4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000adc:	2138      	movs	r1, #56	; 0x38
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f86e 	bl	8000bc0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f86a 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000aec:	210c      	movs	r1, #12
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f866 	bl	8000bc0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000af4:	2106      	movs	r1, #6
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f862 	bl	8000bc0 <lcd_write_command>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <Lcd_int+0x2c>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fec4 	bl	80068a4 <siprintf>

	Lcd_string(lcd, buffer);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f806 	bl	8000b34 <Lcd_string>
}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08007204 	.word	0x08007204

08000b34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e00a      	b.n	8000b5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f864 	bl	8000c1c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	7bfc      	ldrb	r4, [r7, #15]
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d3ed      	bcc.n	8000b44 <Lcd_string+0x10>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
	...

08000b74 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
 8000b80:	4613      	mov	r3, r2
 8000b82:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <Lcd_cursor+0x30>)
 8000b88:	5cd2      	ldrb	r2, [r2, r3]
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3b80      	subs	r3, #128	; 0x80
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f812 	bl	8000bc0 <lcd_write_command>
	#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08007260 	.word	0x08007260

08000ba8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f804 	bl	8000bc0 <lcd_write_command>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6898      	ldr	r0, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	899b      	ldrh	r3, [r3, #12]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f002 f934 	bl	8002e44 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7d9b      	ldrb	r3, [r3, #22]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f842 	bl	8000c78 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f839 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000c06:	e005      	b.n	8000c14 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f832 	bl	8000c78 <lcd_write>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4619      	mov	r1, r3
 8000c34:	f002 f906 	bl	8002e44 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d9b      	ldrb	r3, [r3, #22]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d111      	bne.n	8000c64 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2204      	movs	r2, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f814 	bl	8000c78 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f80b 	bl	8000c78 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000c62:	e005      	b.n	8000c70 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2208      	movs	r2, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f804 	bl	8000c78 <lcd_write>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	4613      	mov	r3, r2
 8000c86:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e019      	b.n	8000cc2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	8819      	ldrh	r1, [r3, #0]
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	fa42 f303 	asr.w	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f002 f8c4 	bl	8002e44 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3e1      	bcc.n	8000c8e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6918      	ldr	r0, [r3, #16]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	8a9b      	ldrh	r3, [r3, #20]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f002 f8b5 	bl	8002e44 <HAL_GPIO_WritePin>
	DELAY(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 ffb6 	bl	8001c4c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6918      	ldr	r0, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8a9b      	ldrh	r3, [r3, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	f002 f8aa 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 ff3f 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f9f7 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fc2b 	bl	8001560 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d0a:	f000 faf1 	bl	80012f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d0e:	f000 fab1 	bl	8001274 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d12:	f000 fa53 	bl	80011bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 fbf3 	bl	8001500 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb7b 	bl	8001414 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000d1e:	48c8      	ldr	r0, [pc, #800]	; (8001040 <main+0x348>)
 8000d20:	f003 fe2c 	bl	800497c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	48c6      	ldr	r0, [pc, #792]	; (8001044 <main+0x34c>)
 8000d2c:	f002 f88a 	bl	8002e44 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d30:	2108      	movs	r1, #8
 8000d32:	48c5      	ldr	r0, [pc, #788]	; (8001048 <main+0x350>)
 8000d34:	f003 fed0 	bl	8004ad8 <HAL_TIM_PWM_Start>

  //HAL_ADC_Start (&hadc1);

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 8000d38:	4bc4      	ldr	r3, [pc, #784]	; (800104c <main+0x354>)
 8000d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 8000d44:	4ac2      	ldr	r2, [pc, #776]	; (8001050 <main+0x358>)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d4e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000d52:	4638      	mov	r0, r7
 8000d54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	2310      	movs	r3, #16
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	4bb7      	ldr	r3, [pc, #732]	; (8001044 <main+0x34c>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2320      	movs	r3, #32
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4bb5      	ldr	r3, [pc, #724]	; (8001044 <main+0x34c>)
 8000d6e:	f7ff fe75 	bl	8000a5c <Lcd_create>
 8000d72:	f107 0418 	add.w	r4, r7, #24
 8000d76:	463d      	mov	r5, r7
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d80:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd,0,4);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2204      	movs	r2, #4
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fef1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"Ali ACAN");
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	49af      	ldr	r1, [pc, #700]	; (8001054 <main+0x35c>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fecb 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fee4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd," Mikro Islemci");
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	49a9      	ldr	r1, [pc, #676]	; (8001058 <main+0x360>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff febe 	bl	8000b34 <Lcd_string>
  HAL_Delay(1800);
 8000db8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000dbc:	f000 ff46 	bl	8001c4c <HAL_Delay>
  Lcd_clear(&lcd);
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff feef 	bl	8000ba8 <Lcd_clear>
  Lcd_cursor(&lcd,0,9);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2209      	movs	r2, #9
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fece 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"PIR :");
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	499f      	ldr	r1, [pc, #636]	; (800105c <main+0x364>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fea8 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fec1 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"LIGHT:");
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	499a      	ldr	r1, [pc, #616]	; (8001060 <main+0x368>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe9b 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,0,0);
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff feb4 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"D:");
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4994      	ldr	r1, [pc, #592]	; (8001064 <main+0x36c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fe8e 	bl	8000b34 <Lcd_string>
  Lcd_cursor(&lcd,0,5);
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fea7 	bl	8000b74 <Lcd_cursor>
  Lcd_string(&lcd,"cm");
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	498f      	ldr	r1, [pc, #572]	; (8001068 <main+0x370>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe81 	bl	8000b34 <Lcd_string>

 // HAL_ADC_Start_DMA(&hadc1,adc_values, 2);
  HAL_ADC_Start(&hadc1);
 8000e32:	488e      	ldr	r0, [pc, #568]	; (800106c <main+0x374>)
 8000e34:	f001 f8b4 	bl	8001fa0 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_PollForConversion (&hadc1,1000);
 8000e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3c:	488b      	ldr	r0, [pc, #556]	; (800106c <main+0x374>)
 8000e3e:	f001 f91d 	bl	800207c <HAL_ADC_PollForConversion>
	  	lightValue = HAL_ADC_GetValue (&hadc1);
 8000e42:	488a      	ldr	r0, [pc, #552]	; (800106c <main+0x374>)
 8000e44:	f001 f9d8 	bl	80021f8 <HAL_ADC_GetValue>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a89      	ldr	r2, [pc, #548]	; (8001070 <main+0x378>)
 8000e4c:	6013      	str	r3, [r2, #0]
	  	Lcd_cursor(&lcd,1,7);
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2207      	movs	r2, #7
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe8c 	bl	8000b74 <Lcd_cursor>
	  	Lcd_int(&lcd,lightValue);
 8000e5c:	4b84      	ldr	r3, [pc, #528]	; (8001070 <main+0x378>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe4b 	bl	8000b04 <Lcd_int>

	  	if (lightValue>2700)
 8000e6e:	4b80      	ldr	r3, [pc, #512]	; (8001070 <main+0x378>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d907      	bls.n	8000e8a <main+0x192>
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f001 ffde 	bl	8002e44 <HAL_GPIO_WritePin>
 8000e88:	e006      	b.n	8000e98 <main+0x1a0>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f001 ffd6 	bl	8002e44 <HAL_GPIO_WritePin>
	  	}


	  	Lcd_cursor(&lcd,0,13);
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	220d      	movs	r2, #13
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe67 	bl	8000b74 <Lcd_cursor>
	  	Lcd_string(&lcd,"OFF");
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4972      	ldr	r1, [pc, #456]	; (8001074 <main+0x37c>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe41 	bl	8000b34 <Lcd_string>
	  	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4863      	ldr	r0, [pc, #396]	; (8001044 <main+0x34c>)
 8000eb8:	f001 ffc4 	bl	8002e44 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	486d      	ldr	r0, [pc, #436]	; (8001078 <main+0x380>)
 8000ec2:	f001 ffbf 	bl	8002e44 <HAL_GPIO_WritePin>
	  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) // if the pin is HIGH
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 ffa2 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01a      	beq.n	8000f0c <main+0x214>
	  	  {
	  		 Lcd_cursor(&lcd,0,13);
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	220d      	movs	r2, #13
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe48 	bl	8000b74 <Lcd_cursor>
	  		 Lcd_string(&lcd," ON");
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4964      	ldr	r1, [pc, #400]	; (800107c <main+0x384>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe22 	bl	8000b34 <Lcd_string>
	  		 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4860      	ldr	r0, [pc, #384]	; (8001078 <main+0x380>)
 8000ef6:	f001 ffa5 	bl	8002e44 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2101      	movs	r1, #1
 8000efe:	4851      	ldr	r0, [pc, #324]	; (8001044 <main+0x34c>)
 8000f00:	f001 ffa0 	bl	8002e44 <HAL_GPIO_WritePin>
	  		 HAL_Delay(500);
 8000f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f08:	f000 fea0 	bl	8001c4c <HAL_Delay>
	  	  }

	  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	484c      	ldr	r0, [pc, #304]	; (8001044 <main+0x34c>)
 8000f14:	f001 ff96 	bl	8002e44 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <main+0x348>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
	  	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000f20:	bf00      	nop
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <main+0x348>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	d9fa      	bls.n	8000f22 <main+0x22a>
	     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <main+0x34c>)
 8000f34:	f001 ff86 	bl	8002e44 <HAL_GPIO_WritePin>

	     pMillis = HAL_GetTick();
 8000f38:	f000 fe7c 	bl	8001c34 <HAL_GetTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a50      	ldr	r2, [pc, #320]	; (8001080 <main+0x388>)
 8000f40:	6013      	str	r3, [r2, #0]
	  	 while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000f42:	bf00      	nop
 8000f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f48:	483e      	ldr	r0, [pc, #248]	; (8001044 <main+0x34c>)
 8000f4a:	f001 ff63 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d108      	bne.n	8000f66 <main+0x26e>
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <main+0x388>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f103 040a 	add.w	r4, r3, #10
 8000f5c:	f000 fe6a 	bl	8001c34 <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	429c      	cmp	r4, r3
 8000f64:	d8ee      	bhi.n	8000f44 <main+0x24c>
	     val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <main+0x348>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <main+0x38c>)
 8000f6e:	6013      	str	r3, [r2, #0]

	     pMillis = HAL_GetTick();
 8000f70:	f000 fe60 	bl	8001c34 <HAL_GetTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a42      	ldr	r2, [pc, #264]	; (8001080 <main+0x388>)
 8000f78:	6013      	str	r3, [r2, #0]
	  	 while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000f7a:	bf00      	nop
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	4830      	ldr	r0, [pc, #192]	; (8001044 <main+0x34c>)
 8000f82:	f001 ff47 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <main+0x2a6>
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <main+0x388>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f94:	f000 fe4e 	bl	8001c34 <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	d8ee      	bhi.n	8000f7c <main+0x284>
	     val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <main+0x348>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	4a38      	ldr	r2, [pc, #224]	; (8001088 <main+0x390>)
 8000fa6:	6013      	str	r3, [r2, #0]

	    Lcd_cursor(&lcd,0,2);
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	2202      	movs	r2, #2
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fddf 	bl	8000b74 <Lcd_cursor>
	    Lcd_string(&lcd,"   ");
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4934      	ldr	r1, [pc, #208]	; (800108c <main+0x394>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fdb9 	bl	8000b34 <Lcd_string>
	  	distance = (val2-val1) * 0.034/2;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <main+0x390>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <main+0x38c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa99 	bl	8000504 <__aeabi_ui2d>
 8000fd2:	a319      	add	r3, pc, #100	; (adr r3, 8001038 <main+0x340>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fb0e 	bl	80005f8 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fec:	f7ff fc2e 	bl	800084c <__aeabi_ddiv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fd10 	bl	8000a1c <__aeabi_d2uiz>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <main+0x398>)
 8001000:	6013      	str	r3, [r2, #0]
	   	Lcd_cursor(&lcd,0,2);
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	2202      	movs	r2, #2
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fdb2 	bl	8000b74 <Lcd_cursor>
	   	Lcd_int(&lcd,distance);
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <main+0x398>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd71 	bl	8000b04 <Lcd_int>

	   	if (distance <= 5)
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <main+0x398>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d857      	bhi.n	80010da <main+0x3e2>
	   	    {
	   	        for (x = 50; x < 100; x += 5)
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <main+0x39c>)
 800102c:	2232      	movs	r2, #50	; 0x32
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e04e      	b.n	80010d0 <main+0x3d8>
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	b020c49c 	.word	0xb020c49c
 800103c:	3fa16872 	.word	0x3fa16872
 8001040:	2000011c 	.word	0x2000011c
 8001044:	48000400 	.word	0x48000400
 8001048:	20000168 	.word	0x20000168
 800104c:	08007248 	.word	0x08007248
 8001050:	08007258 	.word	0x08007258
 8001054:	08007208 	.word	0x08007208
 8001058:	08007214 	.word	0x08007214
 800105c:	08007224 	.word	0x08007224
 8001060:	0800722c 	.word	0x0800722c
 8001064:	08007234 	.word	0x08007234
 8001068:	08007238 	.word	0x08007238
 800106c:	20000078 	.word	0x20000078
 8001070:	2000023c 	.word	0x2000023c
 8001074:	0800723c 	.word	0x0800723c
 8001078:	48000800 	.word	0x48000800
 800107c:	08007240 	.word	0x08007240
 8001080:	20000240 	.word	0x20000240
 8001084:	20000244 	.word	0x20000244
 8001088:	20000248 	.word	0x20000248
 800108c:	08007244 	.word	0x08007244
 8001090:	2000024c 	.word	0x2000024c
 8001094:	20000250 	.word	0x20000250
	   	        {
	   	            __HAL_TIM_SET_AUTORELOAD(&htim2, x * 3);
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <main+0x3f4>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <main+0x3f8>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <main+0x3f4>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <main+0x3f8>)
 80010b4:	60d3      	str	r3, [r2, #12]
	   	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, x);
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <main+0x3f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <main+0x3f4>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
	   	            HAL_Delay(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f000 fdc3 	bl	8001c4c <HAL_Delay>
	   	        for (x = 50; x < 100; x += 5)
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <main+0x3f4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3305      	adds	r3, #5
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <main+0x3f4>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <main+0x3f4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b63      	cmp	r3, #99	; 0x63
 80010d6:	d9df      	bls.n	8001098 <main+0x3a0>
 80010d8:	e003      	b.n	80010e2 <main+0x3ea>
	   	        }
	   	    }
	   	    else
	   	    {
	   	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <main+0x3f8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c
	   	    }


	   	HAL_Delay(150);
 80010e2:	2096      	movs	r0, #150	; 0x96
 80010e4:	f000 fdb2 	bl	8001c4c <HAL_Delay>
	    HAL_ADC_PollForConversion (&hadc1,1000);
 80010e8:	e6a6      	b.n	8000e38 <main+0x140>
 80010ea:	bf00      	nop
 80010ec:	20000250 	.word	0x20000250
 80010f0:	20000168 	.word	0x20000168

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09c      	sub	sp, #112	; 0x70
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fbee 	bl	80068e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2234      	movs	r2, #52	; 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fbe0 	bl	80068e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001124:	2303      	movs	r3, #3
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001132:	2301      	movs	r3, #1
 8001134:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001136:	2310      	movs	r3, #16
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001144:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001148:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ffb6 	bl	80030c0 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800115a:	f000 facb 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 ffde 	bl	800413c <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001186:	f000 fab5 	bl	80016f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800118a:	f241 03a1 	movw	r3, #4257	; 0x10a1
 800118e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f9ff 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b0:	f000 faa0 	bl	80016f4 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3770      	adds	r7, #112	; 0x70
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC1_Init+0xb4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC1_Init+0xb4>)
 8001202:	2201      	movs	r2, #1
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_ADC1_Init+0xb4>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_ADC1_Init+0xb4>)
 800120e:	2201      	movs	r2, #1
 8001210:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC1_Init+0xb4>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_ADC1_Init+0xb4>)
 800121c:	2208      	movs	r2, #8
 800121e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_ADC1_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_ADC1_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <MX_ADC1_Init+0xb4>)
 800122e:	f000 fd31 	bl	8001c94 <HAL_ADC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001238:	f000 fa5c 	bl	80016f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800123c:	2301      	movs	r3, #1
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001240:	2301      	movs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_ADC1_Init+0xb4>)
 800125a:	f000 ffdb 	bl	8002214 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001264:	f000 fa46 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000078 	.word	0x20000078

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_I2C1_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_I2C1_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001280:	f240 220b 	movw	r2, #523	; 0x20b
 8001284:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_I2C1_Init+0x74>)
 800128e:	2201      	movs	r2, #1
 8001290:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012b2:	f001 fddf 	bl	8002e74 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 fa1a 	bl	80016f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c0:	2100      	movs	r1, #0
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012c4:	f001 fe65 	bl	8002f92 <HAL_I2CEx_ConfigAnalogFilter>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f000 fa11 	bl	80016f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012d6:	f001 fea7 	bl	8003028 <HAL_I2CEx_ConfigDigitalFilter>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012e0:	f000 fa08 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	40005400 	.word	0x40005400

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	; 0x40
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <MX_TIM1_Init+0x11c>)
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <MX_TIM1_Init+0x120>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_TIM1_Init+0x11c>)
 8001334:	224f      	movs	r2, #79	; 0x4f
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <MX_TIM1_Init+0x11c>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <MX_TIM1_Init+0x11c>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_TIM1_Init+0x11c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_TIM1_Init+0x11c>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <MX_TIM1_Init+0x11c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <MX_TIM1_Init+0x11c>)
 800135a:	f003 fab7 	bl	80048cc <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001364:	f000 f9c6 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_TIM1_Init+0x11c>)
 8001376:	f003 ffc5 	bl	8005304 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001380:	f000 f9b8 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM1_Init+0x11c>)
 8001386:	f003 fc8d 	bl	8004ca4 <HAL_TIM_IC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001390:	f000 f9b0 	bl	80016f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001394:	2304      	movs	r3, #4
 8001396:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001398:	2350      	movs	r3, #80	; 0x50
 800139a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800139c:	230a      	movs	r3, #10
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM1_Init+0x11c>)
 80013ac:	f004 f873 	bl	8005496 <HAL_TIM_SlaveConfigSynchro>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013b6:	f000 f99d 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <MX_TIM1_Init+0x11c>)
 80013ce:	f004 fe4b 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80013d8:	f000 f98c 	bl	80016f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013dc:	230a      	movs	r3, #10
 80013de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM1_Init+0x11c>)
 80013f4:	f003 fdd6 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80013fe:	f000 f979 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3740      	adds	r7, #64	; 0x40
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000011c 	.word	0x2000011c
 8001410:	40012c00 	.word	0x40012c00

08001414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <MX_TIM2_Init+0xe8>)
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MX_TIM2_Init+0xe8>)
 8001450:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_TIM2_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_TIM2_Init+0xe8>)
 800145e:	220a      	movs	r2, #10
 8001460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_TIM2_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_TIM2_Init+0xe8>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_TIM2_Init+0xe8>)
 8001470:	f003 fa2c 	bl	80048cc <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800147a:	f000 f93b 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	; (80014fc <MX_TIM2_Init+0xe8>)
 800148c:	f003 ff3a 	bl	8005304 <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001496:	f000 f92d 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <MX_TIM2_Init+0xe8>)
 800149c:	f003 faba 	bl	8004a14 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014a6:	f000 f925 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4810      	ldr	r0, [pc, #64]	; (80014fc <MX_TIM2_Init+0xe8>)
 80014ba:	f004 fdd5 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014c4:	f000 f916 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014d4:	2304      	movs	r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	2208      	movs	r2, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM2_Init+0xe8>)
 80014e0:	f003 fdfc 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014ea:	f000 f903 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM2_Init+0xe8>)
 80014f0:	f000 fa26 	bl	8001940 <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	; 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000168 	.word	0x20000168

08001500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <MX_USART1_UART_Init+0x5c>)
 8001508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MX_USART1_UART_Init+0x58>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_USART1_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART1_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART1_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART1_UART_Init+0x58>)
 8001544:	f004 fe14 	bl	8006170 <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800154e:	f000 f8d1 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001b4 	.word	0x200001b4
 800155c:	40013800 	.word	0x40013800

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <MX_GPIO_Init+0x188>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <MX_GPIO_Init+0x188>)
 800157c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <MX_GPIO_Init+0x188>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <MX_GPIO_Init+0x188>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a55      	ldr	r2, [pc, #340]	; (80016e8 <MX_GPIO_Init+0x188>)
 8001594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <MX_GPIO_Init+0x188>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <MX_GPIO_Init+0x188>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f240 2183 	movw	r1, #643	; 0x283
 80015dc:	4843      	ldr	r0, [pc, #268]	; (80016ec <MX_GPIO_Init+0x18c>)
 80015de:	f001 fc31 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f240 6104 	movw	r1, #1540	; 0x604
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f001 fc2a 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80015f0:	2200      	movs	r2, #0
 80015f2:	f24c 2179 	movw	r1, #49785	; 0xc279
 80015f6:	483e      	ldr	r0, [pc, #248]	; (80016f0 <MX_GPIO_Init+0x190>)
 80015f8:	f001 fc24 	bl	8002e44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 80015fc:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4836      	ldr	r0, [pc, #216]	; (80016ec <MX_GPIO_Init+0x18c>)
 8001612:	f001 fa8d 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8001616:	2303      	movs	r3, #3
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <MX_GPIO_Init+0x18c>)
 800162e:	f001 fa7f 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001632:	230a      	movs	r3, #10
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fa72 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA9 RelayModule_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9|RelayModule_Pin;
 800164c:	f240 6304 	movw	r3, #1540	; 0x604
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f001 fa62 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001674:	2302      	movs	r3, #2
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	481b      	ldr	r0, [pc, #108]	; (80016f0 <MX_GPIO_Init+0x190>)
 8001684:	f001 fa54 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 PB4
                           PB5 PB6 TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8001688:	f24c 2378 	movw	r3, #49784	; 0xc278
 800168c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_GPIO_Init+0x190>)
 80016a2:	f001 fa45 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80016a6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x18c>)
 80016c0:	f001 fa36 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_GPIO_Init+0x190>)
 80016da:	f001 fa29 	bl	8002b30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000400 	.word	0x48000400

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x44>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_MspInit+0x44>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_MspInit+0x44>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x44>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x44>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x44>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001768:	d124      	bne.n	80017b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_ADC_MspInit+0x74>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_ADC_MspInit+0x74>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_ADC_MspInit+0x74>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_ADC_MspInit+0x74>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_ADC_MspInit+0x74>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_ADC_MspInit+0x74>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f001 f9be 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_I2C_MspInit+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d145      	bne.n	800186e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_I2C_MspInit+0xbc>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a25      	ldr	r2, [pc, #148]	; (800187c <HAL_I2C_MspInit+0xbc>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_I2C_MspInit+0xbc>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_I2C_MspInit+0xbc>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_I2C_MspInit+0xbc>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_I2C_MspInit+0xbc>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001818:	2312      	movs	r3, #18
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001824:	2304      	movs	r3, #4
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f001 f97d 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183a:	2312      	movs	r3, #18
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001846:	2304      	movs	r3, #4
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <HAL_I2C_MspInit+0xc0>)
 8001852:	f001 f96d 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_I2C_MspInit+0xbc>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_I2C_MspInit+0xbc>)
 800185c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_I2C_MspInit+0xbc>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40005400 	.word	0x40005400
 800187c:	40021000 	.word	0x40021000
 8001880:	48000400 	.word	0x48000400

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a25      	ldr	r2, [pc, #148]	; (8001938 <HAL_TIM_Base_MspInit+0xb4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d132      	bne.n	800190c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b0:	6193      	str	r3, [r2, #24]
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018e8:	2306      	movs	r3, #6
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f001 f91b 	bl	8002b30 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	201b      	movs	r0, #27
 8001900:	f001 f8df 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001904:	201b      	movs	r0, #27
 8001906:	f001 f8f8 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800190a:	e010      	b.n	800192e <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d10b      	bne.n	800192e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_TIM_Base_MspInit+0xb8>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d11c      	bne.n	800199c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_TIM_MspPostInit+0x64>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_TIM_MspPostInit+0x64>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_TIM_MspPostInit+0x64>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <HAL_TIM_MspPostInit+0x68>)
 8001998:	f001 f8ca 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000400 	.word	0x48000400

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0x7c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d127      	bne.n	8001a1e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f0:	6153      	str	r3, [r2, #20]
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_UART_MspInit+0x80>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019fe:	2330      	movs	r3, #48	; 0x30
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_UART_MspInit+0x84>)
 8001a1a:	f001 f889 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000800 	.word	0x48000800

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a80:	f000 f8c4 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM1_CC_IRQHandler+0x10>)
 8001a8e:	f003 f96a 	bl	8004d66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000011c 	.word	0x2000011c

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f004 ff12 	bl	80068f4 <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20004000 	.word	0x20004000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	20000254 	.word	0x20000254
 8001b04:	200003a8 	.word	0x200003a8

08001b08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b30:	f7ff ffea 	bl	8001b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b36:	490d      	ldr	r1, [pc, #52]	; (8001b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <LoopForever+0xe>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <LoopForever+0x16>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f004 fed1 	bl	8006900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5e:	f7ff f8cb 	bl	8000cf8 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b70:	080072d8 	.word	0x080072d8
  ldr r2, =_sbss
 8001b74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b78:	200003a4 	.word	0x200003a4

08001b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x28>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x28>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 ff8b 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fdb0 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 ffa3 	bl	8002b16 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be8:	f000 ff6b 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000258 	.word	0x20000258

08001c34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000258 	.word	0x20000258

08001c4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09a      	sub	sp, #104	; 0x68
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e169      	b.n	8001f88 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d176      	bne.n	8001db4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d152      	bne.n	8001d74 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fd2d 	bl	8001748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d13b      	bne.n	8001d74 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fd9f 	bl	8002840 <ADC_Disable>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d12f      	bne.n	8001d74 <HAL_ADC_Init+0xe0>
 8001d14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d12b      	bne.n	8001d74 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d24:	f023 0302 	bic.w	r3, r3, #2
 8001d28:	f043 0202 	orr.w	r2, r3, #2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d3e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d4e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_ADC_Init+0x2fc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a8f      	ldr	r2, [pc, #572]	; (8001f94 <HAL_ADC_Init+0x300>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9a      	lsrs	r2, r3, #18
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d66:	e002      	b.n	8001d6e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d90:	d110      	bne.n	8001db4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f023 0312 	bic.w	r3, r3, #18
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 80d6 	bne.w	8001f6e <HAL_ADC_Init+0x2da>
 8001dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80d1 	bne.w	8001f6e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80c9 	bne.w	8001f6e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001de4:	f043 0202 	orr.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_ADC_Init+0x304>)
 8001dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_ADC_Init+0x180>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Init+0x180>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_Init+0x182>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11c      	bne.n	8001e54 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_Init+0x1a8>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Init+0x1a8>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Init+0x1aa>
 8001e3c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e52:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7e5b      	ldrb	r3, [r3, #25]
 8001e58:	035b      	lsls	r3, r3, #13
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5e:	2a01      	cmp	r2, #1
 8001e60:	d002      	beq.n	8001e68 <HAL_ADC_Init+0x1d4>
 8001e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_Init+0x1d6>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d11b      	bne.n	8001ec0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e5b      	ldrb	r3, [r3, #25]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	3b01      	subs	r3, #1
 8001e96:	045a      	lsls	r2, r3, #17
 8001e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea2:	e00d      	b.n	8001ec0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d007      	beq.n	8001ed8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d114      	bne.n	8001f10 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef4:	f023 0302 	bic.w	r3, r3, #2
 8001ef8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7e1b      	ldrb	r3, [r3, #24]
 8001efe:	039a      	lsls	r2, r3, #14
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_ADC_Init+0x308>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f20:	430b      	orrs	r3, r1
 8001f22:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10c      	bne.n	8001f46 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f023 010f 	bic.w	r1, r3, #15
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
 8001f44:	e007      	b.n	8001f56 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 020f 	bic.w	r2, r2, #15
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f023 0303 	bic.w	r3, r3, #3
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6c:	e00a      	b.n	8001f84 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f023 0312 	bic.w	r3, r3, #18
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3768      	adds	r7, #104	; 0x68
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	50000300 	.word	0x50000300
 8001f9c:	fff0c007 	.word	0xfff0c007

08001fa0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d158      	bne.n	800206c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_Start+0x28>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e054      	b.n	8002072 <HAL_ADC_Start+0xd2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fbd1 	bl	8002778 <ADC_Enable>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d140      	bne.n	8002062 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d106      	bne.n	800203a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f023 0206 	bic.w	r2, r3, #6
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	221c      	movs	r2, #28
 800204e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0204 	orr.w	r2, r2, #4
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e006      	b.n	8002070 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800206a:	e001      	b.n	8002070 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800206c:	2302      	movs	r3, #2
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d102      	bne.n	8002098 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002092:	2308      	movs	r3, #8
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e02e      	b.n	80020f6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <HAL_ADC_PollForConversion+0x178>)
 800209a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d112      	bne.n	80020ce <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d11d      	bne.n	80020f2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e08d      	b.n	80021ea <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07b      	b.n	80021ea <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80020f2:	230c      	movs	r3, #12
 80020f4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80020fe:	f7ff fd99 	bl	8001c34 <HAL_GetTick>
 8002102:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002104:	e021      	b.n	800214a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d01d      	beq.n	800214a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_ADC_PollForConversion+0xa8>
 8002114:	f7ff fd8e 	bl	8001c34 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d212      	bcs.n	800214a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0204 	orr.w	r2, r3, #4
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0d6      	beq.n	8002106 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800216e:	2b00      	cmp	r3, #0
 8002170:	d131      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002178:	2b00      	cmp	r3, #0
 800217a:	d12c      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b08      	cmp	r3, #8
 8002188:	d125      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d112      	bne.n	80021be <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d112      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
 80021bc:	e00b      	b.n	80021d6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f043 0220 	orr.w	r2, r3, #32
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	50000300 	.word	0x50000300

080021f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002214:	b480      	push	{r7}
 8002216:	b09b      	sub	sp, #108	; 0x6c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x22>
 8002232:	2302      	movs	r3, #2
 8002234:	e295      	b.n	8002762 <HAL_ADC_ConfigChannel+0x54e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8279 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d81c      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	461a      	mov	r2, r3
 800226a:	231f      	movs	r3, #31
 800226c:	4093      	lsls	r3, r2
 800226e:	43db      	mvns	r3, r3
 8002270:	4019      	ands	r1, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	e063      	b.n	8002358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b09      	cmp	r3, #9
 8002296:	d81e      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	3b1e      	subs	r3, #30
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	4019      	ands	r1, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34
 80022d4:	e040      	b.n	8002358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b0e      	cmp	r3, #14
 80022dc:	d81e      	bhi.n	800231c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	3b3c      	subs	r3, #60	; 0x3c
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	3b3c      	subs	r3, #60	; 0x3c
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
 800231a:	e01d      	b.n	8002358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	3b5a      	subs	r3, #90	; 0x5a
 8002330:	221f      	movs	r2, #31
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	4019      	ands	r1, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	3b5a      	subs	r3, #90	; 0x5a
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 80e5 	bne.w	8002532 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b09      	cmp	r3, #9
 800236e:	d91c      	bls.n	80023aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6999      	ldr	r1, [r3, #24]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	4019      	ands	r1, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6898      	ldr	r0, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	3b1e      	subs	r3, #30
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]
 80023a8:	e019      	b.n	80023de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6959      	ldr	r1, [r3, #20]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	2207      	movs	r2, #7
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6898      	ldr	r0, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d84f      	bhi.n	80024a0 <HAL_ADC_ConfigChannel+0x28c>
 8002400:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <HAL_ADC_ConfigChannel+0x1f4>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	08002419 	.word	0x08002419
 800240c:	0800243b 	.word	0x0800243b
 8002410:	0800245d 	.word	0x0800245d
 8002414:	0800247f 	.word	0x0800247f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_ADC_ConfigChannel+0x468>)
 8002420:	4013      	ands	r3, r2
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	0691      	lsls	r1, r2, #26
 8002428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800242a:	430a      	orrs	r2, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002438:	e07b      	b.n	8002532 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002440:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_ADC_ConfigChannel+0x468>)
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	0691      	lsls	r1, r2, #26
 800244a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800244c:	430a      	orrs	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800245a:	e06a      	b.n	8002532 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002462:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_ADC_ConfigChannel+0x468>)
 8002464:	4013      	ands	r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	0691      	lsls	r1, r2, #26
 800246c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800246e:	430a      	orrs	r2, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800247a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800247c:	e059      	b.n	8002532 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002484:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_ADC_ConfigChannel+0x468>)
 8002486:	4013      	ands	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	0691      	lsls	r1, r2, #26
 800248e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002490:	430a      	orrs	r2, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800249c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800249e:	e048      	b.n	8002532 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800250a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800252e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002530:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x33e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x33e>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_ADC_ConfigChannel+0x340>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 80fe 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d00f      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002580:	e049      	b.n	8002616 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	409a      	lsls	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d91c      	bls.n	80025de <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1b      	subs	r3, #27
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6898      	ldr	r0, [r3, #8]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	3b1b      	subs	r3, #27
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	e01b      	b.n	8002616 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6959      	ldr	r1, [r3, #20]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	2207      	movs	r2, #7
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4019      	ands	r1, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6898      	ldr	r0, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_ADC_ConfigChannel+0x46c>)
 8002618:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d105      	bne.n	800262e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d014      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002632:	2b11      	cmp	r3, #17
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002646:	2b12      	cmp	r3, #18
 8002648:	f040 8085 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800264c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d17e      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10c      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x470>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x470>
 8002678:	2301      	movs	r3, #1
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x472>
 800267c:	83fff000 	.word	0x83fff000
 8002680:	50000300 	.word	0x50000300
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d150      	bne.n	800272c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800268a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x498>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x498>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_ADC_ConfigChannel+0x49a>
 80026ac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d13c      	bne.n	800272c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d11d      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4e2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c2:	d118      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_ADC_ConfigChannel+0x55c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_ADC_ConfigChannel+0x560>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9a      	lsrs	r2, r3, #18
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e6:	e002      	b.n	80026ee <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026f4:	e02e      	b.n	8002754 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d10b      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x502>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002706:	d106      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002712:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002714:	e01e      	b.n	8002754 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b12      	cmp	r3, #18
 800271c:	d11a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800271e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002728:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800272a:	e013      	b.n	8002754 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800273e:	e00a      	b.n	8002756 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002752:	e000      	b.n	8002756 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002754:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800275e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002762:	4618      	mov	r0, r3
 8002764:	376c      	adds	r7, #108	; 0x6c
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83

08002778 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <ADC_Enable+0x2c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <ADC_Enable+0x2c>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <ADC_Enable+0x2e>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d143      	bne.n	8002832 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <ADC_Enable+0xc4>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0210 	orr.w	r2, r3, #16
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e02f      	b.n	8002834 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027e4:	f7ff fa26 	bl	8001c34 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ea:	e01b      	b.n	8002824 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ec:	f7ff fa22 	bl	8001c34 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d914      	bls.n	8002824 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d00d      	beq.n	8002824 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d1dc      	bne.n	80027ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	8000003f 	.word	0x8000003f

08002840 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <ADC_Disable+0x2c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <ADC_Disable+0x2c>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <ADC_Disable+0x2e>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d047      	beq.n	8002902 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030d 	and.w	r3, r3, #13
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10f      	bne.n	80028a0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0202 	orr.w	r2, r2, #2
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2203      	movs	r2, #3
 8002896:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002898:	f7ff f9cc 	bl	8001c34 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800289e:	e029      	b.n	80028f4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0210 	orr.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e023      	b.n	8002904 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028bc:	f7ff f9ba 	bl	8001c34 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d914      	bls.n	80028f4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e007      	b.n	8002904 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d0dc      	beq.n	80028bc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	e14e      	b.n	8002dde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8140 	beq.w	8002dd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x40>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d017      	beq.n	8002c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d123      	bne.n	8002c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	6939      	ldr	r1, [r7, #16]
 8002c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 809a 	beq.w	8002dd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_GPIO_Init+0x2cc>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <HAL_GPIO_Init+0x2cc>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_GPIO_Init+0x2cc>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cbc:	4a50      	ldr	r2, [pc, #320]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1e0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <HAL_GPIO_Init+0x2d4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a45      	ldr	r2, [pc, #276]	; (8002e08 <HAL_GPIO_Init+0x2d8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1d8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <HAL_GPIO_Init+0x2dc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1d4>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1e2>
 8002d04:	2305      	movs	r3, #5
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1e2>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1e2>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1e2>
 8002d10:	2300      	movs	r3, #0
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d22:	4937      	ldr	r1, [pc, #220]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d54:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd2:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <HAL_GPIO_Init+0x2e0>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f aea9 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010000 	.word	0x40010000
 8002e04:	48000400 	.word	0x48000400
 8002e08:	48000800 	.word	0x48000800
 8002e0c:	48000c00 	.word	0x48000c00
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e001      	b.n	8002e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e081      	b.n	8002f8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe fc90 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e006      	b.n	8002efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d104      	bne.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d138      	bne.n	800301a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e032      	b.n	800301c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2224      	movs	r2, #36	; 0x24
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	d139      	bne.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003048:	2302      	movs	r3, #2
 800304a:	e033      	b.n	80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800307a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f001 b823 	b.w	800412c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 817d 	beq.w	80033f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030fc:	4bbc      	ldr	r3, [pc, #752]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003108:	4bb9      	ldr	r3, [pc, #740]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d15c      	bne.n	80031ce <HAL_RCC_OscConfig+0x10e>
 8003114:	4bb6      	ldr	r3, [pc, #728]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d155      	bne.n	80031ce <HAL_RCC_OscConfig+0x10e>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003136:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x94>
 800314e:	4ba8      	ldr	r3, [pc, #672]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e015      	b.n	8003180 <HAL_RCC_OscConfig+0xc0>
 8003154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003158:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003170:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800317c:	4b9c      	ldr	r3, [pc, #624]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003184:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003188:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003194:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 811f 	beq.w	80033f4 <HAL_RCC_OscConfig+0x334>
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 8116 	bne.w	80033f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f000 bfaf 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x12e>
 80031e0:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a82      	ldr	r2, [pc, #520]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e036      	b.n	800325c <HAL_RCC_OscConfig+0x19c>
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x158>
 80031fe:	4b7c      	ldr	r3, [pc, #496]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7b      	ldr	r2, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b79      	ldr	r3, [pc, #484]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a78      	ldr	r2, [pc, #480]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e021      	b.n	800325c <HAL_RCC_OscConfig+0x19c>
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x184>
 800322a:	4b71      	ldr	r3, [pc, #452]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a70      	ldr	r2, [pc, #448]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6e      	ldr	r3, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6d      	ldr	r2, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x19c>
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800325c:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f023 020f 	bic.w	r2, r3, #15
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	495f      	ldr	r1, [pc, #380]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003272:	4313      	orrs	r3, r2
 8003274:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d059      	beq.n	800333a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fe fcd5 	bl	8001c34 <HAL_GetTick>
 800328a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fcd0 	bl	8001c34 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d902      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f000 bf43 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 80032a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_OscConfig+0x218>
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e015      	b.n	8003304 <HAL_RCC_OscConfig+0x244>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003308:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800330c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003318:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ab      	beq.n	8003290 <HAL_RCC_OscConfig+0x1d0>
 8003338:	e05d      	b.n	80033f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fc7b 	bl	8001c34 <HAL_GetTick>
 800333e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fc76 	bl	8001c34 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	; 0x64
 8003352:	d902      	bls.n	800335a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	f000 bee9 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 800335a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800336e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0x2cc>
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e015      	b.n	80033b8 <HAL_RCC_OscConfig+0x2f8>
 800338c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003390:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_RCC_OscConfig+0x330>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ab      	bne.n	8003344 <HAL_RCC_OscConfig+0x284>
 80033ec:	e003      	b.n	80033f6 <HAL_RCC_OscConfig+0x336>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 817d 	beq.w	8003706 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800340c:	4ba6      	ldr	r3, [pc, #664]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003418:	4ba3      	ldr	r3, [pc, #652]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d172      	bne.n	800350a <HAL_RCC_OscConfig+0x44a>
 8003424:	4ba0      	ldr	r3, [pc, #640]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d16c      	bne.n	800350a <HAL_RCC_OscConfig+0x44a>
 8003430:	2302      	movs	r3, #2
 8003432:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003442:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x3a0>
 800345a:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e013      	b.n	8003488 <HAL_RCC_OscConfig+0x3c8>
 8003460:	2302      	movs	r3, #2
 8003462:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003478:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003484:	4b88      	ldr	r3, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2202      	movs	r2, #2
 800348a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800348e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800349a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f042 0220 	orr.w	r2, r2, #32
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f002 021f 	and.w	r2, r2, #31
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCC_OscConfig+0x410>
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f000 be2e 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	21f8      	movs	r1, #248	; 0xf8
 80034e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034ee:	fa91 f1a1 	rbit	r1, r1
 80034f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80034f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80034fa:	fab1 f181 	clz	r1, r1
 80034fe:	b2c9      	uxtb	r1, r1
 8003500:	408b      	lsls	r3, r1
 8003502:	4969      	ldr	r1, [pc, #420]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003508:	e0fd      	b.n	8003706 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8088 	beq.w	800362c <HAL_RCC_OscConfig+0x56c>
 800351c:	2301      	movs	r3, #1
 800351e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800352e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800353c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	461a      	mov	r2, r3
 8003544:	2301      	movs	r3, #1
 8003546:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fb74 	bl	8001c34 <HAL_GetTick>
 800354c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fb6f 	bl	8001c34 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f000 bde2 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 8003568:	2302      	movs	r3, #2
 800356a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800357a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0x4d8>
 8003592:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	e013      	b.n	80035c0 <HAL_RCC_OscConfig+0x500>
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80035d6:	fab2 f282 	clz	r2, r2
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	f042 0220 	orr.w	r2, r2, #32
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f002 021f 	and.w	r2, r2, #31
 80035e6:	2101      	movs	r1, #1
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0af      	beq.n	8003552 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	21f8      	movs	r1, #248	; 0xf8
 8003608:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003610:	fa91 f1a1 	rbit	r1, r1
 8003614:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003618:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800361c:	fab1 f181 	clz	r1, r1
 8003620:	b2c9      	uxtb	r1, r1
 8003622:	408b      	lsls	r3, r1
 8003624:	4920      	ldr	r1, [pc, #128]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e06c      	b.n	8003706 <HAL_RCC_OscConfig+0x646>
 800362c:	2301      	movs	r3, #1
 800362e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800363e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800364c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe faec 	bl	8001c34 <HAL_GetTick>
 800365c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe fae7 	bl	8001c34 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d902      	bls.n	8003678 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	f000 bd5a 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 8003678:	2302      	movs	r3, #2
 800367a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800368a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d104      	bne.n	80036ac <HAL_RCC_OscConfig+0x5ec>
 80036a2:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <HAL_RCC_OscConfig+0x5e8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e015      	b.n	80036d4 <HAL_RCC_OscConfig+0x614>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	2302      	movs	r3, #2
 80036ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036be:	2302      	movs	r3, #2
 80036c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036d0:	4bc8      	ldr	r3, [pc, #800]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	2202      	movs	r2, #2
 80036d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80036da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036de:	fa92 f2a2 	rbit	r2, r2
 80036e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80036e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80036ea:	fab2 f282 	clz	r2, r2
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	f042 0220 	orr.w	r2, r2, #32
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	f002 021f 	and.w	r2, r2, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ad      	bne.n	8003662 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8110 	beq.w	800393c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d079      	beq.n	8003820 <HAL_RCC_OscConfig+0x760>
 800372c:	2301      	movs	r3, #1
 800372e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800373e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	4bab      	ldr	r3, [pc, #684]	; (80039f8 <HAL_RCC_OscConfig+0x938>)
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	461a      	mov	r2, r3
 8003752:	2301      	movs	r3, #1
 8003754:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fa6d 	bl	8001c34 <HAL_GetTick>
 800375a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fa68 	bl	8001c34 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d902      	bls.n	8003776 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	f000 bcdb 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 8003776:	2302      	movs	r3, #2
 8003778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003790:	2202      	movs	r2, #2
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d0:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037dc:	2102      	movs	r1, #2
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f1a3 	rbit	r1, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037f6:	6019      	str	r1, [r3, #0]
  return result;
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0a0      	beq.n	8003760 <HAL_RCC_OscConfig+0x6a0>
 800381e:	e08d      	b.n	800393c <HAL_RCC_OscConfig+0x87c>
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003842:	601a      	str	r2, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800384c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x938>)
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	461a      	mov	r2, r3
 800385e:	2300      	movs	r3, #0
 8003860:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fe f9e7 	bl	8001c34 <HAL_GetTick>
 8003866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe f9e2 	bl	8001c34 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d902      	bls.n	8003882 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f000 bc55 	b.w	800412c <HAL_RCC_OscConfig+0x106c>
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ae:	2202      	movs	r2, #2
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d2:	2202      	movs	r2, #2
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 80038f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038fa:	2102      	movs	r1, #2
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f1a3 	rbit	r1, r3
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003914:	6019      	str	r1, [r3, #0]
  return result;
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d197      	bne.n	800386c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 81a1 	beq.w	8003c94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396e:	61d3      	str	r3, [r2, #28]
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800398a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_RCC_OscConfig+0x93c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_RCC_OscConfig+0x93c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a16      	ldr	r2, [pc, #88]	; (80039fc <HAL_RCC_OscConfig+0x93c>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fe f943 	bl	8001c34 <HAL_GetTick>
 80039ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	e009      	b.n	80039c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b4:	f7fe f93e 	bl	8001c34 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	; 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e3b1      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x93c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCC_OscConfig+0x940>
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a02      	ldr	r2, [pc, #8]	; (80039f4 <HAL_RCC_OscConfig+0x934>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e03c      	b.n	8003a6c <HAL_RCC_OscConfig+0x9ac>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	10908120 	.word	0x10908120
 80039fc:	40007000 	.word	0x40007000
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x96a>
 8003a10:	4bc1      	ldr	r3, [pc, #772]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4ac0      	ldr	r2, [pc, #768]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	4bbe      	ldr	r3, [pc, #760]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4abd      	ldr	r2, [pc, #756]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e020      	b.n	8003a6c <HAL_RCC_OscConfig+0x9ac>
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x994>
 8003a3a:	4bb7      	ldr	r3, [pc, #732]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4ab6      	ldr	r2, [pc, #728]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	6213      	str	r3, [r2, #32]
 8003a46:	4bb4      	ldr	r3, [pc, #720]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4ab3      	ldr	r2, [pc, #716]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6213      	str	r3, [r2, #32]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0x9ac>
 8003a54:	4bb0      	ldr	r3, [pc, #704]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4aaf      	ldr	r2, [pc, #700]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	4bad      	ldr	r3, [pc, #692]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4aac      	ldr	r2, [pc, #688]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8081 	beq.w	8003b80 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe f8d9 	bl	8001c34 <HAL_GetTick>
 8003a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe f8d4 	bl	8001c34 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e345      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ae6:	601a      	str	r2, [r3, #0]
  return result;
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003af0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0302 	orr.w	r3, r3, #2
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0xa4c>
 8003b06:	4b84      	ldr	r3, [pc, #528]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	e013      	b.n	8003b34 <HAL_RCC_OscConfig+0xa74>
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b14:	2202      	movs	r2, #2
 8003b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	fa93 f2a3 	rbit	r2, r3
 8003b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	6011      	str	r1, [r2, #0]
 8003b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	fa92 f1a2 	rbit	r1, r2
 8003b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b56:	6011      	str	r1, [r2, #0]
  return result;
 8003b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b5c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	fab2 f282 	clz	r2, r2
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d084      	beq.n	8003a88 <HAL_RCC_OscConfig+0x9c8>
 8003b7e:	e07f      	b.n	8003c80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe f858 	bl	8001c34 <HAL_GetTick>
 8003b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe f853 	bl	8001c34 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e2c4      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fa93 f2a3 	rbit	r2, r3
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bce:	2202      	movs	r2, #2
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	fa93 f2a3 	rbit	r2, r3
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003be8:	601a      	str	r2, [r3, #0]
  return result;
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bf2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_OscConfig+0xb4e>
 8003c08:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	e013      	b.n	8003c36 <HAL_RCC_OscConfig+0xb76>
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fa93 f2a3 	rbit	r2, r3
 8003c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c3e:	2102      	movs	r1, #2
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	fa92 f1a2 	rbit	r1, r2
 8003c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c58:	6011      	str	r1, [r2, #0]
  return result;
 8003c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	fab2 f282 	clz	r2, r2
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f002 021f 	and.w	r2, r2, #31
 8003c74:	2101      	movs	r1, #1
 8003c76:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d184      	bne.n	8003b8a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8242 	beq.w	800412a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCC_OscConfig+0xc58>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	f000 8213 	beq.w	80040da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	f040 8162 	bne.w	8003f8a <HAL_RCC_OscConfig+0xeca>
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cea:	601a      	str	r2, [r3, #0]
  return result;
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cf4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd ff92 	bl	8001c34 <HAL_GetTick>
 8003d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d14:	e00c      	b.n	8003d30 <HAL_RCC_OscConfig+0xc70>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd ff8a 	bl	8001c34 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1fd      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d54:	601a      	str	r2, [r3, #0]
  return result;
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0xcba>
 8003d74:	4bb0      	ldr	r3, [pc, #704]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e027      	b.n	8003dca <HAL_RCC_OscConfig+0xd0a>
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f2a3 	rbit	r2, r3
 8003dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b9c      	ldr	r3, [pc, #624]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd6:	6011      	str	r1, [r2, #0]
 8003dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ddc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	fa92 f1a2 	rbit	r1, r2
 8003de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dee:	6011      	str	r1, [r2, #0]
  return result;
 8003df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d182      	bne.n	8003d1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	430b      	orrs	r3, r1
 8003e38:	497f      	ldr	r1, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
 8003e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	fa93 f2a3 	rbit	r2, r3
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e62:	601a      	str	r2, [r3, #0]
  return result;
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2301      	movs	r3, #1
 8003e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fed6 	bl	8001c34 <HAL_GetTick>
 8003e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fd fed1 	bl	8001c34 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e144      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec6:	601a      	str	r2, [r3, #0]
  return result;
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ed0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0xe2c>
 8003ee6:	4b54      	ldr	r3, [pc, #336]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	e027      	b.n	8003f3c <HAL_RCC_OscConfig+0xe7c>
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fa92 f1a2 	rbit	r1, r2
 8003f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f60:	6011      	str	r1, [r2, #0]
  return result;
 8003f62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	fab2 f282 	clz	r2, r2
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f042 0220 	orr.w	r2, r2, #32
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	f002 021f 	and.w	r2, r2, #31
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d082      	beq.n	8003e8e <HAL_RCC_OscConfig+0xdce>
 8003f88:	e0cf      	b.n	800412a <HAL_RCC_OscConfig+0x106a>
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fa93 f2a3 	rbit	r2, r3
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fae:	601a      	str	r2, [r3, #0]
  return result;
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fe30 	bl	8001c34 <HAL_GetTick>
 8003fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd8:	e009      	b.n	8003fee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd fe2b 	bl	8001c34 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e09e      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004012:	601a      	str	r2, [r3, #0]
  return result;
 8004014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004018:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800401c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d104      	bne.n	800403c <HAL_RCC_OscConfig+0xf7c>
 8004032:	4b01      	ldr	r3, [pc, #4]	; (8004038 <HAL_RCC_OscConfig+0xf78>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	e029      	b.n	800408c <HAL_RCC_OscConfig+0xfcc>
 8004038:	40021000 	.word	0x40021000
 800403c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004040:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800406a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	fa93 f2a3 	rbit	r2, r3
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCC_OscConfig+0x1078>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004090:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004094:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004098:	6011      	str	r1, [r2, #0]
 800409a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800409e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	fa92 f1a2 	rbit	r1, r2
 80040a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040b0:	6011      	str	r1, [r2, #0]
  return result;
 80040b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f042 0220 	orr.w	r2, r2, #32
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	f002 021f 	and.w	r2, r2, #31
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f202 	lsl.w	r2, r1, r2
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d180      	bne.n	8003fda <HAL_RCC_OscConfig+0xf1a>
 80040d8:	e027      	b.n	800412a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01e      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_OscConfig+0x1078>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	429a      	cmp	r2, r3
 800410c:	d10b      	bne.n	8004126 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800410e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b09e      	sub	sp, #120	; 0x78
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e162      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b90      	ldr	r3, [pc, #576]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 0207 	bic.w	r2, r3, #7
 800416a:	498b      	ldr	r1, [pc, #556]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b89      	ldr	r3, [pc, #548]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e14a      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	497f      	ldr	r1, [pc, #508]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80dc 	beq.w	8004368 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d13c      	bne.n	8004232 <HAL_RCC_ClockConfig+0xf6>
 80041b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xa6>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	e00f      	b.n	8004202 <HAL_RCC_ClockConfig+0xc6>
 80041e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	667b      	str	r3, [r7, #100]	; 0x64
 80041f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004206:	65ba      	str	r2, [r7, #88]	; 0x58
 8004208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800420a:	fa92 f2a2 	rbit	r2, r2
 800420e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004212:	fab2 f282 	clz	r2, r2
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	f042 0220 	orr.w	r2, r2, #32
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	f002 021f 	and.w	r2, r2, #31
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f202 	lsl.w	r2, r1, r2
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d17b      	bne.n	8004326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0f3      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d13c      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x178>
 800423a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_ClockConfig+0x128>
 800425e:	4b4f      	ldr	r3, [pc, #316]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e00f      	b.n	8004284 <HAL_RCC_ClockConfig+0x148>
 8004264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004268:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
 8004272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004276:	643b      	str	r3, [r7, #64]	; 0x40
 8004278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004288:	63ba      	str	r2, [r7, #56]	; 0x38
 800428a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428c:	fa92 f2a2 	rbit	r2, r2
 8004290:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004294:	fab2 f282 	clz	r2, r2
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f042 0220 	orr.w	r2, r2, #32
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	f002 021f 	and.w	r2, r2, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13a      	bne.n	8004326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b2      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
 80042b4:	2302      	movs	r3, #2
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1a0>
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	e00d      	b.n	80042f8 <HAL_RCC_ClockConfig+0x1bc>
 80042dc:	2302      	movs	r3, #2
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	2302      	movs	r3, #2
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2202      	movs	r2, #2
 80042fa:	61ba      	str	r2, [r7, #24]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	617a      	str	r2, [r7, #20]
  return result;
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f042 0220 	orr.w	r2, r2, #32
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f002 021f 	and.w	r2, r2, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e079      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	491a      	ldr	r1, [pc, #104]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004338:	f7fd fc7c 	bl	8001c34 <HAL_GetTick>
 800433c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd fc78 	bl	8001c34 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e061      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_ClockConfig+0x260>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d214      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 0207 	bic.w	r2, r3, #7
 800437e:	4906      	ldr	r1, [pc, #24]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e040      	b.n	800441a <HAL_RCC_ClockConfig+0x2de>
 8004398:	40022000 	.word	0x40022000
 800439c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_ClockConfig+0x2e8>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	491a      	ldr	r1, [pc, #104]	; (8004424 <HAL_RCC_ClockConfig+0x2e8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_RCC_ClockConfig+0x2e8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4912      	ldr	r1, [pc, #72]	; (8004424 <HAL_RCC_ClockConfig+0x2e8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043de:	f000 f829 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043e2:	4601      	mov	r1, r0
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_RCC_ClockConfig+0x2e8>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ec:	22f0      	movs	r2, #240	; 0xf0
 80043ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	fa92 f2a2 	rbit	r2, r2
 80043f6:	60fa      	str	r2, [r7, #12]
  return result;
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	fab2 f282 	clz	r2, r2
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	40d3      	lsrs	r3, r2
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x2ec>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	fa21 f303 	lsr.w	r3, r1, r3
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <HAL_RCC_ClockConfig+0x2f0>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCC_ClockConfig+0x2f4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd fbca 	bl	8001bac <HAL_InitTick>
  
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3778      	adds	r7, #120	; 0x78
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	08007264 	.word	0x08007264
 800442c:	20000000 	.word	0x20000000
 8004430:	20000004 	.word	0x20000004

08004434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b08b      	sub	sp, #44	; 0x2c
 8004438:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d002      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x30>
 800445e:	2b08      	cmp	r3, #8
 8004460:	d003      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x36>
 8004462:	e03c      	b.n	80044de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004466:	623b      	str	r3, [r7, #32]
      break;
 8004468:	e03c      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004470:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004474:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	fa92 f2a2 	rbit	r2, r2
 800447c:	607a      	str	r2, [r7, #4]
  return result;
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	fab2 f282 	clz	r2, r2
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	40d3      	lsrs	r3, r2
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	220f      	movs	r2, #15
 8004498:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	fa92 f2a2 	rbit	r2, r2
 80044a0:	60fa      	str	r2, [r7, #12]
  return result;
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	fab2 f282 	clz	r2, r2
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	40d3      	lsrs	r3, r2
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044bc:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	e004      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	623b      	str	r3, [r7, #32]
      break;
 80044dc:	e002      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044e0:	623b      	str	r3, [r7, #32]
      break;
 80044e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	372c      	adds	r7, #44	; 0x2c
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	007a1200 	.word	0x007a1200
 80044fc:	0800727c 	.word	0x0800727c
 8004500:	0800728c 	.word	0x0800728c
 8004504:	003d0900 	.word	0x003d0900

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004526:	f7ff ffef 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 800452a:	4601      	mov	r1, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004534:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004538:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	fa92 f2a2 	rbit	r2, r2
 8004540:	603a      	str	r2, [r7, #0]
  return result;
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	fab2 f282 	clz	r2, r2
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	40d3      	lsrs	r3, r2
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x40>)
 800454e:	5cd3      	ldrb	r3, [r2, r3]
 8004550:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	08007274 	.word	0x08007274

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800456a:	f7ff ffcd 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 800456e:	4601      	mov	r1, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004578:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800457c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	fa92 f2a2 	rbit	r2, r2
 8004584:	603a      	str	r2, [r7, #0]
  return result;
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	fab2 f282 	clz	r2, r2
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	40d3      	lsrs	r3, r2
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08007274 	.word	0x08007274

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b092      	sub	sp, #72	; 0x48
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80d4 	beq.w	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045cc:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10e      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4a4a      	ldr	r2, [pc, #296]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	61d3      	str	r3, [r2, #28]
 80045e4:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b45      	ldr	r3, [pc, #276]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b42      	ldr	r3, [pc, #264]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a41      	ldr	r2, [pc, #260]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fb11 	bl	8001c34 <HAL_GetTick>
 8004612:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fb0d 	bl	8001c34 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b64      	cmp	r3, #100	; 0x64
 8004622:	d901      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e14b      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b38      	ldr	r3, [pc, #224]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004634:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8084 	beq.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004650:	429a      	cmp	r2, r3
 8004652:	d07c      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004654:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	461a      	mov	r2, r3
 800467e:	2301      	movs	r3, #1
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04b      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fd fabd 	bl	8001c34 <HAL_GetTick>
 80046ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fd fab9 	bl	8001c34 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0f5      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80046d4:	2302      	movs	r3, #2
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	2302      	movs	r3, #2
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	61fb      	str	r3, [r7, #28]
  return result;
 80046ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d108      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004702:	4b01      	ldr	r3, [pc, #4]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	e00d      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004708:	40021000 	.word	0x40021000
 800470c:	40007000 	.word	0x40007000
 8004710:	10908100 	.word	0x10908100
 8004714:	2302      	movs	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2202      	movs	r2, #2
 8004726:	613a      	str	r2, [r7, #16]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	fa92 f2a2 	rbit	r2, r2
 800472e:	60fa      	str	r2, [r7, #12]
  return result;
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	fab2 f282 	clz	r2, r2
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	f002 021f 	and.w	r2, r2, #31
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f202 	lsl.w	r2, r1, r2
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0b7      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	495b      	ldr	r1, [pc, #364]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800475c:	4313      	orrs	r3, r2
 800475e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4a56      	ldr	r2, [pc, #344]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004780:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f023 0203 	bic.w	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494e      	ldr	r1, [pc, #312]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800478e:	4313      	orrs	r3, r2
 8004790:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800479e:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4947      	ldr	r1, [pc, #284]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	493f      	ldr	r1, [pc, #252]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047da:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f023 0220 	bic.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	4938      	ldr	r1, [pc, #224]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047f8:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4930      	ldr	r1, [pc, #192]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4929      	ldr	r1, [pc, #164]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004834:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	4921      	ldr	r1, [pc, #132]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004842:	4313      	orrs	r3, r2
 8004844:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	491a      	ldr	r1, [pc, #104]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004860:	4313      	orrs	r3, r2
 8004862:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	4912      	ldr	r1, [pc, #72]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487e:	4313      	orrs	r3, r2
 8004880:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	490b      	ldr	r1, [pc, #44]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800489c:	4313      	orrs	r3, r2
 800489e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4903      	ldr	r1, [pc, #12]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3748      	adds	r7, #72	; 0x48
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e049      	b.n	8004972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc ffc6 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fe38 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d001      	beq.n	8004994 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e033      	b.n	80049fc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_TIM_Base_Start+0x8c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_TIM_Base_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d004      	beq.n	80049ba <HAL_TIM_Base_Start+0x3e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <HAL_TIM_Base_Start+0x90>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d115      	bne.n	80049e6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <HAL_TIM_Base_Start+0x94>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d015      	beq.n	80049f8 <HAL_TIM_Base_Start+0x7c>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d2:	d011      	beq.n	80049f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	e008      	b.n	80049f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e000      	b.n	80049fa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	00010007 	.word	0x00010007

08004a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e049      	b.n	8004aba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f841 	bl	8004ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fd94 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_TIM_PWM_Start+0x24>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e03c      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d109      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x3e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e02f      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x58>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x72>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x8c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e083      	b.n	8004c86 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0xb6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e023      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0xc6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	e01b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xd6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	e013      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xe6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bbc:	e00b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xf6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	e003      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fa1c 	bl	800601c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a29      	ldr	r2, [pc, #164]	; (8004c90 <HAL_TIM_PWM_Start+0x1b8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <HAL_TIM_PWM_Start+0x134>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_TIM_PWM_Start+0x1bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_TIM_PWM_Start+0x134>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <HAL_TIM_PWM_Start+0x1c0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_TIM_PWM_Start+0x134>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <HAL_TIM_PWM_Start+0x1c4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_PWM_Start+0x138>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_TIM_PWM_Start+0x13a>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <HAL_TIM_PWM_Start+0x1b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_TIM_PWM_Start+0x16c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c38:	d004      	beq.n	8004c44 <HAL_TIM_PWM_Start+0x16c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_TIM_PWM_Start+0x1bc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d115      	bne.n	8004c70 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_TIM_PWM_Start+0x1c8>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d015      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x1aa>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d011      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	e008      	b.n	8004c82 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	00010007 	.word	0x00010007

08004ca4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e049      	b.n	8004d4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f841 	bl	8004d52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f000 fc4c 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d122      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d11b      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0202 	mvn.w	r2, #2
 8004d92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fbca 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8004dae:	e005      	b.n	8004dbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fbbc 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fbcd 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d122      	bne.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d11b      	bne.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0204 	mvn.w	r2, #4
 8004de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fba0 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8004e02:	e005      	b.n	8004e10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb92 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fba3 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d122      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d11b      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f06f 0208 	mvn.w	r2, #8
 8004e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fb76 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8004e56:	e005      	b.n	8004e64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb68 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb79 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d122      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d11b      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0210 	mvn.w	r2, #16
 8004e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2208      	movs	r2, #8
 8004e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb4c 	bl	8005542 <HAL_TIM_IC_CaptureCallback>
 8004eaa:	e005      	b.n	8004eb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fb3e 	bl	800552e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fb4f 	bl	8005556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10e      	bne.n	8004eea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0201 	mvn.w	r2, #1
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fb18 	bl	800551a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d10e      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f919 	bl	8006148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 f90c 	bl	800615c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fafd 	bl	800556a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d10e      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0220 	mvn.w	r2, #32
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 f8cc 	bl	8006134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e088      	b.n	80050d4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004fe0:	f000 fe76 	bl	8005cd0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020c 	bic.w	r2, r2, #12
 8004ff2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
 8005006:	e060      	b.n	80050ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d11c      	bne.n	8005048 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800501e:	f000 fedc 	bl	8005dda <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005030:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6999      	ldr	r1, [r3, #24]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	619a      	str	r2, [r3, #24]
 8005046:	e040      	b.n	80050ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d11b      	bne.n	8005086 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800505e:	f000 ff29 	bl	8005eb4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 020c 	bic.w	r2, r2, #12
 8005070:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	61da      	str	r2, [r3, #28]
 8005084:	e021      	b.n	80050ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d11c      	bne.n	80050c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800509c:	f000 ff46 	bl	8005f2c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69d9      	ldr	r1, [r3, #28]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
 80050c4:	e001      	b.n	80050ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e0ff      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b14      	cmp	r3, #20
 8005106:	f200 80f0 	bhi.w	80052ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005165 	.word	0x08005165
 8005114:	080052eb 	.word	0x080052eb
 8005118:	080052eb 	.word	0x080052eb
 800511c:	080052eb 	.word	0x080052eb
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080052eb 	.word	0x080052eb
 8005128:	080052eb 	.word	0x080052eb
 800512c:	080052eb 	.word	0x080052eb
 8005130:	080051e7 	.word	0x080051e7
 8005134:	080052eb 	.word	0x080052eb
 8005138:	080052eb 	.word	0x080052eb
 800513c:	080052eb 	.word	0x080052eb
 8005140:	08005227 	.word	0x08005227
 8005144:	080052eb 	.word	0x080052eb
 8005148:	080052eb 	.word	0x080052eb
 800514c:	080052eb 	.word	0x080052eb
 8005150:	08005269 	.word	0x08005269
 8005154:	080052eb 	.word	0x080052eb
 8005158:	080052eb 	.word	0x080052eb
 800515c:	080052eb 	.word	0x080052eb
 8005160:	080052a9 	.word	0x080052a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fa76 	bl	800565c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6999      	ldr	r1, [r3, #24]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	619a      	str	r2, [r3, #24]
      break;
 80051a2:	e0a5      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fadc 	bl	8005768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6999      	ldr	r1, [r3, #24]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	619a      	str	r2, [r3, #24]
      break;
 80051e4:	e084      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fb3b 	bl	8005868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0208 	orr.w	r2, r2, #8
 8005200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0204 	bic.w	r2, r2, #4
 8005210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69d9      	ldr	r1, [r3, #28]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	61da      	str	r2, [r3, #28]
      break;
 8005224:	e064      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fb99 	bl	8005964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	61da      	str	r2, [r3, #28]
      break;
 8005266:	e043      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbdc 	bl	8005a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0208 	orr.w	r2, r2, #8
 8005282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0204 	bic.w	r2, r2, #4
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052a6:	e023      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fc1a 	bl	8005ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	021a      	lsls	r2, r3, #8
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052e8:	e002      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
      break;
 80052ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop

08005304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIM_ConfigClockSource+0x1c>
 800531c:	2302      	movs	r3, #2
 800531e:	e0b6      	b.n	800548e <HAL_TIM_ConfigClockSource+0x18a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535c:	d03e      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0xd8>
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005362:	f200 8087 	bhi.w	8005474 <HAL_TIM_ConfigClockSource+0x170>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	f000 8086 	beq.w	800547a <HAL_TIM_ConfigClockSource+0x176>
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d87f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 8005374:	2b70      	cmp	r3, #112	; 0x70
 8005376:	d01a      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0xaa>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d87b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 800537c:	2b60      	cmp	r3, #96	; 0x60
 800537e:	d050      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x11e>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d877      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 8005384:	2b50      	cmp	r3, #80	; 0x50
 8005386:	d03c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xfe>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d873      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d058      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x13e>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d86f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 8005394:	2b30      	cmp	r3, #48	; 0x30
 8005396:	d064      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15e>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d86b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d060      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15e>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d867      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15e>
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d05a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15e>
 80053ac:	e062      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	f000 fe0d 	bl	8005fdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	609a      	str	r2, [r3, #8]
      break;
 80053da:	e04f      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ec:	f000 fdf6 	bl	8005fdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e03c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	461a      	mov	r2, r3
 8005410:	f000 fcb4 	bl	8005d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2150      	movs	r1, #80	; 0x50
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fdc3 	bl	8005fa6 <TIM_ITRx_SetConfig>
      break;
 8005420:	e02c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800542e:	461a      	mov	r2, r3
 8005430:	f000 fd10 	bl	8005e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2160      	movs	r1, #96	; 0x60
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fdb3 	bl	8005fa6 <TIM_ITRx_SetConfig>
      break;
 8005440:	e01c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fc94 	bl	8005d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fda3 	bl	8005fa6 <TIM_ITRx_SetConfig>
      break;
 8005460:	e00c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f000 fd9a 	bl	8005fa6 <TIM_ITRx_SetConfig>
      break;
 8005472:	e003      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
      break;
 8005478:	e000      	b.n	800547c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800547a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_SlaveConfigSynchro+0x18>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e031      	b.n	8005512 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb71 	bl	8005ba8 <TIM_SlaveTimer_SetConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e018      	b.n	8005512 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054fe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2e      	ldr	r2, [pc, #184]	; (800564c <TIM_Base_SetConfig+0xcc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x20>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_Base_SetConfig+0xcc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_Base_SetConfig+0x5a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0x5a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <TIM_Base_SetConfig+0xd0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0x5a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <TIM_Base_SetConfig+0xd4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0x5a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <TIM_Base_SetConfig+0xd8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <TIM_Base_SetConfig+0xcc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0xb0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a0d      	ldr	r2, [pc, #52]	; (8005650 <TIM_Base_SetConfig+0xd0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0xb0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <TIM_Base_SetConfig+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0xb0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <TIM_Base_SetConfig+0xd8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800

0800565c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0302 	bic.w	r3, r3, #2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a28      	ldr	r2, [pc, #160]	; (8005758 <TIM_OC1_SetConfig+0xfc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a27      	ldr	r2, [pc, #156]	; (800575c <TIM_OC1_SetConfig+0x100>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a26      	ldr	r2, [pc, #152]	; (8005760 <TIM_OC1_SetConfig+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a25      	ldr	r2, [pc, #148]	; (8005764 <TIM_OC1_SetConfig+0x108>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10c      	bne.n	80056ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0308 	bic.w	r3, r3, #8
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0304 	bic.w	r3, r3, #4
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <TIM_OC1_SetConfig+0xfc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_OC1_SetConfig+0x100>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_OC1_SetConfig+0x104>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC1_SetConfig+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0320 	bic.w	r3, r3, #32
 80057b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a24      	ldr	r2, [pc, #144]	; (8005858 <TIM_OC2_SetConfig+0xf0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <TIM_OC2_SetConfig+0xf0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <TIM_OC2_SetConfig+0xf4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <TIM_OC2_SetConfig+0xf8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <TIM_OC2_SetConfig+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d113      	bne.n	8005830 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800580e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005816:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <TIM_OC3_SetConfig+0xec>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10d      	bne.n	80058e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <TIM_OC3_SetConfig+0xec>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a19      	ldr	r2, [pc, #100]	; (8005958 <TIM_OC3_SetConfig+0xf0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a18      	ldr	r2, [pc, #96]	; (800595c <TIM_OC3_SetConfig+0xf4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <TIM_OC3_SetConfig+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d113      	bne.n	800592e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC4_SetConfig+0xb8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00b      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC4_SetConfig+0xbc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC4_SetConfig+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <TIM_OC4_SetConfig+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <TIM_OC5_SetConfig+0xac>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <TIM_OC5_SetConfig+0xb0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <TIM_OC5_SetConfig+0xb4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <TIM_OC5_SetConfig+0xb8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d109      	bne.n	8005ab2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800

08005ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC6_SetConfig+0xb0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC6_SetConfig+0xb4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <TIM_OC6_SetConfig+0xb8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <TIM_OC6_SetConfig+0xbc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d109      	bne.n	8005b70 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	029b      	lsls	r3, r3, #10
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b70      	cmp	r3, #112	; 0x70
 8005bf4:	d01a      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x84>
 8005bf6:	2b70      	cmp	r3, #112	; 0x70
 8005bf8:	d860      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005bfa:	2b60      	cmp	r3, #96	; 0x60
 8005bfc:	d054      	beq.n	8005ca8 <TIM_SlaveTimer_SetConfig+0x100>
 8005bfe:	2b60      	cmp	r3, #96	; 0x60
 8005c00:	d85c      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005c02:	2b50      	cmp	r3, #80	; 0x50
 8005c04:	d046      	beq.n	8005c94 <TIM_SlaveTimer_SetConfig+0xec>
 8005c06:	2b50      	cmp	r3, #80	; 0x50
 8005c08:	d858      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d019      	beq.n	8005c42 <TIM_SlaveTimer_SetConfig+0x9a>
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d854      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005c12:	2b30      	cmp	r3, #48	; 0x30
 8005c14:	d055      	beq.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c16:	2b30      	cmp	r3, #48	; 0x30
 8005c18:	d850      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d051      	beq.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d84c      	bhi.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d04d      	beq.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d04b      	beq.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c2a:	e047      	b.n	8005cbc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3c:	f000 f9ce 	bl	8005fdc <TIM_ETR_SetConfig>
      break;
 8005c40:	e040      	b.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d101      	bne.n	8005c4e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e03b      	b.n	8005cc6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
      break;
 8005c92:	e017      	b.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f000 f86b 	bl	8005d7c <TIM_TI1_ConfigInputStage>
      break;
 8005ca6:	e00d      	b.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f000 f8cd 	bl	8005e54 <TIM_TI2_ConfigInputStage>
      break;
 8005cba:	e003      	b.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e000      	b.n	8005cc4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005cc2:	bf00      	nop
  }

  return status;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <TIM_TI1_SetConfig+0xa4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_TI1_SetConfig+0x3e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d003      	beq.n	8005d0e <TIM_TI1_SetConfig+0x3e>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <TIM_TI1_SetConfig+0xa8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <TIM_TI1_SetConfig+0x42>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <TIM_TI1_SetConfig+0x44>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e003      	b.n	8005d32 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 030a 	and.w	r3, r3, #10
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40014000 	.word	0x40014000

08005d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0201 	bic.w	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f023 030a 	bic.w	r3, r3, #10
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 0210 	bic.w	r2, r3, #16
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f023 0210 	bic.w	r2, r3, #16
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	031b      	lsls	r3, r3, #12
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	031b      	lsls	r3, r3, #12
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f043 0307 	orr.w	r3, r3, #7
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	609a      	str	r2, [r3, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4313      	orrs	r3, r2
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800607c:	2302      	movs	r3, #2
 800607e:	e04f      	b.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a14      	ldr	r2, [pc, #80]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d004      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10c      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40014000 	.word	0x40014000

08006134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e040      	b.n	8006204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fb fc0a 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f82c 	bl	800620c <UART_SetConfig>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e022      	b.n	8006204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f956 	bl	8006478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f9dd 	bl	80065bc <UART_CheckIdleState>
 8006202:	4603      	mov	r3, r0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b8a      	ldr	r3, [pc, #552]	; (8006460 <UART_SetConfig+0x254>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	6979      	ldr	r1, [r7, #20]
 8006240:	430b      	orrs	r3, r1
 8006242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	430a      	orrs	r2, r1
 800627c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a78      	ldr	r2, [pc, #480]	; (8006464 <UART_SetConfig+0x258>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d120      	bne.n	80062ca <UART_SetConfig+0xbe>
 8006288:	4b77      	ldr	r3, [pc, #476]	; (8006468 <UART_SetConfig+0x25c>)
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b03      	cmp	r3, #3
 8006292:	d817      	bhi.n	80062c4 <UART_SetConfig+0xb8>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <UART_SetConfig+0x90>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062b9 	.word	0x080062b9
 80062a4:	080062bf 	.word	0x080062bf
 80062a8:	080062b3 	.word	0x080062b3
 80062ac:	2300      	movs	r3, #0
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e01d      	b.n	80062ee <UART_SetConfig+0xe2>
 80062b2:	2302      	movs	r3, #2
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e01a      	b.n	80062ee <UART_SetConfig+0xe2>
 80062b8:	2304      	movs	r3, #4
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e017      	b.n	80062ee <UART_SetConfig+0xe2>
 80062be:	2308      	movs	r3, #8
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e014      	b.n	80062ee <UART_SetConfig+0xe2>
 80062c4:	2310      	movs	r3, #16
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e011      	b.n	80062ee <UART_SetConfig+0xe2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a67      	ldr	r2, [pc, #412]	; (800646c <UART_SetConfig+0x260>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d102      	bne.n	80062da <UART_SetConfig+0xce>
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e009      	b.n	80062ee <UART_SetConfig+0xe2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a64      	ldr	r2, [pc, #400]	; (8006470 <UART_SetConfig+0x264>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d102      	bne.n	80062ea <UART_SetConfig+0xde>
 80062e4:	2300      	movs	r3, #0
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e001      	b.n	80062ee <UART_SetConfig+0xe2>
 80062ea:	2310      	movs	r3, #16
 80062ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	d15a      	bne.n	80063ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80062f8:	7ffb      	ldrb	r3, [r7, #31]
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d827      	bhi.n	800634e <UART_SetConfig+0x142>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0xf8>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006329 	.word	0x08006329
 8006308:	08006331 	.word	0x08006331
 800630c:	08006339 	.word	0x08006339
 8006310:	0800634f 	.word	0x0800634f
 8006314:	0800633f 	.word	0x0800633f
 8006318:	0800634f 	.word	0x0800634f
 800631c:	0800634f 	.word	0x0800634f
 8006320:	0800634f 	.word	0x0800634f
 8006324:	08006347 	.word	0x08006347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006328:	f7fe f8fa 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 800632c:	61b8      	str	r0, [r7, #24]
        break;
 800632e:	e013      	b.n	8006358 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006330:	f7fe f918 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8006334:	61b8      	str	r0, [r7, #24]
        break;
 8006336:	e00f      	b.n	8006358 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006338:	4b4e      	ldr	r3, [pc, #312]	; (8006474 <UART_SetConfig+0x268>)
 800633a:	61bb      	str	r3, [r7, #24]
        break;
 800633c:	e00c      	b.n	8006358 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633e:	f7fe f879 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8006342:	61b8      	str	r0, [r7, #24]
        break;
 8006344:	e008      	b.n	8006358 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634a:	61bb      	str	r3, [r7, #24]
        break;
 800634c:	e004      	b.n	8006358 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	77bb      	strb	r3, [r7, #30]
        break;
 8006356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d074      	beq.n	8006448 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	005a      	lsls	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d916      	bls.n	80063a8 <UART_SetConfig+0x19c>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d212      	bcs.n	80063a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f023 030f 	bic.w	r3, r3, #15
 800638a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	b29a      	uxth	r2, r3
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	4313      	orrs	r3, r2
 800639c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	89fa      	ldrh	r2, [r7, #14]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e04f      	b.n	8006448 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	77bb      	strb	r3, [r7, #30]
 80063ac:	e04c      	b.n	8006448 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ae:	7ffb      	ldrb	r3, [r7, #31]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d828      	bhi.n	8006406 <UART_SetConfig+0x1fa>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x1b0>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	08006407 	.word	0x08006407
 80063cc:	080063f7 	.word	0x080063f7
 80063d0:	08006407 	.word	0x08006407
 80063d4:	08006407 	.word	0x08006407
 80063d8:	08006407 	.word	0x08006407
 80063dc:	080063ff 	.word	0x080063ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fe f89e 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e013      	b.n	8006410 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e8:	f7fe f8bc 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 80063ec:	61b8      	str	r0, [r7, #24]
        break;
 80063ee:	e00f      	b.n	8006410 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f0:	4b20      	ldr	r3, [pc, #128]	; (8006474 <UART_SetConfig+0x268>)
 80063f2:	61bb      	str	r3, [r7, #24]
        break;
 80063f4:	e00c      	b.n	8006410 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063f6:	f7fe f81d 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80063fa:	61b8      	str	r0, [r7, #24]
        break;
 80063fc:	e008      	b.n	8006410 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006402:	61bb      	str	r3, [r7, #24]
        break;
 8006404:	e004      	b.n	8006410 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	77bb      	strb	r3, [r7, #30]
        break;
 800640e:	bf00      	nop
    }

    if (pclk != 0U)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	085a      	lsrs	r2, r3, #1
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	441a      	add	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d909      	bls.n	8006444 <UART_SetConfig+0x238>
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d205      	bcs.n	8006444 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	e001      	b.n	8006448 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006454:	7fbb      	ldrb	r3, [r7, #30]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	efff69f3 	.word	0xefff69f3
 8006464:	40013800 	.word	0x40013800
 8006468:	40021000 	.word	0x40021000
 800646c:	40004400 	.word	0x40004400
 8006470:	40004800 	.word	0x40004800
 8006474:	007a1200 	.word	0x007a1200

08006478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01a      	beq.n	800658e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006576:	d10a      	bne.n	800658e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b098      	sub	sp, #96	; 0x60
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065cc:	f7fb fb32 	bl	8001c34 <HAL_GetTick>
 80065d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d12e      	bne.n	800663e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f88c 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d021      	beq.n	800663e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660e:	653b      	str	r3, [r7, #80]	; 0x50
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800661e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e062      	b.n	8006704 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b04      	cmp	r3, #4
 800664a:	d149      	bne.n	80066e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	2200      	movs	r2, #0
 8006656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f856 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03c      	beq.n	80066e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	623b      	str	r3, [r7, #32]
   return(result);
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006684:	633b      	str	r3, [r7, #48]	; 0x30
 8006686:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b8:	61fa      	str	r2, [r7, #28]
 80066ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	69b9      	ldr	r1, [r7, #24]
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	617b      	str	r3, [r7, #20]
   return(result);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e5      	bne.n	8006698 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e011      	b.n	8006704 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3758      	adds	r7, #88	; 0x58
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	e049      	b.n	80067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d045      	beq.n	80067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fb fa85 	bl	8001c34 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e048      	b.n	80067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d031      	beq.n	80067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b08      	cmp	r3, #8
 800675a:	d110      	bne.n	800677e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2208      	movs	r2, #8
 8006762:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f838 	bl	80067da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2208      	movs	r2, #8
 800676e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e029      	b.n	80067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678c:	d111      	bne.n	80067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f81e 	bl	80067da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e00f      	b.n	80067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d0a6      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067da:	b480      	push	{r7}
 80067dc:	b095      	sub	sp, #84	; 0x54
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	643b      	str	r3, [r7, #64]	; 0x40
 8006802:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	61fb      	str	r3, [r7, #28]
   return(result);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	64bb      	str	r3, [r7, #72]	; 0x48
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800683a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	2b01      	cmp	r3, #1
 800684e:	d118      	bne.n	8006882 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60bb      	str	r3, [r7, #8]
   return(result);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6979      	ldr	r1, [r7, #20]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	613b      	str	r3, [r7, #16]
   return(result);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006896:	bf00      	nop
 8006898:	3754      	adds	r7, #84	; 0x54
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <siprintf>:
 80068a4:	b40e      	push	{r1, r2, r3}
 80068a6:	b500      	push	{lr}
 80068a8:	b09c      	sub	sp, #112	; 0x70
 80068aa:	ab1d      	add	r3, sp, #116	; 0x74
 80068ac:	9002      	str	r0, [sp, #8]
 80068ae:	9006      	str	r0, [sp, #24]
 80068b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068b4:	4809      	ldr	r0, [pc, #36]	; (80068dc <siprintf+0x38>)
 80068b6:	9107      	str	r1, [sp, #28]
 80068b8:	9104      	str	r1, [sp, #16]
 80068ba:	4909      	ldr	r1, [pc, #36]	; (80068e0 <siprintf+0x3c>)
 80068bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c0:	9105      	str	r1, [sp, #20]
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	a902      	add	r1, sp, #8
 80068c8:	f000 f89a 	bl	8006a00 <_svfiprintf_r>
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	b01c      	add	sp, #112	; 0x70
 80068d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d8:	b003      	add	sp, #12
 80068da:	4770      	bx	lr
 80068dc:	20000058 	.word	0x20000058
 80068e0:	ffff0208 	.word	0xffff0208

080068e4 <memset>:
 80068e4:	4402      	add	r2, r0
 80068e6:	4603      	mov	r3, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <__errno>:
 80068f4:	4b01      	ldr	r3, [pc, #4]	; (80068fc <__errno+0x8>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000058 	.word	0x20000058

08006900 <__libc_init_array>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	4d0d      	ldr	r5, [pc, #52]	; (8006938 <__libc_init_array+0x38>)
 8006904:	4c0d      	ldr	r4, [pc, #52]	; (800693c <__libc_init_array+0x3c>)
 8006906:	1b64      	subs	r4, r4, r5
 8006908:	10a4      	asrs	r4, r4, #2
 800690a:	2600      	movs	r6, #0
 800690c:	42a6      	cmp	r6, r4
 800690e:	d109      	bne.n	8006924 <__libc_init_array+0x24>
 8006910:	4d0b      	ldr	r5, [pc, #44]	; (8006940 <__libc_init_array+0x40>)
 8006912:	4c0c      	ldr	r4, [pc, #48]	; (8006944 <__libc_init_array+0x44>)
 8006914:	f000 fc6a 	bl	80071ec <_init>
 8006918:	1b64      	subs	r4, r4, r5
 800691a:	10a4      	asrs	r4, r4, #2
 800691c:	2600      	movs	r6, #0
 800691e:	42a6      	cmp	r6, r4
 8006920:	d105      	bne.n	800692e <__libc_init_array+0x2e>
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	f855 3b04 	ldr.w	r3, [r5], #4
 8006928:	4798      	blx	r3
 800692a:	3601      	adds	r6, #1
 800692c:	e7ee      	b.n	800690c <__libc_init_array+0xc>
 800692e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006932:	4798      	blx	r3
 8006934:	3601      	adds	r6, #1
 8006936:	e7f2      	b.n	800691e <__libc_init_array+0x1e>
 8006938:	080072d0 	.word	0x080072d0
 800693c:	080072d0 	.word	0x080072d0
 8006940:	080072d0 	.word	0x080072d0
 8006944:	080072d4 	.word	0x080072d4

08006948 <__retarget_lock_acquire_recursive>:
 8006948:	4770      	bx	lr

0800694a <__retarget_lock_release_recursive>:
 800694a:	4770      	bx	lr

0800694c <__ssputs_r>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	688e      	ldr	r6, [r1, #8]
 8006952:	461f      	mov	r7, r3
 8006954:	42be      	cmp	r6, r7
 8006956:	680b      	ldr	r3, [r1, #0]
 8006958:	4682      	mov	sl, r0
 800695a:	460c      	mov	r4, r1
 800695c:	4690      	mov	r8, r2
 800695e:	d82c      	bhi.n	80069ba <__ssputs_r+0x6e>
 8006960:	898a      	ldrh	r2, [r1, #12]
 8006962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006966:	d026      	beq.n	80069b6 <__ssputs_r+0x6a>
 8006968:	6965      	ldr	r5, [r4, #20]
 800696a:	6909      	ldr	r1, [r1, #16]
 800696c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006970:	eba3 0901 	sub.w	r9, r3, r1
 8006974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006978:	1c7b      	adds	r3, r7, #1
 800697a:	444b      	add	r3, r9
 800697c:	106d      	asrs	r5, r5, #1
 800697e:	429d      	cmp	r5, r3
 8006980:	bf38      	it	cc
 8006982:	461d      	movcc	r5, r3
 8006984:	0553      	lsls	r3, r2, #21
 8006986:	d527      	bpl.n	80069d8 <__ssputs_r+0x8c>
 8006988:	4629      	mov	r1, r5
 800698a:	f000 f957 	bl	8006c3c <_malloc_r>
 800698e:	4606      	mov	r6, r0
 8006990:	b360      	cbz	r0, 80069ec <__ssputs_r+0xa0>
 8006992:	6921      	ldr	r1, [r4, #16]
 8006994:	464a      	mov	r2, r9
 8006996:	f000 fbc7 	bl	8007128 <memcpy>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	6126      	str	r6, [r4, #16]
 80069a8:	6165      	str	r5, [r4, #20]
 80069aa:	444e      	add	r6, r9
 80069ac:	eba5 0509 	sub.w	r5, r5, r9
 80069b0:	6026      	str	r6, [r4, #0]
 80069b2:	60a5      	str	r5, [r4, #8]
 80069b4:	463e      	mov	r6, r7
 80069b6:	42be      	cmp	r6, r7
 80069b8:	d900      	bls.n	80069bc <__ssputs_r+0x70>
 80069ba:	463e      	mov	r6, r7
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	4632      	mov	r2, r6
 80069c0:	4641      	mov	r1, r8
 80069c2:	f000 fb86 	bl	80070d2 <memmove>
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	1b9b      	subs	r3, r3, r6
 80069ca:	60a3      	str	r3, [r4, #8]
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	4433      	add	r3, r6
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	462a      	mov	r2, r5
 80069da:	f000 fb4b 	bl	8007074 <_realloc_r>
 80069de:	4606      	mov	r6, r0
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d1e0      	bne.n	80069a6 <__ssputs_r+0x5a>
 80069e4:	6921      	ldr	r1, [r4, #16]
 80069e6:	4650      	mov	r0, sl
 80069e8:	f000 fbac 	bl	8007144 <_free_r>
 80069ec:	230c      	movs	r3, #12
 80069ee:	f8ca 3000 	str.w	r3, [sl]
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069fe:	e7e9      	b.n	80069d4 <__ssputs_r+0x88>

08006a00 <_svfiprintf_r>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4698      	mov	r8, r3
 8006a06:	898b      	ldrh	r3, [r1, #12]
 8006a08:	061b      	lsls	r3, r3, #24
 8006a0a:	b09d      	sub	sp, #116	; 0x74
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	460d      	mov	r5, r1
 8006a10:	4614      	mov	r4, r2
 8006a12:	d50e      	bpl.n	8006a32 <_svfiprintf_r+0x32>
 8006a14:	690b      	ldr	r3, [r1, #16]
 8006a16:	b963      	cbnz	r3, 8006a32 <_svfiprintf_r+0x32>
 8006a18:	2140      	movs	r1, #64	; 0x40
 8006a1a:	f000 f90f 	bl	8006c3c <_malloc_r>
 8006a1e:	6028      	str	r0, [r5, #0]
 8006a20:	6128      	str	r0, [r5, #16]
 8006a22:	b920      	cbnz	r0, 8006a2e <_svfiprintf_r+0x2e>
 8006a24:	230c      	movs	r3, #12
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a2c:	e0d0      	b.n	8006bd0 <_svfiprintf_r+0x1d0>
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	616b      	str	r3, [r5, #20]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9309      	str	r3, [sp, #36]	; 0x24
 8006a36:	2320      	movs	r3, #32
 8006a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a40:	2330      	movs	r3, #48	; 0x30
 8006a42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006be8 <_svfiprintf_r+0x1e8>
 8006a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a4a:	f04f 0901 	mov.w	r9, #1
 8006a4e:	4623      	mov	r3, r4
 8006a50:	469a      	mov	sl, r3
 8006a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a56:	b10a      	cbz	r2, 8006a5c <_svfiprintf_r+0x5c>
 8006a58:	2a25      	cmp	r2, #37	; 0x25
 8006a5a:	d1f9      	bne.n	8006a50 <_svfiprintf_r+0x50>
 8006a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a60:	d00b      	beq.n	8006a7a <_svfiprintf_r+0x7a>
 8006a62:	465b      	mov	r3, fp
 8006a64:	4622      	mov	r2, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff ff6f 	bl	800694c <__ssputs_r>
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f000 80a9 	beq.w	8006bc6 <_svfiprintf_r+0x1c6>
 8006a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a76:	445a      	add	r2, fp
 8006a78:	9209      	str	r2, [sp, #36]	; 0x24
 8006a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80a1 	beq.w	8006bc6 <_svfiprintf_r+0x1c6>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a8e:	f10a 0a01 	add.w	sl, sl, #1
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	9307      	str	r3, [sp, #28]
 8006a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9c:	4654      	mov	r4, sl
 8006a9e:	2205      	movs	r2, #5
 8006aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa4:	4850      	ldr	r0, [pc, #320]	; (8006be8 <_svfiprintf_r+0x1e8>)
 8006aa6:	f7f9 fb9b 	bl	80001e0 <memchr>
 8006aaa:	9a04      	ldr	r2, [sp, #16]
 8006aac:	b9d8      	cbnz	r0, 8006ae6 <_svfiprintf_r+0xe6>
 8006aae:	06d0      	lsls	r0, r2, #27
 8006ab0:	bf44      	itt	mi
 8006ab2:	2320      	movmi	r3, #32
 8006ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab8:	0711      	lsls	r1, r2, #28
 8006aba:	bf44      	itt	mi
 8006abc:	232b      	movmi	r3, #43	; 0x2b
 8006abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac8:	d015      	beq.n	8006af6 <_svfiprintf_r+0xf6>
 8006aca:	9a07      	ldr	r2, [sp, #28]
 8006acc:	4654      	mov	r4, sl
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f04f 0c0a 	mov.w	ip, #10
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ada:	3b30      	subs	r3, #48	; 0x30
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d94d      	bls.n	8006b7c <_svfiprintf_r+0x17c>
 8006ae0:	b1b0      	cbz	r0, 8006b10 <_svfiprintf_r+0x110>
 8006ae2:	9207      	str	r2, [sp, #28]
 8006ae4:	e014      	b.n	8006b10 <_svfiprintf_r+0x110>
 8006ae6:	eba0 0308 	sub.w	r3, r0, r8
 8006aea:	fa09 f303 	lsl.w	r3, r9, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	46a2      	mov	sl, r4
 8006af4:	e7d2      	b.n	8006a9c <_svfiprintf_r+0x9c>
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	1d19      	adds	r1, r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	9103      	str	r1, [sp, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bfbb      	ittet	lt
 8006b02:	425b      	neglt	r3, r3
 8006b04:	f042 0202 	orrlt.w	r2, r2, #2
 8006b08:	9307      	strge	r3, [sp, #28]
 8006b0a:	9307      	strlt	r3, [sp, #28]
 8006b0c:	bfb8      	it	lt
 8006b0e:	9204      	strlt	r2, [sp, #16]
 8006b10:	7823      	ldrb	r3, [r4, #0]
 8006b12:	2b2e      	cmp	r3, #46	; 0x2e
 8006b14:	d10c      	bne.n	8006b30 <_svfiprintf_r+0x130>
 8006b16:	7863      	ldrb	r3, [r4, #1]
 8006b18:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1a:	d134      	bne.n	8006b86 <_svfiprintf_r+0x186>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	9203      	str	r2, [sp, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb8      	it	lt
 8006b28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b2c:	3402      	adds	r4, #2
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006bf8 <_svfiprintf_r+0x1f8>
 8006b34:	7821      	ldrb	r1, [r4, #0]
 8006b36:	2203      	movs	r2, #3
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f7f9 fb51 	bl	80001e0 <memchr>
 8006b3e:	b138      	cbz	r0, 8006b50 <_svfiprintf_r+0x150>
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	eba0 000a 	sub.w	r0, r0, sl
 8006b46:	2240      	movs	r2, #64	; 0x40
 8006b48:	4082      	lsls	r2, r0
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	3401      	adds	r4, #1
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b54:	4825      	ldr	r0, [pc, #148]	; (8006bec <_svfiprintf_r+0x1ec>)
 8006b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b5a:	2206      	movs	r2, #6
 8006b5c:	f7f9 fb40 	bl	80001e0 <memchr>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d038      	beq.n	8006bd6 <_svfiprintf_r+0x1d6>
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <_svfiprintf_r+0x1f0>)
 8006b66:	bb1b      	cbnz	r3, 8006bb0 <_svfiprintf_r+0x1b0>
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	3307      	adds	r3, #7
 8006b6c:	f023 0307 	bic.w	r3, r3, #7
 8006b70:	3308      	adds	r3, #8
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b76:	4433      	add	r3, r6
 8006b78:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7a:	e768      	b.n	8006a4e <_svfiprintf_r+0x4e>
 8006b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b80:	460c      	mov	r4, r1
 8006b82:	2001      	movs	r0, #1
 8006b84:	e7a6      	b.n	8006ad4 <_svfiprintf_r+0xd4>
 8006b86:	2300      	movs	r3, #0
 8006b88:	3401      	adds	r4, #1
 8006b8a:	9305      	str	r3, [sp, #20]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4620      	mov	r0, r4
 8006b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b98:	3a30      	subs	r2, #48	; 0x30
 8006b9a:	2a09      	cmp	r2, #9
 8006b9c:	d903      	bls.n	8006ba6 <_svfiprintf_r+0x1a6>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0c6      	beq.n	8006b30 <_svfiprintf_r+0x130>
 8006ba2:	9105      	str	r1, [sp, #20]
 8006ba4:	e7c4      	b.n	8006b30 <_svfiprintf_r+0x130>
 8006ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006baa:	4604      	mov	r4, r0
 8006bac:	2301      	movs	r3, #1
 8006bae:	e7f0      	b.n	8006b92 <_svfiprintf_r+0x192>
 8006bb0:	ab03      	add	r3, sp, #12
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <_svfiprintf_r+0x1f4>)
 8006bb8:	a904      	add	r1, sp, #16
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	1c42      	adds	r2, r0, #1
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	d1d6      	bne.n	8006b74 <_svfiprintf_r+0x174>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	065b      	lsls	r3, r3, #25
 8006bca:	f53f af2d 	bmi.w	8006a28 <_svfiprintf_r+0x28>
 8006bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd0:	b01d      	add	sp, #116	; 0x74
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	ab03      	add	r3, sp, #12
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	462a      	mov	r2, r5
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <_svfiprintf_r+0x1f4>)
 8006bde:	a904      	add	r1, sp, #16
 8006be0:	4638      	mov	r0, r7
 8006be2:	f000 f919 	bl	8006e18 <_printf_i>
 8006be6:	e7eb      	b.n	8006bc0 <_svfiprintf_r+0x1c0>
 8006be8:	0800729c 	.word	0x0800729c
 8006bec:	080072a6 	.word	0x080072a6
 8006bf0:	00000000 	.word	0x00000000
 8006bf4:	0800694d 	.word	0x0800694d
 8006bf8:	080072a2 	.word	0x080072a2

08006bfc <sbrk_aligned>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	4e0e      	ldr	r6, [pc, #56]	; (8006c38 <sbrk_aligned+0x3c>)
 8006c00:	460c      	mov	r4, r1
 8006c02:	6831      	ldr	r1, [r6, #0]
 8006c04:	4605      	mov	r5, r0
 8006c06:	b911      	cbnz	r1, 8006c0e <sbrk_aligned+0x12>
 8006c08:	f000 fa7e 	bl	8007108 <_sbrk_r>
 8006c0c:	6030      	str	r0, [r6, #0]
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 fa79 	bl	8007108 <_sbrk_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d00a      	beq.n	8006c30 <sbrk_aligned+0x34>
 8006c1a:	1cc4      	adds	r4, r0, #3
 8006c1c:	f024 0403 	bic.w	r4, r4, #3
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d007      	beq.n	8006c34 <sbrk_aligned+0x38>
 8006c24:	1a21      	subs	r1, r4, r0
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fa6e 	bl	8007108 <_sbrk_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d101      	bne.n	8006c34 <sbrk_aligned+0x38>
 8006c30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c34:	4620      	mov	r0, r4
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	2000039c 	.word	0x2000039c

08006c3c <_malloc_r>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	1ccd      	adds	r5, r1, #3
 8006c42:	f025 0503 	bic.w	r5, r5, #3
 8006c46:	3508      	adds	r5, #8
 8006c48:	2d0c      	cmp	r5, #12
 8006c4a:	bf38      	it	cc
 8006c4c:	250c      	movcc	r5, #12
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	4607      	mov	r7, r0
 8006c52:	db01      	blt.n	8006c58 <_malloc_r+0x1c>
 8006c54:	42a9      	cmp	r1, r5
 8006c56:	d905      	bls.n	8006c64 <_malloc_r+0x28>
 8006c58:	230c      	movs	r3, #12
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d38 <_malloc_r+0xfc>
 8006c68:	f000 f9f8 	bl	800705c <__malloc_lock>
 8006c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c70:	461c      	mov	r4, r3
 8006c72:	bb5c      	cbnz	r4, 8006ccc <_malloc_r+0x90>
 8006c74:	4629      	mov	r1, r5
 8006c76:	4638      	mov	r0, r7
 8006c78:	f7ff ffc0 	bl	8006bfc <sbrk_aligned>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	4604      	mov	r4, r0
 8006c80:	d155      	bne.n	8006d2e <_malloc_r+0xf2>
 8006c82:	f8d8 4000 	ldr.w	r4, [r8]
 8006c86:	4626      	mov	r6, r4
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d145      	bne.n	8006d18 <_malloc_r+0xdc>
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	d048      	beq.n	8006d22 <_malloc_r+0xe6>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	4631      	mov	r1, r6
 8006c94:	4638      	mov	r0, r7
 8006c96:	eb04 0903 	add.w	r9, r4, r3
 8006c9a:	f000 fa35 	bl	8007108 <_sbrk_r>
 8006c9e:	4581      	cmp	r9, r0
 8006ca0:	d13f      	bne.n	8006d22 <_malloc_r+0xe6>
 8006ca2:	6821      	ldr	r1, [r4, #0]
 8006ca4:	1a6d      	subs	r5, r5, r1
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ffa7 	bl	8006bfc <sbrk_aligned>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d037      	beq.n	8006d22 <_malloc_r+0xe6>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	442b      	add	r3, r5
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d038      	beq.n	8006d32 <_malloc_r+0xf6>
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	42a2      	cmp	r2, r4
 8006cc4:	d12b      	bne.n	8006d1e <_malloc_r+0xe2>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	e00f      	b.n	8006cec <_malloc_r+0xb0>
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	1b52      	subs	r2, r2, r5
 8006cd0:	d41f      	bmi.n	8006d12 <_malloc_r+0xd6>
 8006cd2:	2a0b      	cmp	r2, #11
 8006cd4:	d917      	bls.n	8006d06 <_malloc_r+0xca>
 8006cd6:	1961      	adds	r1, r4, r5
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	6025      	str	r5, [r4, #0]
 8006cdc:	bf18      	it	ne
 8006cde:	6059      	strne	r1, [r3, #4]
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	bf08      	it	eq
 8006ce4:	f8c8 1000 	streq.w	r1, [r8]
 8006ce8:	5162      	str	r2, [r4, r5]
 8006cea:	604b      	str	r3, [r1, #4]
 8006cec:	4638      	mov	r0, r7
 8006cee:	f104 060b 	add.w	r6, r4, #11
 8006cf2:	f000 f9b9 	bl	8007068 <__malloc_unlock>
 8006cf6:	f026 0607 	bic.w	r6, r6, #7
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	1af2      	subs	r2, r6, r3
 8006cfe:	d0ae      	beq.n	8006c5e <_malloc_r+0x22>
 8006d00:	1b9b      	subs	r3, r3, r6
 8006d02:	50a3      	str	r3, [r4, r2]
 8006d04:	e7ab      	b.n	8006c5e <_malloc_r+0x22>
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	d1dd      	bne.n	8006cc8 <_malloc_r+0x8c>
 8006d0c:	f8c8 2000 	str.w	r2, [r8]
 8006d10:	e7ec      	b.n	8006cec <_malloc_r+0xb0>
 8006d12:	4623      	mov	r3, r4
 8006d14:	6864      	ldr	r4, [r4, #4]
 8006d16:	e7ac      	b.n	8006c72 <_malloc_r+0x36>
 8006d18:	4634      	mov	r4, r6
 8006d1a:	6876      	ldr	r6, [r6, #4]
 8006d1c:	e7b4      	b.n	8006c88 <_malloc_r+0x4c>
 8006d1e:	4613      	mov	r3, r2
 8006d20:	e7cc      	b.n	8006cbc <_malloc_r+0x80>
 8006d22:	230c      	movs	r3, #12
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	4638      	mov	r0, r7
 8006d28:	f000 f99e 	bl	8007068 <__malloc_unlock>
 8006d2c:	e797      	b.n	8006c5e <_malloc_r+0x22>
 8006d2e:	6025      	str	r5, [r4, #0]
 8006d30:	e7dc      	b.n	8006cec <_malloc_r+0xb0>
 8006d32:	605b      	str	r3, [r3, #4]
 8006d34:	deff      	udf	#255	; 0xff
 8006d36:	bf00      	nop
 8006d38:	20000398 	.word	0x20000398

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4699      	mov	r9, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d88:	1e13      	subs	r3, r2, #0
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf02      	ittt	eq
 8006dae:	68e5      	ldreq	r5, [r4, #12]
 8006db0:	6833      	ldreq	r3, [r6, #0]
 8006db2:	1aed      	subeq	r5, r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c0      	blx	r8
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	; 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e20:	2f78      	cmp	r7, #120	; 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	; 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d4 	beq.w	8006fe2 <_printf_i+0x1ca>
 8006e3a:	2f58      	cmp	r7, #88	; 0x58
 8006e3c:	f000 80c0 	beq.w	8006fc0 <_printf_i+0x1a8>
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fc9 	.word	0x08006fc9
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006f83 	.word	0x08006f83
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006feb 	.word	0x08006feb
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f8b 	.word	0x08006f8b
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09f      	b.n	8007004 <_printf_i+0x1ec>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	0607      	lsls	r7, r0, #24
 8006eca:	f103 0104 	add.w	r1, r3, #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_i+0xbe>
 8006ed2:	681e      	ldr	r6, [r3, #0]
 8006ed4:	e003      	b.n	8006ede <_printf_i+0xc6>
 8006ed6:	0646      	lsls	r6, r0, #25
 8006ed8:	d5fb      	bpl.n	8006ed2 <_printf_i+0xba>
 8006eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	da03      	bge.n	8006eea <_printf_i+0xd2>
 8006ee2:	232d      	movs	r3, #45	; 0x2d
 8006ee4:	4276      	negs	r6, r6
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	485a      	ldr	r0, [pc, #360]	; (8007054 <_printf_i+0x23c>)
 8006eec:	230a      	movs	r3, #10
 8006eee:	e012      	b.n	8006f16 <_printf_i+0xfe>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0605      	lsls	r5, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xe8>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xee>
 8006f00:	0641      	lsls	r1, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe4>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4853      	ldr	r0, [pc, #332]	; (8007054 <_printf_i+0x23c>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x114>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04b      	beq.n	8006fc4 <_printf_i+0x1ac>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x116>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x148>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x148>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee4 	bl	8006d3c <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14a      	bne.n	800700e <_printf_i+0x1f6>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	4833      	ldr	r0, [pc, #204]	; (8007058 <_printf_i+0x240>)
 8006f8c:	2778      	movs	r7, #120	; 0x78
 8006f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6829      	ldr	r1, [r5, #0]
 8006f96:	061f      	lsls	r7, r3, #24
 8006f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f9c:	d402      	bmi.n	8006fa4 <_printf_i+0x18c>
 8006f9e:	065f      	lsls	r7, r3, #25
 8006fa0:	bf48      	it	mi
 8006fa2:	b2b6      	uxthmi	r6, r6
 8006fa4:	07df      	lsls	r7, r3, #31
 8006fa6:	bf48      	it	mi
 8006fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	bf48      	it	mi
 8006fb0:	6023      	strmi	r3, [r4, #0]
 8006fb2:	b91e      	cbnz	r6, 8006fbc <_printf_i+0x1a4>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	f023 0320 	bic.w	r3, r3, #32
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	e7a7      	b.n	8006f10 <_printf_i+0xf8>
 8006fc0:	4824      	ldr	r0, [pc, #144]	; (8007054 <_printf_i+0x23c>)
 8006fc2:	e7e4      	b.n	8006f8e <_printf_i+0x176>
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	e7bd      	b.n	8006f44 <_printf_i+0x12c>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6826      	ldr	r6, [r4, #0]
 8006fcc:	6961      	ldr	r1, [r4, #20]
 8006fce:	1d18      	adds	r0, r3, #4
 8006fd0:	6028      	str	r0, [r5, #0]
 8006fd2:	0635      	lsls	r5, r6, #24
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0x1c4>
 8006fd8:	6019      	str	r1, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0x1ca>
 8006fdc:	0670      	lsls	r0, r6, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0x1c0>
 8006fe0:	8019      	strh	r1, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	4615      	mov	r5, r2
 8006fe8:	e7bc      	b.n	8006f64 <_printf_i+0x14c>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7f9 f8f2 	bl	80001e0 <memchr>
 8006ffc:	b108      	cbz	r0, 8007002 <_printf_i+0x1ea>
 8006ffe:	1b40      	subs	r0, r0, r5
 8007000:	6060      	str	r0, [r4, #4]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	2300      	movs	r3, #0
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e7aa      	b.n	8006f64 <_printf_i+0x14c>
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	462a      	mov	r2, r5
 8007012:	4649      	mov	r1, r9
 8007014:	4640      	mov	r0, r8
 8007016:	47d0      	blx	sl
 8007018:	3001      	adds	r0, #1
 800701a:	d0ad      	beq.n	8006f78 <_printf_i+0x160>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	d413      	bmi.n	800704a <_printf_i+0x232>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	4298      	cmp	r0, r3
 8007028:	bfb8      	it	lt
 800702a:	4618      	movlt	r0, r3
 800702c:	e7a6      	b.n	8006f7c <_printf_i+0x164>
 800702e:	2301      	movs	r3, #1
 8007030:	4632      	mov	r2, r6
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d09d      	beq.n	8006f78 <_printf_i+0x160>
 800703c:	3501      	adds	r5, #1
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	9903      	ldr	r1, [sp, #12]
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	42ab      	cmp	r3, r5
 8007046:	dcf2      	bgt.n	800702e <_printf_i+0x216>
 8007048:	e7eb      	b.n	8007022 <_printf_i+0x20a>
 800704a:	2500      	movs	r5, #0
 800704c:	f104 0619 	add.w	r6, r4, #25
 8007050:	e7f5      	b.n	800703e <_printf_i+0x226>
 8007052:	bf00      	nop
 8007054:	080072ad 	.word	0x080072ad
 8007058:	080072be 	.word	0x080072be

0800705c <__malloc_lock>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__malloc_lock+0x8>)
 800705e:	f7ff bc73 	b.w	8006948 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	20000394 	.word	0x20000394

08007068 <__malloc_unlock>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__malloc_unlock+0x8>)
 800706a:	f7ff bc6e 	b.w	800694a <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	20000394 	.word	0x20000394

08007074 <_realloc_r>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	4680      	mov	r8, r0
 800707a:	4614      	mov	r4, r2
 800707c:	460e      	mov	r6, r1
 800707e:	b921      	cbnz	r1, 800708a <_realloc_r+0x16>
 8007080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007084:	4611      	mov	r1, r2
 8007086:	f7ff bdd9 	b.w	8006c3c <_malloc_r>
 800708a:	b92a      	cbnz	r2, 8007098 <_realloc_r+0x24>
 800708c:	f000 f85a 	bl	8007144 <_free_r>
 8007090:	4625      	mov	r5, r4
 8007092:	4628      	mov	r0, r5
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	f000 f8a0 	bl	80071dc <_malloc_usable_size_r>
 800709c:	4284      	cmp	r4, r0
 800709e:	4607      	mov	r7, r0
 80070a0:	d802      	bhi.n	80070a8 <_realloc_r+0x34>
 80070a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070a6:	d812      	bhi.n	80070ce <_realloc_r+0x5a>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4640      	mov	r0, r8
 80070ac:	f7ff fdc6 	bl	8006c3c <_malloc_r>
 80070b0:	4605      	mov	r5, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0ed      	beq.n	8007092 <_realloc_r+0x1e>
 80070b6:	42bc      	cmp	r4, r7
 80070b8:	4622      	mov	r2, r4
 80070ba:	4631      	mov	r1, r6
 80070bc:	bf28      	it	cs
 80070be:	463a      	movcs	r2, r7
 80070c0:	f000 f832 	bl	8007128 <memcpy>
 80070c4:	4631      	mov	r1, r6
 80070c6:	4640      	mov	r0, r8
 80070c8:	f000 f83c 	bl	8007144 <_free_r>
 80070cc:	e7e1      	b.n	8007092 <_realloc_r+0x1e>
 80070ce:	4635      	mov	r5, r6
 80070d0:	e7df      	b.n	8007092 <_realloc_r+0x1e>

080070d2 <memmove>:
 80070d2:	4288      	cmp	r0, r1
 80070d4:	b510      	push	{r4, lr}
 80070d6:	eb01 0402 	add.w	r4, r1, r2
 80070da:	d902      	bls.n	80070e2 <memmove+0x10>
 80070dc:	4284      	cmp	r4, r0
 80070de:	4623      	mov	r3, r4
 80070e0:	d807      	bhi.n	80070f2 <memmove+0x20>
 80070e2:	1e43      	subs	r3, r0, #1
 80070e4:	42a1      	cmp	r1, r4
 80070e6:	d008      	beq.n	80070fa <memmove+0x28>
 80070e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070f0:	e7f8      	b.n	80070e4 <memmove+0x12>
 80070f2:	4402      	add	r2, r0
 80070f4:	4601      	mov	r1, r0
 80070f6:	428a      	cmp	r2, r1
 80070f8:	d100      	bne.n	80070fc <memmove+0x2a>
 80070fa:	bd10      	pop	{r4, pc}
 80070fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007100:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007104:	e7f7      	b.n	80070f6 <memmove+0x24>
	...

08007108 <_sbrk_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d06      	ldr	r5, [pc, #24]	; (8007124 <_sbrk_r+0x1c>)
 800710c:	2300      	movs	r3, #0
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	f7fa fcc2 	bl	8001a9c <_sbrk>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_sbrk_r+0x1a>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_sbrk_r+0x1a>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200003a0 	.word	0x200003a0

08007128 <memcpy>:
 8007128:	440a      	add	r2, r1
 800712a:	4291      	cmp	r1, r2
 800712c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007130:	d100      	bne.n	8007134 <memcpy+0xc>
 8007132:	4770      	bx	lr
 8007134:	b510      	push	{r4, lr}
 8007136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800713a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800713e:	4291      	cmp	r1, r2
 8007140:	d1f9      	bne.n	8007136 <memcpy+0xe>
 8007142:	bd10      	pop	{r4, pc}

08007144 <_free_r>:
 8007144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007146:	2900      	cmp	r1, #0
 8007148:	d044      	beq.n	80071d4 <_free_r+0x90>
 800714a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714e:	9001      	str	r0, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f1a1 0404 	sub.w	r4, r1, #4
 8007156:	bfb8      	it	lt
 8007158:	18e4      	addlt	r4, r4, r3
 800715a:	f7ff ff7f 	bl	800705c <__malloc_lock>
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <_free_r+0x94>)
 8007160:	9801      	ldr	r0, [sp, #4]
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	b933      	cbnz	r3, 8007174 <_free_r+0x30>
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007170:	f7ff bf7a 	b.w	8007068 <__malloc_unlock>
 8007174:	42a3      	cmp	r3, r4
 8007176:	d908      	bls.n	800718a <_free_r+0x46>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	1961      	adds	r1, r4, r5
 800717c:	428b      	cmp	r3, r1
 800717e:	bf01      	itttt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	e7ed      	b.n	8007166 <_free_r+0x22>
 800718a:	461a      	mov	r2, r3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b10b      	cbz	r3, 8007194 <_free_r+0x50>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x46>
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	1855      	adds	r5, r2, r1
 8007198:	42a5      	cmp	r5, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x70>
 800719c:	6824      	ldr	r4, [r4, #0]
 800719e:	4421      	add	r1, r4
 80071a0:	1854      	adds	r4, r2, r1
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	d1e0      	bne.n	800716a <_free_r+0x26>
 80071a8:	681c      	ldr	r4, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	6053      	str	r3, [r2, #4]
 80071ae:	440c      	add	r4, r1
 80071b0:	6014      	str	r4, [r2, #0]
 80071b2:	e7da      	b.n	800716a <_free_r+0x26>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x78>
 80071b6:	230c      	movs	r3, #12
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	e7d6      	b.n	800716a <_free_r+0x26>
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1949      	addeq	r1, r1, r5
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	6054      	str	r4, [r2, #4]
 80071d2:	e7ca      	b.n	800716a <_free_r+0x26>
 80071d4:	b003      	add	sp, #12
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	20000398 	.word	0x20000398

080071dc <_malloc_usable_size_r>:
 80071dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e0:	1f18      	subs	r0, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bfbc      	itt	lt
 80071e6:	580b      	ldrlt	r3, [r1, r0]
 80071e8:	18c0      	addlt	r0, r0, r3
 80071ea:	4770      	bx	lr

080071ec <_init>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr

080071f8 <_fini>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr
