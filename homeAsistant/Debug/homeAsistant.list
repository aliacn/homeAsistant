
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080047d0  080047d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047d0  080047d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004834  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004834  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e301  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ad  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00030480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2d  00000000  00000000  000312d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c536  00000000  00000000  00031dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012329  00000000  00000000  0004e333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8ebd  00000000  00000000  0006065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004164  00000000  00000000  0010951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004720 	.word	0x08004720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004720 	.word	0x08004720

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800028e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800029a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800029c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800029e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80002a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002a2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f80e 	bl	80002d6 <Lcd_init>

	return lcd;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	461d      	mov	r5, r3
 80002be:	f107 0410 	add.w	r4, r7, #16
 80002c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80002ca:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}

080002d6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7d9b      	ldrb	r3, [r3, #22]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10c      	bne.n	8000300 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80002e6:	2133      	movs	r1, #51	; 0x33
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f86f 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002ee:	2132      	movs	r1, #50	; 0x32
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f86b 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002f6:	2128      	movs	r1, #40	; 0x28
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f867 	bl	80003cc <lcd_write_command>
 80002fe:	e003      	b.n	8000308 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000300:	2138      	movs	r1, #56	; 0x38
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 f862 	bl	80003cc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000308:	2101      	movs	r1, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f85e 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000310:	210c      	movs	r1, #12
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f85a 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000318:	2106      	movs	r1, #6
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 f856 	bl	80003cc <lcd_write_command>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	4906      	ldr	r1, [pc, #24]	; (8000354 <Lcd_int+0x2c>)
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fd4c 	bl	8003dd8 <siprintf>

	Lcd_string(lcd, buffer);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f806 	bl	8000358 <Lcd_string>
}
 800034c:	bf00      	nop
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08004738 	.word	0x08004738

08000358 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e00a      	b.n	800037e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 f858 	bl	8000428 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3301      	adds	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	7bfc      	ldrb	r4, [r7, #15]
 8000380:	6838      	ldr	r0, [r7, #0]
 8000382:	f7ff ff25 	bl	80001d0 <strlen>
 8000386:	4603      	mov	r3, r0
 8000388:	429c      	cmp	r4, r3
 800038a:	d3ed      	bcc.n	8000368 <Lcd_string+0x10>
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
 80003a4:	4613      	mov	r3, r2
 80003a6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <Lcd_cursor+0x30>)
 80003ac:	5cd2      	ldrb	r2, [r2, r3]
 80003ae:	78bb      	ldrb	r3, [r7, #2]
 80003b0:	4413      	add	r3, r2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	3b80      	subs	r3, #128	; 0x80
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f806 	bl	80003cc <lcd_write_command>
	#endif
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	08004768 	.word	0x08004768

080003cc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6898      	ldr	r0, [r3, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	f001 fd76 	bl	8001ed4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7d9b      	ldrb	r3, [r3, #22]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	091b      	lsrs	r3, r3, #4
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2204      	movs	r2, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f842 	bl	8000484 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2204      	movs	r2, #4
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f839 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000412:	e005      	b.n	8000420 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2208      	movs	r2, #8
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f832 	bl	8000484 <lcd_write>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6898      	ldr	r0, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	899b      	ldrh	r3, [r3, #12]
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	f001 fd48 	bl	8001ed4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7d9b      	ldrb	r3, [r3, #22]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d111      	bne.n	8000470 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	091b      	lsrs	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2204      	movs	r2, #4
 8000454:	4619      	mov	r1, r3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f814 	bl	8000484 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	f003 030f 	and.w	r3, r3, #15
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2204      	movs	r2, #4
 8000466:	4619      	mov	r1, r3
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f80b 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800046e:	e005      	b.n	800047c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2208      	movs	r2, #8
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f804 	bl	8000484 <lcd_write>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
 8000490:	4613      	mov	r3, r2
 8000492:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e019      	b.n	80004ce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	8819      	ldrh	r1, [r3, #0]
 80004b2:	78fa      	ldrb	r2, [r7, #3]
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	fa42 f303 	asr.w	r3, r2, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	f001 fd06 	bl	8001ed4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	3301      	adds	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d3e1      	bcc.n	800049a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6918      	ldr	r0, [r3, #16]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	8a9b      	ldrh	r3, [r3, #20]
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	f001 fcf7 	bl	8001ed4 <HAL_GPIO_WritePin>
	DELAY(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fc3c 	bl	8000d64 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6918      	ldr	r0, [r3, #16]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	8a9b      	ldrh	r3, [r3, #20]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4619      	mov	r1, r3
 80004f8:	f001 fcec 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b098      	sub	sp, #96	; 0x60
 8000508:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fbc5 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f873 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f9c3 	bl	800089c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f96d 	bl	80007f4 <MX_TIM1_Init>
  MX_I2C1_Init();
 800051a:	f000 f92b 	bl	8000774 <MX_I2C1_Init>
  MX_ADC1_Init();
 800051e:	f000 f8cd 	bl	80006bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t readValue;
  HAL_ADC_Start (&hadc1);
 8000522:	482f      	ldr	r0, [pc, #188]	; (80005e0 <main+0xdc>)
 8000524:	f000 fdc8 	bl	80010b8 <HAL_ADC_Start>

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <main+0xe0>)
 800052a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800052e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 8000534:	4a2c      	ldr	r2, [pc, #176]	; (80005e8 <main+0xe4>)
 8000536:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800053a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000542:	4638      	mov	r0, r7
 8000544:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000548:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800054c:	2300      	movs	r3, #0
 800054e:	9303      	str	r3, [sp, #12]
 8000550:	2310      	movs	r3, #16
 8000552:	9302      	str	r3, [sp, #8]
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <main+0xe8>)
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2320      	movs	r3, #32
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <main+0xe8>)
 800055e:	f7ff fe8f 	bl	8000280 <Lcd_create>
 8000562:	f107 041c 	add.w	r4, r7, #28
 8000566:	463d      	mov	r5, r7
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000570:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd,0,0);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	2200      	movs	r2, #0
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff0b 	bl	8000398 <Lcd_cursor>
  Lcd_string(&lcd,"Ali ACAN");
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	491a      	ldr	r1, [pc, #104]	; (80005f0 <main+0xec>)
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fee5 	bl	8000358 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fefe 	bl	8000398 <Lcd_cursor>
  Lcd_string(&lcd,"LIGHT");
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4914      	ldr	r1, [pc, #80]	; (80005f4 <main+0xf0>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fed8 	bl	8000358 <Lcd_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_PollForConversion (&hadc1,1000);
 80005a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0xdc>)
 80005ae:	f000 fdf1 	bl	8001194 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue (&hadc1);
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0xdc>)
 80005b4:	f000 feac 	bl	8001310 <HAL_ADC_GetValue>
 80005b8:	64f8      	str	r0, [r7, #76]	; 0x4c
	Lcd_cursor(&lcd,1,6);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2206      	movs	r2, #6
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fee8 	bl	8000398 <Lcd_cursor>
	Lcd_int(&lcd,readValue);
 80005c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fea9 	bl	8000328 <Lcd_int>
	HAL_Delay(50);
 80005d6:	2032      	movs	r0, #50	; 0x32
 80005d8:	f000 fbc4 	bl	8000d64 <HAL_Delay>
	HAL_ADC_PollForConversion (&hadc1,1000);
 80005dc:	e7e4      	b.n	80005a8 <main+0xa4>
 80005de:	bf00      	nop
 80005e0:	20000078 	.word	0x20000078
 80005e4:	08004750 	.word	0x08004750
 80005e8:	08004760 	.word	0x08004760
 80005ec:	48000400 	.word	0x48000400
 80005f0:	0800473c 	.word	0x0800473c
 80005f4:	08004748 	.word	0x08004748

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	; 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000602:	2228      	movs	r2, #40	; 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc06 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2234      	movs	r2, #52	; 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fbf8 	bl	8003e18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000628:	2303      	movs	r3, #3
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000646:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000648:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800064c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fd7c 	bl	8002150 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800065e:	f000 f997 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fda4 	bl	80031cc <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068a:	f000 f981 	bl	8000990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800068e:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000692:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800069c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 ff77 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006b0:	f000 f96e 	bl	8000990 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3770      	adds	r7, #112	; 0x70
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC1_Init+0xb4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0xb4>)
 8000702:	2201      	movs	r2, #1
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_ADC1_Init+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_ADC1_Init+0xb4>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_ADC1_Init+0xb4>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_ADC1_Init+0xb4>)
 800071c:	2204      	movs	r2, #4
 800071e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_ADC1_Init+0xb4>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_ADC1_Init+0xb4>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <MX_ADC1_Init+0xb4>)
 800072e:	f000 fb3d 	bl	8000dac <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000738:	f000 f92a 	bl	8000990 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800073c:	2302      	movs	r3, #2
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_ADC1_Init+0xb4>)
 800075a:	f000 fde7 	bl	800132c <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000764:	f000 f914 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000078 	.word	0x20000078

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	f001 fba8 	bl	8001f04 <HAL_I2C_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 f8e9 	bl	8000990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c2:	f001 fc2e 	bl	8002022 <HAL_I2CEx_ConfigAnalogFilter>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 f8e0 	bl	8000990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d4:	f001 fc70 	bl	80020b8 <HAL_I2CEx_ConfigDigitalFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f8d7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	40005400 	.word	0x40005400
 80007f0:	2000090e 	.word	0x2000090e

080007f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_TIM1_Init+0xa0>)
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <MX_TIM1_Init+0xa4>)
 8000816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_TIM1_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM1_Init+0xa0>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM1_Init+0xa0>)
 8000826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_TIM1_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM1_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM1_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <MX_TIM1_Init+0xa0>)
 8000840:	f003 f83c 	bl	80038bc <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800084a:	f000 f8a1 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <MX_TIM1_Init+0xa0>)
 800085c:	f003 f885 	bl	800396a <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000866:	f000 f893 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_TIM1_Init+0xa0>)
 800087c:	f003 fa46 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000886:	f000 f883 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000011c 	.word	0x2000011c
 8000898:	40012c00 	.word	0x40012c00

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a33      	ldr	r2, [pc, #204]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_GPIO_Init+0xe8>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <MX_GPIO_Init+0xe8>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_GPIO_Init+0xe8>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8000912:	2200      	movs	r2, #0
 8000914:	f24c 0170 	movw	r1, #49264	; 0xc070
 8000918:	481b      	ldr	r0, [pc, #108]	; (8000988 <MX_GPIO_Init+0xec>)
 800091a:	f001 fadb 	bl	8001ed4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	481a      	ldr	r0, [pc, #104]	; (800098c <MX_GPIO_Init+0xf0>)
 8000924:	f001 fad6 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <MX_GPIO_Init+0xf0>)
 800093e:	f001 f957 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8000942:	f24c 0370 	movw	r3, #49264	; 0xc070
 8000946:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0xec>)
 800095c:	f001 f948 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_GPIO_Init+0xf0>)
 8000978:	f001 f93a 	bl	8001bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400
 800098c:	48000800 	.word	0x48000800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x44>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a04:	d124      	bne.n	8000a50 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_ADC_MspInit+0x74>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a36:	2302      	movs	r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f001 f8d0 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <HAL_I2C_MspInit+0xb8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d145      	bne.n	8000b0a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f001 f88f 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <HAL_I2C_MspInit+0xc0>)
 8000aee:	f001 f87f 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_I2C_MspInit+0xbc>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8ba 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f003 f920 	bl	8003e28 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20004000 	.word	0x20004000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000168 	.word	0x20000168
 8000c1c:	200002b8 	.word	0x200002b8

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	; (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f003 f8df 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fc45 	bl	8000504 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c88:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 8000c8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c90:	200002b8 	.word	0x200002b8

08000c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x28>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 ff6d 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe72 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 ff77 	bl	8001bd6 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 ff4d 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	2000016c 	.word	0x2000016c

08000d4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000016c 	.word	0x2000016c

08000d64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008

08000dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09a      	sub	sp, #104	; 0x68
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e169      	b.n	80010a0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d176      	bne.n	8000ecc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d152      	bne.n	8000e8c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fdef 	bl	80009e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d13b      	bne.n	8000e8c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 fd9f 	bl	8001958 <ADC_Disable>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d12f      	bne.n	8000e8c <HAL_ADC_Init+0xe0>
 8000e2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d12b      	bne.n	8000e8c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e3c:	f023 0302 	bic.w	r3, r3, #2
 8000e40:	f043 0202 	orr.w	r2, r3, #2
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e56:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e66:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e68:	4b8f      	ldr	r3, [pc, #572]	; (80010a8 <HAL_ADC_Init+0x2fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a8f      	ldr	r2, [pc, #572]	; (80010ac <HAL_ADC_Init+0x300>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9a      	lsrs	r2, r3, #18
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e7e:	e002      	b.n	8000e86 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f9      	bne.n	8000e80 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ea8:	d110      	bne.n	8000ecc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f023 0312 	bic.w	r3, r3, #18
 8000eb2:	f043 0210 	orr.w	r2, r3, #16
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f040 80d6 	bne.w	8001086 <HAL_ADC_Init+0x2da>
 8000eda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 80d1 	bne.w	8001086 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 80c9 	bne.w	8001086 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000efc:	f043 0202 	orr.w	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <HAL_ADC_Init+0x304>)
 8000f06:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_ADC_Init+0x180>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_Init+0x180>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_ADC_Init+0x182>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11c      	bne.n	8000f6c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f32:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d010      	beq.n	8000f5a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d107      	bne.n	8000f54 <HAL_ADC_Init+0x1a8>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_ADC_Init+0x1a8>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0x1aa>
 8000f54:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f6a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7e5b      	ldrb	r3, [r3, #25]
 8000f70:	035b      	lsls	r3, r3, #13
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f76:	2a01      	cmp	r2, #1
 8000f78:	d002      	beq.n	8000f80 <HAL_ADC_Init+0x1d4>
 8000f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_Init+0x1d6>
 8000f80:	2200      	movs	r2, #0
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f92:	4313      	orrs	r3, r2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d11b      	bne.n	8000fd8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e5b      	ldrb	r3, [r3, #25]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	3b01      	subs	r3, #1
 8000fae:	045a      	lsls	r2, r3, #17
 8000fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8000fba:	e00d      	b.n	8000fd8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fc4:	f043 0220 	orr.w	r2, r3, #32
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d007      	beq.n	8000ff0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fec:	4313      	orrs	r3, r2
 8000fee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d114      	bne.n	8001028 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800100c:	f023 0302 	bic.w	r3, r3, #2
 8001010:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7e1b      	ldrb	r3, [r3, #24]
 8001016:	039a      	lsls	r2, r3, #14
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4313      	orrs	r3, r2
 8001022:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001024:	4313      	orrs	r3, r2
 8001026:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_ADC_Init+0x308>)
 8001030:	4013      	ands	r3, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001038:	430b      	orrs	r3, r1
 800103a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10c      	bne.n	800105e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f023 010f 	bic.w	r1, r3, #15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
 800105c:	e007      	b.n	800106e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 020f 	bic.w	r2, r2, #15
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f023 0303 	bic.w	r3, r3, #3
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
 8001084:	e00a      	b.n	800109c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f023 0312 	bic.w	r3, r3, #18
 800108e:	f043 0210 	orr.w	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800109c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	50000300 	.word	0x50000300
 80010b4:	fff0c007 	.word	0xfff0c007

080010b8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d158      	bne.n	8001184 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_Start+0x28>
 80010dc:	2302      	movs	r3, #2
 80010de:	e054      	b.n	800118a <HAL_ADC_Start+0xd2>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fbd1 	bl	8001890 <ADC_Enable>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d140      	bne.n	800117a <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800112e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001142:	d106      	bne.n	8001152 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f023 0206 	bic.w	r2, r3, #6
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
 8001150:	e002      	b.n	8001158 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	221c      	movs	r2, #28
 8001166:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0204 	orr.w	r2, r2, #4
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e006      	b.n	8001188 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001182:	e001      	b.n	8001188 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001184:	2302      	movs	r3, #2
 8001186:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d102      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011aa:	2308      	movs	r3, #8
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e02e      	b.n	800120e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_ADC_PollForConversion+0x178>)
 80011b2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d112      	bne.n	80011e6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11d      	bne.n	800120a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f043 0220 	orr.w	r2, r3, #32
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e08d      	b.n	8001302 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f043 0220 	orr.w	r2, r3, #32
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e07b      	b.n	8001302 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800120a:	230c      	movs	r3, #12
 800120c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001216:	f7ff fd99 	bl	8000d4c <HAL_GetTick>
 800121a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800121c:	e021      	b.n	8001262 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d01d      	beq.n	8001262 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_ADC_PollForConversion+0xa8>
 800122c:	f7ff fd8e 	bl	8000d4c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d212      	bcs.n	8001262 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10b      	bne.n	8001262 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f043 0204 	orr.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e04f      	b.n	8001302 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0d6      	beq.n	800121e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001286:	2b00      	cmp	r3, #0
 8001288:	d131      	bne.n	80012ee <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001290:	2b00      	cmp	r3, #0
 8001292:	d12c      	bne.n	80012ee <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d125      	bne.n	80012ee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d112      	bne.n	80012d6 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d112      	bne.n	80012ee <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
 80012d4:	e00b      	b.n	80012ee <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	50000300 	.word	0x50000300

08001310 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800132c:	b480      	push	{r7}
 800132e:	b09b      	sub	sp, #108	; 0x6c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_ConfigChannel+0x22>
 800134a:	2302      	movs	r3, #2
 800134c:	e295      	b.n	800187a <HAL_ADC_ConfigChannel+0x54e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 8279 	bne.w	8001858 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d81c      	bhi.n	80013a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	461a      	mov	r2, r3
 8001382:	231f      	movs	r3, #31
 8001384:	4093      	lsls	r3, r2
 8001386:	43db      	mvns	r3, r3
 8001388:	4019      	ands	r1, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
 80013a6:	e063      	b.n	8001470 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d81e      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4019      	ands	r1, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	3b1e      	subs	r3, #30
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	e040      	b.n	8001470 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b0e      	cmp	r3, #14
 80013f4:	d81e      	bhi.n	8001434 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	3b3c      	subs	r3, #60	; 0x3c
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	4019      	ands	r1, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	3b3c      	subs	r3, #60	; 0x3c
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	639a      	str	r2, [r3, #56]	; 0x38
 8001432:	e01d      	b.n	8001470 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3b5a      	subs	r3, #90	; 0x5a
 8001448:	221f      	movs	r2, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	4019      	ands	r1, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	3b5a      	subs	r3, #90	; 0x5a
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 80e5 	bne.w	800164a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d91c      	bls.n	80014c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6999      	ldr	r1, [r3, #24]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	3b1e      	subs	r3, #30
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4019      	ands	r1, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6898      	ldr	r0, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	3b1e      	subs	r3, #30
 80014b4:	fa00 f203 	lsl.w	r2, r0, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	e019      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6959      	ldr	r1, [r3, #20]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	2207      	movs	r2, #7
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6898      	ldr	r0, [r3, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	3b01      	subs	r3, #1
 8001514:	2b03      	cmp	r3, #3
 8001516:	d84f      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x28c>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <HAL_ADC_ConfigChannel+0x1f4>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001531 	.word	0x08001531
 8001524:	08001553 	.word	0x08001553
 8001528:	08001575 	.word	0x08001575
 800152c:	08001597 	.word	0x08001597
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001536:	4b97      	ldr	r3, [pc, #604]	; (8001794 <HAL_ADC_ConfigChannel+0x468>)
 8001538:	4013      	ands	r3, r2
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	0691      	lsls	r1, r2, #26
 8001540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001542:	430a      	orrs	r2, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001550:	e07b      	b.n	800164a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001558:	4b8e      	ldr	r3, [pc, #568]	; (8001794 <HAL_ADC_ConfigChannel+0x468>)
 800155a:	4013      	ands	r3, r2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	0691      	lsls	r1, r2, #26
 8001562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001564:	430a      	orrs	r2, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001570:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001572:	e06a      	b.n	800164a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800157a:	4b86      	ldr	r3, [pc, #536]	; (8001794 <HAL_ADC_ConfigChannel+0x468>)
 800157c:	4013      	ands	r3, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	0691      	lsls	r1, r2, #26
 8001584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001586:	430a      	orrs	r2, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001592:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001594:	e059      	b.n	800164a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800159c:	4b7d      	ldr	r3, [pc, #500]	; (8001794 <HAL_ADC_ConfigChannel+0x468>)
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	0691      	lsls	r1, r2, #26
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	430a      	orrs	r2, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b6:	e048      	b.n	800164a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	069b      	lsls	r3, r3, #26
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	069b      	lsls	r3, r3, #26
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	069b      	lsls	r3, r3, #26
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001622:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800162a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	069b      	lsls	r3, r3, #26
 8001634:	429a      	cmp	r2, r3
 8001636:	d107      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001646:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001648:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_ADC_ConfigChannel+0x33e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_ConfigChannel+0x33e>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_ADC_ConfigChannel+0x340>
 800166a:	2300      	movs	r3, #0
 800166c:	2b00      	cmp	r3, #0
 800166e:	f040 80fe 	bne.w	800186e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00f      	beq.n	800169a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43da      	mvns	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	400a      	ands	r2, r1
 8001694:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001698:	e049      	b.n	800172e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	409a      	lsls	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d91c      	bls.n	80016f6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6999      	ldr	r1, [r3, #24]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1b      	subs	r3, #27
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6898      	ldr	r0, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	3b1b      	subs	r3, #27
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e01b      	b.n	800172e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	4019      	ands	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6898      	ldr	r0, [r3, #8]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_ADC_ConfigChannel+0x46c>)
 8001730:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b10      	cmp	r3, #16
 8001738:	d105      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800173a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d014      	beq.n	8001770 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800174a:	2b11      	cmp	r3, #17
 800174c:	d105      	bne.n	800175a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800174e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800175e:	2b12      	cmp	r3, #18
 8001760:	f040 8085 	bne.w	800186e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d17e      	bne.n	800186e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10c      	bne.n	800179c <HAL_ADC_ConfigChannel+0x470>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_ADC_ConfigChannel+0x470>
 8001790:	2301      	movs	r3, #1
 8001792:	e004      	b.n	800179e <HAL_ADC_ConfigChannel+0x472>
 8001794:	83fff000 	.word	0x83fff000
 8001798:	50000300 	.word	0x50000300
 800179c:	2300      	movs	r3, #0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d150      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d010      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x498>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x498>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x49a>
 80017c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d13c      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d11d      	bne.n	800180e <HAL_ADC_ConfigChannel+0x4e2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017da:	d118      	bne.n	800180e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_ADC_ConfigChannel+0x55c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_ADC_ConfigChannel+0x560>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9a      	lsrs	r2, r3, #18
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fe:	e002      	b.n	8001806 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3b01      	subs	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f9      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180c:	e02e      	b.n	800186c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b11      	cmp	r3, #17
 8001814:	d10b      	bne.n	800182e <HAL_ADC_ConfigChannel+0x502>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d106      	bne.n	800182e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800182c:	e01e      	b.n	800186c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b12      	cmp	r3, #18
 8001834:	d11a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001840:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001842:	e013      	b.n	800186c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001856:	e00a      	b.n	800186e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f043 0220 	orr.w	r2, r3, #32
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800186a:	e000      	b.n	800186e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800186c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800187a:	4618      	mov	r0, r3
 800187c:	376c      	adds	r7, #108	; 0x6c
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000
 800188c:	431bde83 	.word	0x431bde83

08001890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d108      	bne.n	80018bc <ADC_Enable+0x2c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <ADC_Enable+0x2c>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <ADC_Enable+0x2e>
 80018bc:	2300      	movs	r3, #0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d143      	bne.n	800194a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <ADC_Enable+0xc4>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e02f      	b.n	800194c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80018fc:	f7ff fa26 	bl	8000d4c <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001902:	e01b      	b.n	800193c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001904:	f7ff fa22 	bl	8000d4c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d914      	bls.n	800193c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00d      	beq.n	800193c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e007      	b.n	800194c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d1dc      	bne.n	8001904 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	8000003f 	.word	0x8000003f

08001958 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <ADC_Disable+0x2c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <ADC_Disable+0x2c>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <ADC_Disable+0x2e>
 8001984:	2300      	movs	r3, #0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d047      	beq.n	8001a1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030d 	and.w	r3, r3, #13
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10f      	bne.n	80019b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0202 	orr.w	r2, r2, #2
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2203      	movs	r2, #3
 80019ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f9cc 	bl	8000d4c <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019b6:	e029      	b.n	8001a0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f043 0210 	orr.w	r2, r3, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e023      	b.n	8001a1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d4:	f7ff f9ba 	bl	8000d4c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d914      	bls.n	8001a0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10d      	bne.n	8001a0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f043 0210 	orr.w	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e007      	b.n	8001a1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d0dc      	beq.n	80019d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff47 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff5c 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffb0 	bl	8001b44 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e14e      	b.n	8001e9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8140 	beq.w	8001e98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <HAL_GPIO_Init+0x40>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d017      	beq.n	8001cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d123      	bne.n	8001d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	6939      	ldr	r1, [r7, #16]
 8001d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 809a 	beq.w	8001e98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d64:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da6:	d013      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a46      	ldr	r2, [pc, #280]	; (8001ec4 <HAL_GPIO_Init+0x2d4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00d      	beq.n	8001dcc <HAL_GPIO_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a45      	ldr	r2, [pc, #276]	; (8001ec8 <HAL_GPIO_Init+0x2d8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0x1d8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a44      	ldr	r2, [pc, #272]	; (8001ecc <HAL_GPIO_Init+0x2dc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_GPIO_Init+0x1d4>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e006      	b.n	8001dd2 <HAL_GPIO_Init+0x1e2>
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	e004      	b.n	8001dd2 <HAL_GPIO_Init+0x1e2>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e002      	b.n	8001dd2 <HAL_GPIO_Init+0x1e2>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_GPIO_Init+0x1e2>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	f002 0203 	and.w	r2, r2, #3
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	4093      	lsls	r3, r2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de2:	4937      	ldr	r1, [pc, #220]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_GPIO_Init+0x2e0>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f aea9 	bne.w	8001c00 <HAL_GPIO_Init+0x10>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	48000400 	.word	0x48000400
 8001ec8:	48000800 	.word	0x48000800
 8001ecc:	48000c00 	.word	0x48000c00
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e081      	b.n	800201a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fd96 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	; 0x24
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e006      	b.n	8001f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d104      	bne.n	8001f9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69d9      	ldr	r1, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b20      	cmp	r3, #32
 8002036:	d138      	bne.n	80020aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002042:	2302      	movs	r3, #2
 8002044:	e032      	b.n	80020ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2224      	movs	r2, #36	; 0x24
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002074:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d139      	bne.n	8002142 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020d8:	2302      	movs	r3, #2
 80020da:	e033      	b.n	8002144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800210a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002156:	af00      	add	r7, sp, #0
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f001 b823 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 817d 	beq.w	8002486 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800218c:	4bbc      	ldr	r3, [pc, #752]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b04      	cmp	r3, #4
 8002196:	d00c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002198:	4bb9      	ldr	r3, [pc, #740]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d15c      	bne.n	800225e <HAL_RCC_OscConfig+0x10e>
 80021a4:	4bb6      	ldr	r3, [pc, #728]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b0:	d155      	bne.n	800225e <HAL_RCC_OscConfig+0x10e>
 80021b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_RCC_OscConfig+0x94>
 80021de:	4ba8      	ldr	r3, [pc, #672]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e015      	b.n	8002210 <HAL_RCC_OscConfig+0xc0>
 80021e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002200:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800220c:	4b9c      	ldr	r3, [pc, #624]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002214:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002218:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002224:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f042 0220 	orr.w	r2, r2, #32
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f002 021f 	and.w	r2, r2, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 811f 	beq.w	8002484 <HAL_RCC_OscConfig+0x334>
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 8116 	bne.w	8002484 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	f000 bfaf 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x12e>
 8002270:	4b83      	ldr	r3, [pc, #524]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a82      	ldr	r2, [pc, #520]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e036      	b.n	80022ec <HAL_RCC_OscConfig+0x19c>
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x158>
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7b      	ldr	r2, [pc, #492]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a78      	ldr	r2, [pc, #480]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e021      	b.n	80022ec <HAL_RCC_OscConfig+0x19c>
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x184>
 80022ba:	4b71      	ldr	r3, [pc, #452]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a70      	ldr	r2, [pc, #448]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b6e      	ldr	r3, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6d      	ldr	r2, [pc, #436]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0x19c>
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a69      	ldr	r2, [pc, #420]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a66      	ldr	r2, [pc, #408]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ec:	4b64      	ldr	r3, [pc, #400]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f023 020f 	bic.w	r2, r3, #15
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	495f      	ldr	r1, [pc, #380]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002302:	4313      	orrs	r3, r2
 8002304:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d059      	beq.n	80023ca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fd19 	bl	8000d4c <HAL_GetTick>
 800231a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fd14 	bl	8000d4c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d902      	bls.n	8002336 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	f000 bf43 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 8002336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800234a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_RCC_OscConfig+0x218>
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	e015      	b.n	8002394 <HAL_RCC_OscConfig+0x244>
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800237c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002380:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002384:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002398:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800239c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023a0:	fa92 f2a2 	rbit	r2, r2
 80023a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f042 0220 	orr.w	r2, r2, #32
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f002 021f 	and.w	r2, r2, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ab      	beq.n	8002320 <HAL_RCC_OscConfig+0x1d0>
 80023c8:	e05d      	b.n	8002486 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fcbf 	bl	8000d4c <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fcba 	bl	8000d4c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d902      	bls.n	80023ea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f000 bee9 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 80023ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80023fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0x2cc>
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0x2f8>
 800241c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002420:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002438:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_RCC_OscConfig+0x330>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800244c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002450:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800245c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ab      	bne.n	80023d4 <HAL_RCC_OscConfig+0x284>
 800247c:	e003      	b.n	8002486 <HAL_RCC_OscConfig+0x336>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 817d 	beq.w	8002796 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800249c:	4ba6      	ldr	r3, [pc, #664]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024a8:	4ba3      	ldr	r3, [pc, #652]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d172      	bne.n	800259a <HAL_RCC_OscConfig+0x44a>
 80024b4:	4ba0      	ldr	r3, [pc, #640]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d16c      	bne.n	800259a <HAL_RCC_OscConfig+0x44a>
 80024c0:	2302      	movs	r3, #2
 80024c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3a0>
 80024ea:	4b93      	ldr	r3, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0x3c8>
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002502:	2302      	movs	r3, #2
 8002504:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002508:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002514:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	2202      	movs	r2, #2
 800251a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800251e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800252a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCC_OscConfig+0x410>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d002      	beq.n	8002560 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f000 be2e 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	21f8      	movs	r1, #248	; 0xf8
 8002576:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800257e:	fa91 f1a1 	rbit	r1, r1
 8002582:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002586:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800258a:	fab1 f181 	clz	r1, r1
 800258e:	b2c9      	uxtb	r1, r1
 8002590:	408b      	lsls	r3, r1
 8002592:	4969      	ldr	r1, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002598:	e0fd      	b.n	8002796 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8088 	beq.w	80026bc <HAL_RCC_OscConfig+0x56c>
 80025ac:	2301      	movs	r3, #1
 80025ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fbb8 	bl	8000d4c <HAL_GetTick>
 80025dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fbb3 	bl	8000d4c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f000 bde2 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800260a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002622:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e013      	b.n	8002650 <HAL_RCC_OscConfig+0x500>
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002640:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2202      	movs	r2, #2
 8002652:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002656:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002662:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0af      	beq.n	80025e2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	21f8      	movs	r1, #248	; 0xf8
 8002698:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026a0:	fa91 f1a1 	rbit	r1, r1
 80026a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026ac:	fab1 f181 	clz	r1, r1
 80026b0:	b2c9      	uxtb	r1, r1
 80026b2:	408b      	lsls	r3, r1
 80026b4:	4920      	ldr	r1, [pc, #128]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e06c      	b.n	8002796 <HAL_RCC_OscConfig+0x646>
 80026bc:	2301      	movs	r3, #1
 80026be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	461a      	mov	r2, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fb30 	bl	8000d4c <HAL_GetTick>
 80026ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7fe fb2b 	bl	8000d4c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	f000 bd5a 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800271a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d104      	bne.n	800273c <HAL_RCC_OscConfig+0x5ec>
 8002732:	4b01      	ldr	r3, [pc, #4]	; (8002738 <HAL_RCC_OscConfig+0x5e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x614>
 8002738:	40021000 	.word	0x40021000
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002754:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002760:	4bc8      	ldr	r3, [pc, #800]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2202      	movs	r2, #2
 8002766:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800276a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002776:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ad      	bne.n	80026f2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8110 	beq.w	80029cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d079      	beq.n	80028b0 <HAL_RCC_OscConfig+0x760>
 80027bc:	2301      	movs	r3, #1
 80027be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4bab      	ldr	r3, [pc, #684]	; (8002a88 <HAL_RCC_OscConfig+0x938>)
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fab1 	bl	8000d4c <HAL_GetTick>
 80027ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f0:	f7fe faac 	bl	8000d4c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d902      	bls.n	8002806 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	f000 bcdb 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002844:	2202      	movs	r2, #2
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800285e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002860:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800286c:	2102      	movs	r1, #2
 800286e:	6019      	str	r1, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f1a3 	rbit	r1, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002886:	6019      	str	r1, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0a0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x6a0>
 80028ae:	e08d      	b.n	80029cc <HAL_RCC_OscConfig+0x87c>
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028d2:	601a      	str	r2, [r3, #0]
  return result;
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x938>)
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	461a      	mov	r2, r3
 80028ee:	2300      	movs	r3, #0
 80028f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fe fa2b 	bl	8000d4c <HAL_GetTick>
 80028f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fa26 	bl	8000d4c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d902      	bls.n	8002912 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	f000 bc55 	b.w	80031bc <HAL_RCC_OscConfig+0x106c>
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800297c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800298a:	2102      	movs	r1, #2
 800298c:	6019      	str	r1, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f1a3 	rbit	r1, r3
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029a4:	6019      	str	r1, [r3, #0]
  return result;
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d197      	bne.n	80028fc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 81a1 	beq.w	8002d24 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 80029fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fe:	61d3      	str	r3, [r2, #28]
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_RCC_OscConfig+0x93c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_RCC_OscConfig+0x93c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_RCC_OscConfig+0x93c>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f987 	bl	8000d4c <HAL_GetTick>
 8002a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe f982 	bl	8000d4c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e3b1      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_RCC_OscConfig+0x93c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ef      	beq.n	8002a44 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10d      	bne.n	8002a90 <HAL_RCC_OscConfig+0x940>
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a02      	ldr	r2, [pc, #8]	; (8002a84 <HAL_RCC_OscConfig+0x934>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	e03c      	b.n	8002afc <HAL_RCC_OscConfig+0x9ac>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	10908120 	.word	0x10908120
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x96a>
 8002aa0:	4bc1      	ldr	r3, [pc, #772]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4ac0      	ldr	r2, [pc, #768]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	4bbe      	ldr	r3, [pc, #760]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4abd      	ldr	r2, [pc, #756]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	e020      	b.n	8002afc <HAL_RCC_OscConfig+0x9ac>
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x994>
 8002aca:	4bb7      	ldr	r3, [pc, #732]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4ab6      	ldr	r2, [pc, #728]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4bb4      	ldr	r3, [pc, #720]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4ab3      	ldr	r2, [pc, #716]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0x9ac>
 8002ae4:	4bb0      	ldr	r3, [pc, #704]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4aaf      	ldr	r2, [pc, #700]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6213      	str	r3, [r2, #32]
 8002af0:	4bad      	ldr	r3, [pc, #692]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4aac      	ldr	r2, [pc, #688]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8081 	beq.w	8002c10 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f91d 	bl	8000d4c <HAL_GetTick>
 8002b12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe f918 	bl	8000d4c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e345      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b38:	2202      	movs	r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b76:	601a      	str	r2, [r3, #0]
  return result;
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_OscConfig+0xa4c>
 8002b96:	4b84      	ldr	r3, [pc, #528]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	e013      	b.n	8002bc4 <HAL_RCC_OscConfig+0xa74>
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bcc:	2102      	movs	r1, #2
 8002bce:	6011      	str	r1, [r2, #0]
 8002bd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	fa92 f1a2 	rbit	r1, r2
 8002bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002be6:	6011      	str	r1, [r2, #0]
  return result;
 8002be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	fab2 f282 	clz	r2, r2
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f002 021f 	and.w	r2, r2, #31
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f202 	lsl.w	r2, r1, r2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d084      	beq.n	8002b18 <HAL_RCC_OscConfig+0x9c8>
 8002c0e:	e07f      	b.n	8002d10 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fe f89c 	bl	8000d4c <HAL_GetTick>
 8002c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe f897 	bl	8000d4c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e2c4      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c5e:	2202      	movs	r2, #2
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c78:	601a      	str	r2, [r3, #0]
  return result;
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0xb4e>
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	e013      	b.n	8002cc6 <HAL_RCC_OscConfig+0xb76>
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cce:	2102      	movs	r1, #2
 8002cd0:	6011      	str	r1, [r2, #0]
 8002cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	fa92 f1a2 	rbit	r1, r2
 8002ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ce8:	6011      	str	r1, [r2, #0]
  return result;
 8002cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d184      	bne.n	8002c1a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8242 	beq.w	80031ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_RCC_OscConfig+0xc58>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	f000 8213 	beq.w	800316a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 8162 	bne.w	800301a <HAL_RCC_OscConfig+0xeca>
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd ffd6 	bl	8000d4c <HAL_GetTick>
 8002da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	e00c      	b.n	8002dc0 <HAL_RCC_OscConfig+0xc70>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fd ffce 	bl	8000d4c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1fd      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002de4:	601a      	str	r2, [r3, #0]
  return result;
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0xcba>
 8002e04:	4bb0      	ldr	r3, [pc, #704]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e027      	b.n	8002e5a <HAL_RCC_OscConfig+0xd0a>
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fa93 f2a3 	rbit	r2, r3
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	4b9c      	ldr	r3, [pc, #624]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e5e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e66:	6011      	str	r1, [r2, #0]
 8002e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	fa92 f1a2 	rbit	r1, r2
 8002e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e7e:	6011      	str	r1, [r2, #0]
  return result;
 8002e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f042 0220 	orr.w	r2, r2, #32
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f002 021f 	and.w	r2, r2, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d182      	bne.n	8002dac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	497f      	ldr	r1, [pc, #508]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	fa93 f2a3 	rbit	r2, r3
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ef2:	601a      	str	r2, [r3, #0]
  return result;
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002efc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2301      	movs	r3, #1
 8002f12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd ff1a 	bl	8000d4c <HAL_GetTick>
 8002f18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fd ff15 	bl	8000d4c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e144      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0xe2c>
 8002f76:	4b54      	ldr	r3, [pc, #336]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e027      	b.n	8002fcc <HAL_RCC_OscConfig+0xe7c>
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fde:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d082      	beq.n	8002f1e <HAL_RCC_OscConfig+0xdce>
 8003018:	e0cf      	b.n	80031ba <HAL_RCC_OscConfig+0x106a>
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800303e:	601a      	str	r2, [r3, #0]
  return result;
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003048:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	461a      	mov	r2, r3
 800305c:	2300      	movs	r3, #0
 800305e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fe74 	bl	8000d4c <HAL_GetTick>
 8003064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e009      	b.n	800307e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd fe6f 	bl	8000d4c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e09e      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030a2:	601a      	str	r2, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d104      	bne.n	80030cc <HAL_RCC_OscConfig+0xf7c>
 80030c2:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCC_OscConfig+0xf78>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e029      	b.n	800311c <HAL_RCC_OscConfig+0xfcc>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_RCC_OscConfig+0x1078>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003120:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003124:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	fa92 f1a2 	rbit	r1, r2
 8003138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003140:	6011      	str	r1, [r2, #0]
  return result;
 8003142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003146:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d180      	bne.n	800306a <HAL_RCC_OscConfig+0xf1a>
 8003168:	e027      	b.n	80031ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e01e      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCC_OscConfig+0x1078>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003186:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800318a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	429a      	cmp	r2, r3
 800319c:	d10b      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800319e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b09e      	sub	sp, #120	; 0x78
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e162      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b90      	ldr	r3, [pc, #576]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	498b      	ldr	r1, [pc, #556]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b89      	ldr	r3, [pc, #548]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e14a      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	497f      	ldr	r1, [pc, #508]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80dc 	beq.w	80033f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d13c      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xf6>
 8003248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d102      	bne.n	8003272 <HAL_RCC_ClockConfig+0xa6>
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	e00f      	b.n	8003292 <HAL_RCC_ClockConfig+0xc6>
 8003272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	663b      	str	r3, [r7, #96]	; 0x60
 8003286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003296:	65ba      	str	r2, [r7, #88]	; 0x58
 8003298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d17b      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0f3      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d13c      	bne.n	8003344 <HAL_RCC_ClockConfig+0x178>
 80032ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x128>
 80032ee:	4b4f      	ldr	r3, [pc, #316]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_ClockConfig+0x148>
 80032f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	643b      	str	r3, [r7, #64]	; 0x40
 8003308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	63ba      	str	r2, [r7, #56]	; 0x38
 800331a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f002 021f 	and.w	r2, r2, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d13a      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0b2      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
 8003344:	2302      	movs	r3, #2
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_RCC_ClockConfig+0x1a0>
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	e00d      	b.n	8003388 <HAL_RCC_ClockConfig+0x1bc>
 800336c:	2302      	movs	r3, #2
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2202      	movs	r2, #2
 800338a:	61ba      	str	r2, [r7, #24]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	fa92 f2a2 	rbit	r2, r2
 8003392:	617a      	str	r2, [r7, #20]
  return result;
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	fab2 f282 	clz	r2, r2
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f042 0220 	orr.w	r2, r2, #32
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f002 021f 	and.w	r2, r2, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e079      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	491a      	ldr	r1, [pc, #104]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fd fcc0 	bl	8000d4c <HAL_GetTick>
 80033cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fd fcbc 	bl	8000d4c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e061      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d214      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4906      	ldr	r1, [pc, #24]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e040      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	491a      	ldr	r1, [pc, #104]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4912      	ldr	r1, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800346e:	f000 f829 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003472:	4601      	mov	r1, r0
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	22f0      	movs	r2, #240	; 0xf0
 800347e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	60fa      	str	r2, [r7, #12]
  return result;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	40d3      	lsrs	r3, r2
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x2ec>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_RCC_ClockConfig+0x2f0>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x2f4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fc0e 	bl	8000cc4 <HAL_InitTick>
  
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3778      	adds	r7, #120	; 0x78
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	0800476c 	.word	0x0800476c
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e03c      	b.n	800356e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f6:	623b      	str	r3, [r7, #32]
      break;
 80034f8:	e03c      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003500:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003504:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	607a      	str	r2, [r7, #4]
  return result;
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	40d3      	lsrs	r3, r2
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_RCC_GetSysClockFreq+0xc8>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	220f      	movs	r2, #15
 8003528:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	60fa      	str	r2, [r7, #12]
  return result;
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	40d3      	lsrs	r3, r2
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_RCC_GetSysClockFreq+0xcc>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e004      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	623b      	str	r3, [r7, #32]
      break;
 800356c:	e002      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003570:	623b      	str	r3, [r7, #32]
      break;
 8003572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003574:	6a3b      	ldr	r3, [r7, #32]
}
 8003576:	4618      	mov	r0, r3
 8003578:	372c      	adds	r7, #44	; 0x2c
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	007a1200 	.word	0x007a1200
 800358c:	0800477c 	.word	0x0800477c
 8003590:	0800478c 	.word	0x0800478c
 8003594:	003d0900 	.word	0x003d0900

08003598 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b092      	sub	sp, #72	; 0x48
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80d4 	beq.w	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a4a      	ldr	r2, [pc, #296]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	61d3      	str	r3, [r2, #28]
 80035d4:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b45      	ldr	r3, [pc, #276]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b42      	ldr	r3, [pc, #264]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a41      	ldr	r2, [pc, #260]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fba5 	bl	8000d4c <HAL_GetTick>
 8003602:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fd fba1 	bl	8000d4c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e14b      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8084 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003640:	429a      	cmp	r2, r3
 8003642:	d07c      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	461a      	mov	r2, r3
 800366e:	2301      	movs	r3, #1
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04b      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd fb51 	bl	8000d4c <HAL_GetTick>
 80036aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fb4d 	bl	8000d4c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0f5      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80036c4:	2302      	movs	r3, #2
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	2302      	movs	r3, #2
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
  return result;
 80036dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d108      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036f2:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	e00d      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	10908100 	.word	0x10908100
 8003704:	2302      	movs	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	2202      	movs	r2, #2
 8003716:	613a      	str	r2, [r7, #16]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	fa92 f2a2 	rbit	r2, r2
 800371e:	60fa      	str	r2, [r7, #12]
  return result;
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f002 021f 	and.w	r2, r2, #31
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0b7      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	495b      	ldr	r1, [pc, #364]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800374c:	4313      	orrs	r3, r2
 800374e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4a56      	ldr	r2, [pc, #344]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003770:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f023 0203 	bic.w	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	494e      	ldr	r1, [pc, #312]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800377e:	4313      	orrs	r3, r2
 8003780:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f023 0210 	bic.w	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4947      	ldr	r1, [pc, #284]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379c:	4313      	orrs	r3, r2
 800379e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f023 0220 	bic.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	4938      	ldr	r1, [pc, #224]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e8:	4b33      	ldr	r3, [pc, #204]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	4930      	ldr	r1, [pc, #192]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4929      	ldr	r1, [pc, #164]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4921      	ldr	r1, [pc, #132]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003832:	4313      	orrs	r3, r2
 8003834:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	491a      	ldr	r1, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003850:	4313      	orrs	r3, r2
 8003852:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	4912      	ldr	r1, [pc, #72]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800386e:	4313      	orrs	r3, r2
 8003870:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	490b      	ldr	r1, [pc, #44]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3748      	adds	r7, #72	; 0x48
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e049      	b.n	8003962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd f91c 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f000 f8fe 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_ConfigClockSource+0x1c>
 8003982:	2302      	movs	r3, #2
 8003984:	e0b6      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x18a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d03e      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xd8>
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	f200 8087 	bhi.w	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	f000 8086 	beq.w	8003ae0 <HAL_TIM_ConfigClockSource+0x176>
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d8:	d87f      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039da:	2b70      	cmp	r3, #112	; 0x70
 80039dc:	d01a      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0xaa>
 80039de:	2b70      	cmp	r3, #112	; 0x70
 80039e0:	d87b      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039e2:	2b60      	cmp	r3, #96	; 0x60
 80039e4:	d050      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x11e>
 80039e6:	2b60      	cmp	r3, #96	; 0x60
 80039e8:	d877      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039ea:	2b50      	cmp	r3, #80	; 0x50
 80039ec:	d03c      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xfe>
 80039ee:	2b50      	cmp	r3, #80	; 0x50
 80039f0:	d873      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d058      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0x13e>
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d86f      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 80039fa:	2b30      	cmp	r3, #48	; 0x30
 80039fc:	d064      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x15e>
 80039fe:	2b30      	cmp	r3, #48	; 0x30
 8003a00:	d86b      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d060      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x15e>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d867      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d05c      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x15e>
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d05a      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x15e>
 8003a12:	e062      	b.n	8003ada <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	f000 f952 	bl	8003ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e04f      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a52:	f000 f93b 	bl	8003ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a64:	609a      	str	r2, [r3, #8]
      break;
 8003a66:	e03c      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a74:	461a      	mov	r2, r3
 8003a76:	f000 f8af 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2150      	movs	r1, #80	; 0x50
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f908 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003a86:	e02c      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a94:	461a      	mov	r2, r3
 8003a96:	f000 f8ce 	bl	8003c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2160      	movs	r1, #96	; 0x60
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f8f8 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e01c      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f000 f88f 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f8e8 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003ac6:	e00c      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 f8df 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e003      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ade:	e000      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <TIM_Base_SetConfig+0xcc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x20>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <TIM_Base_SetConfig+0xcc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00f      	beq.n	8003b56 <TIM_Base_SetConfig+0x5a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d00b      	beq.n	8003b56 <TIM_Base_SetConfig+0x5a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <TIM_Base_SetConfig+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_Base_SetConfig+0x5a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <TIM_Base_SetConfig+0xd4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_Base_SetConfig+0x5a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <TIM_Base_SetConfig+0xd8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d108      	bne.n	8003b68 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0e      	ldr	r2, [pc, #56]	; (8003bc8 <TIM_Base_SetConfig+0xcc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_Base_SetConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <TIM_Base_SetConfig+0xd0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <TIM_Base_SetConfig+0xd4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <TIM_Base_SetConfig+0xd8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0201 	bic.w	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 030a 	bic.w	r3, r3, #10
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0210 	bic.w	r2, r3, #16
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f043 0307 	orr.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e04f      	b.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10c      	bne.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40014000 	.word	0x40014000

08003dd8 <siprintf>:
 8003dd8:	b40e      	push	{r1, r2, r3}
 8003dda:	b500      	push	{lr}
 8003ddc:	b09c      	sub	sp, #112	; 0x70
 8003dde:	ab1d      	add	r3, sp, #116	; 0x74
 8003de0:	9002      	str	r0, [sp, #8]
 8003de2:	9006      	str	r0, [sp, #24]
 8003de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de8:	4809      	ldr	r0, [pc, #36]	; (8003e10 <siprintf+0x38>)
 8003dea:	9107      	str	r1, [sp, #28]
 8003dec:	9104      	str	r1, [sp, #16]
 8003dee:	4909      	ldr	r1, [pc, #36]	; (8003e14 <siprintf+0x3c>)
 8003df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df4:	9105      	str	r1, [sp, #20]
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	a902      	add	r1, sp, #8
 8003dfc:	f000 f89a 	bl	8003f34 <_svfiprintf_r>
 8003e00:	9b02      	ldr	r3, [sp, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	b01c      	add	sp, #112	; 0x70
 8003e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e0c:	b003      	add	sp, #12
 8003e0e:	4770      	bx	lr
 8003e10:	20000058 	.word	0x20000058
 8003e14:	ffff0208 	.word	0xffff0208

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__errno>:
 8003e28:	4b01      	ldr	r3, [pc, #4]	; (8003e30 <__errno+0x8>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000058 	.word	0x20000058

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4d0d      	ldr	r5, [pc, #52]	; (8003e6c <__libc_init_array+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	; (8003e70 <__libc_init_array+0x3c>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	2600      	movs	r6, #0
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	4d0b      	ldr	r5, [pc, #44]	; (8003e74 <__libc_init_array+0x40>)
 8003e46:	4c0c      	ldr	r4, [pc, #48]	; (8003e78 <__libc_init_array+0x44>)
 8003e48:	f000 fc6a 	bl	8004720 <_init>
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	2600      	movs	r6, #0
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	080047d0 	.word	0x080047d0
 8003e70:	080047d0 	.word	0x080047d0
 8003e74:	080047d0 	.word	0x080047d0
 8003e78:	080047d4 	.word	0x080047d4

08003e7c <__retarget_lock_acquire_recursive>:
 8003e7c:	4770      	bx	lr

08003e7e <__retarget_lock_release_recursive>:
 8003e7e:	4770      	bx	lr

08003e80 <__ssputs_r>:
 8003e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	688e      	ldr	r6, [r1, #8]
 8003e86:	461f      	mov	r7, r3
 8003e88:	42be      	cmp	r6, r7
 8003e8a:	680b      	ldr	r3, [r1, #0]
 8003e8c:	4682      	mov	sl, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	4690      	mov	r8, r2
 8003e92:	d82c      	bhi.n	8003eee <__ssputs_r+0x6e>
 8003e94:	898a      	ldrh	r2, [r1, #12]
 8003e96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e9a:	d026      	beq.n	8003eea <__ssputs_r+0x6a>
 8003e9c:	6965      	ldr	r5, [r4, #20]
 8003e9e:	6909      	ldr	r1, [r1, #16]
 8003ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ea4:	eba3 0901 	sub.w	r9, r3, r1
 8003ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eac:	1c7b      	adds	r3, r7, #1
 8003eae:	444b      	add	r3, r9
 8003eb0:	106d      	asrs	r5, r5, #1
 8003eb2:	429d      	cmp	r5, r3
 8003eb4:	bf38      	it	cc
 8003eb6:	461d      	movcc	r5, r3
 8003eb8:	0553      	lsls	r3, r2, #21
 8003eba:	d527      	bpl.n	8003f0c <__ssputs_r+0x8c>
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	f000 f957 	bl	8004170 <_malloc_r>
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	b360      	cbz	r0, 8003f20 <__ssputs_r+0xa0>
 8003ec6:	6921      	ldr	r1, [r4, #16]
 8003ec8:	464a      	mov	r2, r9
 8003eca:	f000 fbc7 	bl	800465c <memcpy>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	6126      	str	r6, [r4, #16]
 8003edc:	6165      	str	r5, [r4, #20]
 8003ede:	444e      	add	r6, r9
 8003ee0:	eba5 0509 	sub.w	r5, r5, r9
 8003ee4:	6026      	str	r6, [r4, #0]
 8003ee6:	60a5      	str	r5, [r4, #8]
 8003ee8:	463e      	mov	r6, r7
 8003eea:	42be      	cmp	r6, r7
 8003eec:	d900      	bls.n	8003ef0 <__ssputs_r+0x70>
 8003eee:	463e      	mov	r6, r7
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	f000 fb86 	bl	8004606 <memmove>
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	1b9b      	subs	r3, r3, r6
 8003efe:	60a3      	str	r3, [r4, #8]
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	4433      	add	r3, r6
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	2000      	movs	r0, #0
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	f000 fb4b 	bl	80045a8 <_realloc_r>
 8003f12:	4606      	mov	r6, r0
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1e0      	bne.n	8003eda <__ssputs_r+0x5a>
 8003f18:	6921      	ldr	r1, [r4, #16]
 8003f1a:	4650      	mov	r0, sl
 8003f1c:	f000 fbac 	bl	8004678 <_free_r>
 8003f20:	230c      	movs	r3, #12
 8003f22:	f8ca 3000 	str.w	r3, [sl]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f32:	e7e9      	b.n	8003f08 <__ssputs_r+0x88>

08003f34 <_svfiprintf_r>:
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	4698      	mov	r8, r3
 8003f3a:	898b      	ldrh	r3, [r1, #12]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	b09d      	sub	sp, #116	; 0x74
 8003f40:	4607      	mov	r7, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	d50e      	bpl.n	8003f66 <_svfiprintf_r+0x32>
 8003f48:	690b      	ldr	r3, [r1, #16]
 8003f4a:	b963      	cbnz	r3, 8003f66 <_svfiprintf_r+0x32>
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	f000 f90f 	bl	8004170 <_malloc_r>
 8003f52:	6028      	str	r0, [r5, #0]
 8003f54:	6128      	str	r0, [r5, #16]
 8003f56:	b920      	cbnz	r0, 8003f62 <_svfiprintf_r+0x2e>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f60:	e0d0      	b.n	8004104 <_svfiprintf_r+0x1d0>
 8003f62:	2340      	movs	r3, #64	; 0x40
 8003f64:	616b      	str	r3, [r5, #20]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f74:	2330      	movs	r3, #48	; 0x30
 8003f76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800411c <_svfiprintf_r+0x1e8>
 8003f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f7e:	f04f 0901 	mov.w	r9, #1
 8003f82:	4623      	mov	r3, r4
 8003f84:	469a      	mov	sl, r3
 8003f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f8a:	b10a      	cbz	r2, 8003f90 <_svfiprintf_r+0x5c>
 8003f8c:	2a25      	cmp	r2, #37	; 0x25
 8003f8e:	d1f9      	bne.n	8003f84 <_svfiprintf_r+0x50>
 8003f90:	ebba 0b04 	subs.w	fp, sl, r4
 8003f94:	d00b      	beq.n	8003fae <_svfiprintf_r+0x7a>
 8003f96:	465b      	mov	r3, fp
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f7ff ff6f 	bl	8003e80 <__ssputs_r>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f000 80a9 	beq.w	80040fa <_svfiprintf_r+0x1c6>
 8003fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003faa:	445a      	add	r2, fp
 8003fac:	9209      	str	r2, [sp, #36]	; 0x24
 8003fae:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80a1 	beq.w	80040fa <_svfiprintf_r+0x1c6>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc2:	f10a 0a01 	add.w	sl, sl, #1
 8003fc6:	9304      	str	r3, [sp, #16]
 8003fc8:	9307      	str	r3, [sp, #28]
 8003fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fce:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd0:	4654      	mov	r4, sl
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd8:	4850      	ldr	r0, [pc, #320]	; (800411c <_svfiprintf_r+0x1e8>)
 8003fda:	f7fc f901 	bl	80001e0 <memchr>
 8003fde:	9a04      	ldr	r2, [sp, #16]
 8003fe0:	b9d8      	cbnz	r0, 800401a <_svfiprintf_r+0xe6>
 8003fe2:	06d0      	lsls	r0, r2, #27
 8003fe4:	bf44      	itt	mi
 8003fe6:	2320      	movmi	r3, #32
 8003fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fec:	0711      	lsls	r1, r2, #28
 8003fee:	bf44      	itt	mi
 8003ff0:	232b      	movmi	r3, #43	; 0x2b
 8003ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffc:	d015      	beq.n	800402a <_svfiprintf_r+0xf6>
 8003ffe:	9a07      	ldr	r2, [sp, #28]
 8004000:	4654      	mov	r4, sl
 8004002:	2000      	movs	r0, #0
 8004004:	f04f 0c0a 	mov.w	ip, #10
 8004008:	4621      	mov	r1, r4
 800400a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800400e:	3b30      	subs	r3, #48	; 0x30
 8004010:	2b09      	cmp	r3, #9
 8004012:	d94d      	bls.n	80040b0 <_svfiprintf_r+0x17c>
 8004014:	b1b0      	cbz	r0, 8004044 <_svfiprintf_r+0x110>
 8004016:	9207      	str	r2, [sp, #28]
 8004018:	e014      	b.n	8004044 <_svfiprintf_r+0x110>
 800401a:	eba0 0308 	sub.w	r3, r0, r8
 800401e:	fa09 f303 	lsl.w	r3, r9, r3
 8004022:	4313      	orrs	r3, r2
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	46a2      	mov	sl, r4
 8004028:	e7d2      	b.n	8003fd0 <_svfiprintf_r+0x9c>
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	1d19      	adds	r1, r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	9103      	str	r1, [sp, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfbb      	ittet	lt
 8004036:	425b      	neglt	r3, r3
 8004038:	f042 0202 	orrlt.w	r2, r2, #2
 800403c:	9307      	strge	r3, [sp, #28]
 800403e:	9307      	strlt	r3, [sp, #28]
 8004040:	bfb8      	it	lt
 8004042:	9204      	strlt	r2, [sp, #16]
 8004044:	7823      	ldrb	r3, [r4, #0]
 8004046:	2b2e      	cmp	r3, #46	; 0x2e
 8004048:	d10c      	bne.n	8004064 <_svfiprintf_r+0x130>
 800404a:	7863      	ldrb	r3, [r4, #1]
 800404c:	2b2a      	cmp	r3, #42	; 0x2a
 800404e:	d134      	bne.n	80040ba <_svfiprintf_r+0x186>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	9203      	str	r2, [sp, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfb8      	it	lt
 800405c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004060:	3402      	adds	r4, #2
 8004062:	9305      	str	r3, [sp, #20]
 8004064:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800412c <_svfiprintf_r+0x1f8>
 8004068:	7821      	ldrb	r1, [r4, #0]
 800406a:	2203      	movs	r2, #3
 800406c:	4650      	mov	r0, sl
 800406e:	f7fc f8b7 	bl	80001e0 <memchr>
 8004072:	b138      	cbz	r0, 8004084 <_svfiprintf_r+0x150>
 8004074:	9b04      	ldr	r3, [sp, #16]
 8004076:	eba0 000a 	sub.w	r0, r0, sl
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	4082      	lsls	r2, r0
 800407e:	4313      	orrs	r3, r2
 8004080:	3401      	adds	r4, #1
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004088:	4825      	ldr	r0, [pc, #148]	; (8004120 <_svfiprintf_r+0x1ec>)
 800408a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800408e:	2206      	movs	r2, #6
 8004090:	f7fc f8a6 	bl	80001e0 <memchr>
 8004094:	2800      	cmp	r0, #0
 8004096:	d038      	beq.n	800410a <_svfiprintf_r+0x1d6>
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <_svfiprintf_r+0x1f0>)
 800409a:	bb1b      	cbnz	r3, 80040e4 <_svfiprintf_r+0x1b0>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	3307      	adds	r3, #7
 80040a0:	f023 0307 	bic.w	r3, r3, #7
 80040a4:	3308      	adds	r3, #8
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040aa:	4433      	add	r3, r6
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
 80040ae:	e768      	b.n	8003f82 <_svfiprintf_r+0x4e>
 80040b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b4:	460c      	mov	r4, r1
 80040b6:	2001      	movs	r0, #1
 80040b8:	e7a6      	b.n	8004008 <_svfiprintf_r+0xd4>
 80040ba:	2300      	movs	r3, #0
 80040bc:	3401      	adds	r4, #1
 80040be:	9305      	str	r3, [sp, #20]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f04f 0c0a 	mov.w	ip, #10
 80040c6:	4620      	mov	r0, r4
 80040c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040cc:	3a30      	subs	r2, #48	; 0x30
 80040ce:	2a09      	cmp	r2, #9
 80040d0:	d903      	bls.n	80040da <_svfiprintf_r+0x1a6>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c6      	beq.n	8004064 <_svfiprintf_r+0x130>
 80040d6:	9105      	str	r1, [sp, #20]
 80040d8:	e7c4      	b.n	8004064 <_svfiprintf_r+0x130>
 80040da:	fb0c 2101 	mla	r1, ip, r1, r2
 80040de:	4604      	mov	r4, r0
 80040e0:	2301      	movs	r3, #1
 80040e2:	e7f0      	b.n	80040c6 <_svfiprintf_r+0x192>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	462a      	mov	r2, r5
 80040ea:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <_svfiprintf_r+0x1f4>)
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	4638      	mov	r0, r7
 80040f0:	f3af 8000 	nop.w
 80040f4:	1c42      	adds	r2, r0, #1
 80040f6:	4606      	mov	r6, r0
 80040f8:	d1d6      	bne.n	80040a8 <_svfiprintf_r+0x174>
 80040fa:	89ab      	ldrh	r3, [r5, #12]
 80040fc:	065b      	lsls	r3, r3, #25
 80040fe:	f53f af2d 	bmi.w	8003f5c <_svfiprintf_r+0x28>
 8004102:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004104:	b01d      	add	sp, #116	; 0x74
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	ab03      	add	r3, sp, #12
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	462a      	mov	r2, r5
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <_svfiprintf_r+0x1f4>)
 8004112:	a904      	add	r1, sp, #16
 8004114:	4638      	mov	r0, r7
 8004116:	f000 f919 	bl	800434c <_printf_i>
 800411a:	e7eb      	b.n	80040f4 <_svfiprintf_r+0x1c0>
 800411c:	0800479c 	.word	0x0800479c
 8004120:	080047a6 	.word	0x080047a6
 8004124:	00000000 	.word	0x00000000
 8004128:	08003e81 	.word	0x08003e81
 800412c:	080047a2 	.word	0x080047a2

08004130 <sbrk_aligned>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4e0e      	ldr	r6, [pc, #56]	; (800416c <sbrk_aligned+0x3c>)
 8004134:	460c      	mov	r4, r1
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	4605      	mov	r5, r0
 800413a:	b911      	cbnz	r1, 8004142 <sbrk_aligned+0x12>
 800413c:	f000 fa7e 	bl	800463c <_sbrk_r>
 8004140:	6030      	str	r0, [r6, #0]
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 fa79 	bl	800463c <_sbrk_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d00a      	beq.n	8004164 <sbrk_aligned+0x34>
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d007      	beq.n	8004168 <sbrk_aligned+0x38>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fa6e 	bl	800463c <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d101      	bne.n	8004168 <sbrk_aligned+0x38>
 8004164:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004168:	4620      	mov	r0, r4
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	200002b0 	.word	0x200002b0

08004170 <_malloc_r>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	1ccd      	adds	r5, r1, #3
 8004176:	f025 0503 	bic.w	r5, r5, #3
 800417a:	3508      	adds	r5, #8
 800417c:	2d0c      	cmp	r5, #12
 800417e:	bf38      	it	cc
 8004180:	250c      	movcc	r5, #12
 8004182:	2d00      	cmp	r5, #0
 8004184:	4607      	mov	r7, r0
 8004186:	db01      	blt.n	800418c <_malloc_r+0x1c>
 8004188:	42a9      	cmp	r1, r5
 800418a:	d905      	bls.n	8004198 <_malloc_r+0x28>
 800418c:	230c      	movs	r3, #12
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	2600      	movs	r6, #0
 8004192:	4630      	mov	r0, r6
 8004194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800426c <_malloc_r+0xfc>
 800419c:	f000 f9f8 	bl	8004590 <__malloc_lock>
 80041a0:	f8d8 3000 	ldr.w	r3, [r8]
 80041a4:	461c      	mov	r4, r3
 80041a6:	bb5c      	cbnz	r4, 8004200 <_malloc_r+0x90>
 80041a8:	4629      	mov	r1, r5
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ffc0 	bl	8004130 <sbrk_aligned>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	4604      	mov	r4, r0
 80041b4:	d155      	bne.n	8004262 <_malloc_r+0xf2>
 80041b6:	f8d8 4000 	ldr.w	r4, [r8]
 80041ba:	4626      	mov	r6, r4
 80041bc:	2e00      	cmp	r6, #0
 80041be:	d145      	bne.n	800424c <_malloc_r+0xdc>
 80041c0:	2c00      	cmp	r4, #0
 80041c2:	d048      	beq.n	8004256 <_malloc_r+0xe6>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	4631      	mov	r1, r6
 80041c8:	4638      	mov	r0, r7
 80041ca:	eb04 0903 	add.w	r9, r4, r3
 80041ce:	f000 fa35 	bl	800463c <_sbrk_r>
 80041d2:	4581      	cmp	r9, r0
 80041d4:	d13f      	bne.n	8004256 <_malloc_r+0xe6>
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	1a6d      	subs	r5, r5, r1
 80041da:	4629      	mov	r1, r5
 80041dc:	4638      	mov	r0, r7
 80041de:	f7ff ffa7 	bl	8004130 <sbrk_aligned>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d037      	beq.n	8004256 <_malloc_r+0xe6>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	442b      	add	r3, r5
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	f8d8 3000 	ldr.w	r3, [r8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d038      	beq.n	8004266 <_malloc_r+0xf6>
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	42a2      	cmp	r2, r4
 80041f8:	d12b      	bne.n	8004252 <_malloc_r+0xe2>
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e00f      	b.n	8004220 <_malloc_r+0xb0>
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	1b52      	subs	r2, r2, r5
 8004204:	d41f      	bmi.n	8004246 <_malloc_r+0xd6>
 8004206:	2a0b      	cmp	r2, #11
 8004208:	d917      	bls.n	800423a <_malloc_r+0xca>
 800420a:	1961      	adds	r1, r4, r5
 800420c:	42a3      	cmp	r3, r4
 800420e:	6025      	str	r5, [r4, #0]
 8004210:	bf18      	it	ne
 8004212:	6059      	strne	r1, [r3, #4]
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	bf08      	it	eq
 8004218:	f8c8 1000 	streq.w	r1, [r8]
 800421c:	5162      	str	r2, [r4, r5]
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	4638      	mov	r0, r7
 8004222:	f104 060b 	add.w	r6, r4, #11
 8004226:	f000 f9b9 	bl	800459c <__malloc_unlock>
 800422a:	f026 0607 	bic.w	r6, r6, #7
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	1af2      	subs	r2, r6, r3
 8004232:	d0ae      	beq.n	8004192 <_malloc_r+0x22>
 8004234:	1b9b      	subs	r3, r3, r6
 8004236:	50a3      	str	r3, [r4, r2]
 8004238:	e7ab      	b.n	8004192 <_malloc_r+0x22>
 800423a:	42a3      	cmp	r3, r4
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	d1dd      	bne.n	80041fc <_malloc_r+0x8c>
 8004240:	f8c8 2000 	str.w	r2, [r8]
 8004244:	e7ec      	b.n	8004220 <_malloc_r+0xb0>
 8004246:	4623      	mov	r3, r4
 8004248:	6864      	ldr	r4, [r4, #4]
 800424a:	e7ac      	b.n	80041a6 <_malloc_r+0x36>
 800424c:	4634      	mov	r4, r6
 800424e:	6876      	ldr	r6, [r6, #4]
 8004250:	e7b4      	b.n	80041bc <_malloc_r+0x4c>
 8004252:	4613      	mov	r3, r2
 8004254:	e7cc      	b.n	80041f0 <_malloc_r+0x80>
 8004256:	230c      	movs	r3, #12
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4638      	mov	r0, r7
 800425c:	f000 f99e 	bl	800459c <__malloc_unlock>
 8004260:	e797      	b.n	8004192 <_malloc_r+0x22>
 8004262:	6025      	str	r5, [r4, #0]
 8004264:	e7dc      	b.n	8004220 <_malloc_r+0xb0>
 8004266:	605b      	str	r3, [r3, #4]
 8004268:	deff      	udf	#255	; 0xff
 800426a:	bf00      	nop
 800426c:	200002ac 	.word	0x200002ac

08004270 <_printf_common>:
 8004270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	4616      	mov	r6, r2
 8004276:	4699      	mov	r9, r3
 8004278:	688a      	ldr	r2, [r1, #8]
 800427a:	690b      	ldr	r3, [r1, #16]
 800427c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004280:	4293      	cmp	r3, r2
 8004282:	bfb8      	it	lt
 8004284:	4613      	movlt	r3, r2
 8004286:	6033      	str	r3, [r6, #0]
 8004288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800428c:	4607      	mov	r7, r0
 800428e:	460c      	mov	r4, r1
 8004290:	b10a      	cbz	r2, 8004296 <_printf_common+0x26>
 8004292:	3301      	adds	r3, #1
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	0699      	lsls	r1, r3, #26
 800429a:	bf42      	ittt	mi
 800429c:	6833      	ldrmi	r3, [r6, #0]
 800429e:	3302      	addmi	r3, #2
 80042a0:	6033      	strmi	r3, [r6, #0]
 80042a2:	6825      	ldr	r5, [r4, #0]
 80042a4:	f015 0506 	ands.w	r5, r5, #6
 80042a8:	d106      	bne.n	80042b8 <_printf_common+0x48>
 80042aa:	f104 0a19 	add.w	sl, r4, #25
 80042ae:	68e3      	ldr	r3, [r4, #12]
 80042b0:	6832      	ldr	r2, [r6, #0]
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	42ab      	cmp	r3, r5
 80042b6:	dc26      	bgt.n	8004306 <_printf_common+0x96>
 80042b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042bc:	1e13      	subs	r3, r2, #0
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	bf18      	it	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	0692      	lsls	r2, r2, #26
 80042c6:	d42b      	bmi.n	8004320 <_printf_common+0xb0>
 80042c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042cc:	4649      	mov	r1, r9
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c0      	blx	r8
 80042d2:	3001      	adds	r0, #1
 80042d4:	d01e      	beq.n	8004314 <_printf_common+0xa4>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	6922      	ldr	r2, [r4, #16]
 80042da:	f003 0306 	and.w	r3, r3, #6
 80042de:	2b04      	cmp	r3, #4
 80042e0:	bf02      	ittt	eq
 80042e2:	68e5      	ldreq	r5, [r4, #12]
 80042e4:	6833      	ldreq	r3, [r6, #0]
 80042e6:	1aed      	subeq	r5, r5, r3
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	bf0c      	ite	eq
 80042ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f0:	2500      	movne	r5, #0
 80042f2:	4293      	cmp	r3, r2
 80042f4:	bfc4      	itt	gt
 80042f6:	1a9b      	subgt	r3, r3, r2
 80042f8:	18ed      	addgt	r5, r5, r3
 80042fa:	2600      	movs	r6, #0
 80042fc:	341a      	adds	r4, #26
 80042fe:	42b5      	cmp	r5, r6
 8004300:	d11a      	bne.n	8004338 <_printf_common+0xc8>
 8004302:	2000      	movs	r0, #0
 8004304:	e008      	b.n	8004318 <_printf_common+0xa8>
 8004306:	2301      	movs	r3, #1
 8004308:	4652      	mov	r2, sl
 800430a:	4649      	mov	r1, r9
 800430c:	4638      	mov	r0, r7
 800430e:	47c0      	blx	r8
 8004310:	3001      	adds	r0, #1
 8004312:	d103      	bne.n	800431c <_printf_common+0xac>
 8004314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431c:	3501      	adds	r5, #1
 800431e:	e7c6      	b.n	80042ae <_printf_common+0x3e>
 8004320:	18e1      	adds	r1, r4, r3
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	2030      	movs	r0, #48	; 0x30
 8004326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800432a:	4422      	add	r2, r4
 800432c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004334:	3302      	adds	r3, #2
 8004336:	e7c7      	b.n	80042c8 <_printf_common+0x58>
 8004338:	2301      	movs	r3, #1
 800433a:	4622      	mov	r2, r4
 800433c:	4649      	mov	r1, r9
 800433e:	4638      	mov	r0, r7
 8004340:	47c0      	blx	r8
 8004342:	3001      	adds	r0, #1
 8004344:	d0e6      	beq.n	8004314 <_printf_common+0xa4>
 8004346:	3601      	adds	r6, #1
 8004348:	e7d9      	b.n	80042fe <_printf_common+0x8e>
	...

0800434c <_printf_i>:
 800434c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	7e0f      	ldrb	r7, [r1, #24]
 8004352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004354:	2f78      	cmp	r7, #120	; 0x78
 8004356:	4691      	mov	r9, r2
 8004358:	4680      	mov	r8, r0
 800435a:	460c      	mov	r4, r1
 800435c:	469a      	mov	sl, r3
 800435e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004362:	d807      	bhi.n	8004374 <_printf_i+0x28>
 8004364:	2f62      	cmp	r7, #98	; 0x62
 8004366:	d80a      	bhi.n	800437e <_printf_i+0x32>
 8004368:	2f00      	cmp	r7, #0
 800436a:	f000 80d4 	beq.w	8004516 <_printf_i+0x1ca>
 800436e:	2f58      	cmp	r7, #88	; 0x58
 8004370:	f000 80c0 	beq.w	80044f4 <_printf_i+0x1a8>
 8004374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800437c:	e03a      	b.n	80043f4 <_printf_i+0xa8>
 800437e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004382:	2b15      	cmp	r3, #21
 8004384:	d8f6      	bhi.n	8004374 <_printf_i+0x28>
 8004386:	a101      	add	r1, pc, #4	; (adr r1, 800438c <_printf_i+0x40>)
 8004388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043f9 	.word	0x080043f9
 8004394:	08004375 	.word	0x08004375
 8004398:	08004375 	.word	0x08004375
 800439c:	08004375 	.word	0x08004375
 80043a0:	08004375 	.word	0x08004375
 80043a4:	080043f9 	.word	0x080043f9
 80043a8:	08004375 	.word	0x08004375
 80043ac:	08004375 	.word	0x08004375
 80043b0:	08004375 	.word	0x08004375
 80043b4:	08004375 	.word	0x08004375
 80043b8:	080044fd 	.word	0x080044fd
 80043bc:	08004425 	.word	0x08004425
 80043c0:	080044b7 	.word	0x080044b7
 80043c4:	08004375 	.word	0x08004375
 80043c8:	08004375 	.word	0x08004375
 80043cc:	0800451f 	.word	0x0800451f
 80043d0:	08004375 	.word	0x08004375
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004375 	.word	0x08004375
 80043dc:	08004375 	.word	0x08004375
 80043e0:	080044bf 	.word	0x080044bf
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	602a      	str	r2, [r5, #0]
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f4:	2301      	movs	r3, #1
 80043f6:	e09f      	b.n	8004538 <_printf_i+0x1ec>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	0607      	lsls	r7, r0, #24
 80043fe:	f103 0104 	add.w	r1, r3, #4
 8004402:	6029      	str	r1, [r5, #0]
 8004404:	d501      	bpl.n	800440a <_printf_i+0xbe>
 8004406:	681e      	ldr	r6, [r3, #0]
 8004408:	e003      	b.n	8004412 <_printf_i+0xc6>
 800440a:	0646      	lsls	r6, r0, #25
 800440c:	d5fb      	bpl.n	8004406 <_printf_i+0xba>
 800440e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004412:	2e00      	cmp	r6, #0
 8004414:	da03      	bge.n	800441e <_printf_i+0xd2>
 8004416:	232d      	movs	r3, #45	; 0x2d
 8004418:	4276      	negs	r6, r6
 800441a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800441e:	485a      	ldr	r0, [pc, #360]	; (8004588 <_printf_i+0x23c>)
 8004420:	230a      	movs	r3, #10
 8004422:	e012      	b.n	800444a <_printf_i+0xfe>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	1d19      	adds	r1, r3, #4
 800442a:	6029      	str	r1, [r5, #0]
 800442c:	0605      	lsls	r5, r0, #24
 800442e:	d501      	bpl.n	8004434 <_printf_i+0xe8>
 8004430:	681e      	ldr	r6, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0xee>
 8004434:	0641      	lsls	r1, r0, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0xe4>
 8004438:	881e      	ldrh	r6, [r3, #0]
 800443a:	4853      	ldr	r0, [pc, #332]	; (8004588 <_printf_i+0x23c>)
 800443c:	2f6f      	cmp	r7, #111	; 0x6f
 800443e:	bf0c      	ite	eq
 8004440:	2308      	moveq	r3, #8
 8004442:	230a      	movne	r3, #10
 8004444:	2100      	movs	r1, #0
 8004446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800444a:	6865      	ldr	r5, [r4, #4]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	2d00      	cmp	r5, #0
 8004450:	bfa2      	ittt	ge
 8004452:	6821      	ldrge	r1, [r4, #0]
 8004454:	f021 0104 	bicge.w	r1, r1, #4
 8004458:	6021      	strge	r1, [r4, #0]
 800445a:	b90e      	cbnz	r6, 8004460 <_printf_i+0x114>
 800445c:	2d00      	cmp	r5, #0
 800445e:	d04b      	beq.n	80044f8 <_printf_i+0x1ac>
 8004460:	4615      	mov	r5, r2
 8004462:	fbb6 f1f3 	udiv	r1, r6, r3
 8004466:	fb03 6711 	mls	r7, r3, r1, r6
 800446a:	5dc7      	ldrb	r7, [r0, r7]
 800446c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004470:	4637      	mov	r7, r6
 8004472:	42bb      	cmp	r3, r7
 8004474:	460e      	mov	r6, r1
 8004476:	d9f4      	bls.n	8004462 <_printf_i+0x116>
 8004478:	2b08      	cmp	r3, #8
 800447a:	d10b      	bne.n	8004494 <_printf_i+0x148>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	07de      	lsls	r6, r3, #31
 8004480:	d508      	bpl.n	8004494 <_printf_i+0x148>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	6861      	ldr	r1, [r4, #4]
 8004486:	4299      	cmp	r1, r3
 8004488:	bfde      	ittt	le
 800448a:	2330      	movle	r3, #48	; 0x30
 800448c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004494:	1b52      	subs	r2, r2, r5
 8004496:	6122      	str	r2, [r4, #16]
 8004498:	f8cd a000 	str.w	sl, [sp]
 800449c:	464b      	mov	r3, r9
 800449e:	aa03      	add	r2, sp, #12
 80044a0:	4621      	mov	r1, r4
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7ff fee4 	bl	8004270 <_printf_common>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d14a      	bne.n	8004542 <_printf_i+0x1f6>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b0:	b004      	add	sp, #16
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f043 0320 	orr.w	r3, r3, #32
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	4833      	ldr	r0, [pc, #204]	; (800458c <_printf_i+0x240>)
 80044c0:	2778      	movs	r7, #120	; 0x78
 80044c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	6829      	ldr	r1, [r5, #0]
 80044ca:	061f      	lsls	r7, r3, #24
 80044cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80044d0:	d402      	bmi.n	80044d8 <_printf_i+0x18c>
 80044d2:	065f      	lsls	r7, r3, #25
 80044d4:	bf48      	it	mi
 80044d6:	b2b6      	uxthmi	r6, r6
 80044d8:	07df      	lsls	r7, r3, #31
 80044da:	bf48      	it	mi
 80044dc:	f043 0320 	orrmi.w	r3, r3, #32
 80044e0:	6029      	str	r1, [r5, #0]
 80044e2:	bf48      	it	mi
 80044e4:	6023      	strmi	r3, [r4, #0]
 80044e6:	b91e      	cbnz	r6, 80044f0 <_printf_i+0x1a4>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f023 0320 	bic.w	r3, r3, #32
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	2310      	movs	r3, #16
 80044f2:	e7a7      	b.n	8004444 <_printf_i+0xf8>
 80044f4:	4824      	ldr	r0, [pc, #144]	; (8004588 <_printf_i+0x23c>)
 80044f6:	e7e4      	b.n	80044c2 <_printf_i+0x176>
 80044f8:	4615      	mov	r5, r2
 80044fa:	e7bd      	b.n	8004478 <_printf_i+0x12c>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	6826      	ldr	r6, [r4, #0]
 8004500:	6961      	ldr	r1, [r4, #20]
 8004502:	1d18      	adds	r0, r3, #4
 8004504:	6028      	str	r0, [r5, #0]
 8004506:	0635      	lsls	r5, r6, #24
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	d501      	bpl.n	8004510 <_printf_i+0x1c4>
 800450c:	6019      	str	r1, [r3, #0]
 800450e:	e002      	b.n	8004516 <_printf_i+0x1ca>
 8004510:	0670      	lsls	r0, r6, #25
 8004512:	d5fb      	bpl.n	800450c <_printf_i+0x1c0>
 8004514:	8019      	strh	r1, [r3, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	4615      	mov	r5, r2
 800451c:	e7bc      	b.n	8004498 <_printf_i+0x14c>
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	602a      	str	r2, [r5, #0]
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	2100      	movs	r1, #0
 800452a:	4628      	mov	r0, r5
 800452c:	f7fb fe58 	bl	80001e0 <memchr>
 8004530:	b108      	cbz	r0, 8004536 <_printf_i+0x1ea>
 8004532:	1b40      	subs	r0, r0, r5
 8004534:	6060      	str	r0, [r4, #4]
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	2300      	movs	r3, #0
 800453c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004540:	e7aa      	b.n	8004498 <_printf_i+0x14c>
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	462a      	mov	r2, r5
 8004546:	4649      	mov	r1, r9
 8004548:	4640      	mov	r0, r8
 800454a:	47d0      	blx	sl
 800454c:	3001      	adds	r0, #1
 800454e:	d0ad      	beq.n	80044ac <_printf_i+0x160>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	079b      	lsls	r3, r3, #30
 8004554:	d413      	bmi.n	800457e <_printf_i+0x232>
 8004556:	68e0      	ldr	r0, [r4, #12]
 8004558:	9b03      	ldr	r3, [sp, #12]
 800455a:	4298      	cmp	r0, r3
 800455c:	bfb8      	it	lt
 800455e:	4618      	movlt	r0, r3
 8004560:	e7a6      	b.n	80044b0 <_printf_i+0x164>
 8004562:	2301      	movs	r3, #1
 8004564:	4632      	mov	r2, r6
 8004566:	4649      	mov	r1, r9
 8004568:	4640      	mov	r0, r8
 800456a:	47d0      	blx	sl
 800456c:	3001      	adds	r0, #1
 800456e:	d09d      	beq.n	80044ac <_printf_i+0x160>
 8004570:	3501      	adds	r5, #1
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	9903      	ldr	r1, [sp, #12]
 8004576:	1a5b      	subs	r3, r3, r1
 8004578:	42ab      	cmp	r3, r5
 800457a:	dcf2      	bgt.n	8004562 <_printf_i+0x216>
 800457c:	e7eb      	b.n	8004556 <_printf_i+0x20a>
 800457e:	2500      	movs	r5, #0
 8004580:	f104 0619 	add.w	r6, r4, #25
 8004584:	e7f5      	b.n	8004572 <_printf_i+0x226>
 8004586:	bf00      	nop
 8004588:	080047ad 	.word	0x080047ad
 800458c:	080047be 	.word	0x080047be

08004590 <__malloc_lock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_lock+0x8>)
 8004592:	f7ff bc73 	b.w	8003e7c <__retarget_lock_acquire_recursive>
 8004596:	bf00      	nop
 8004598:	200002a8 	.word	0x200002a8

0800459c <__malloc_unlock>:
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <__malloc_unlock+0x8>)
 800459e:	f7ff bc6e 	b.w	8003e7e <__retarget_lock_release_recursive>
 80045a2:	bf00      	nop
 80045a4:	200002a8 	.word	0x200002a8

080045a8 <_realloc_r>:
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4680      	mov	r8, r0
 80045ae:	4614      	mov	r4, r2
 80045b0:	460e      	mov	r6, r1
 80045b2:	b921      	cbnz	r1, 80045be <_realloc_r+0x16>
 80045b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4611      	mov	r1, r2
 80045ba:	f7ff bdd9 	b.w	8004170 <_malloc_r>
 80045be:	b92a      	cbnz	r2, 80045cc <_realloc_r+0x24>
 80045c0:	f000 f85a 	bl	8004678 <_free_r>
 80045c4:	4625      	mov	r5, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	f000 f8a0 	bl	8004710 <_malloc_usable_size_r>
 80045d0:	4284      	cmp	r4, r0
 80045d2:	4607      	mov	r7, r0
 80045d4:	d802      	bhi.n	80045dc <_realloc_r+0x34>
 80045d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045da:	d812      	bhi.n	8004602 <_realloc_r+0x5a>
 80045dc:	4621      	mov	r1, r4
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff fdc6 	bl	8004170 <_malloc_r>
 80045e4:	4605      	mov	r5, r0
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ed      	beq.n	80045c6 <_realloc_r+0x1e>
 80045ea:	42bc      	cmp	r4, r7
 80045ec:	4622      	mov	r2, r4
 80045ee:	4631      	mov	r1, r6
 80045f0:	bf28      	it	cs
 80045f2:	463a      	movcs	r2, r7
 80045f4:	f000 f832 	bl	800465c <memcpy>
 80045f8:	4631      	mov	r1, r6
 80045fa:	4640      	mov	r0, r8
 80045fc:	f000 f83c 	bl	8004678 <_free_r>
 8004600:	e7e1      	b.n	80045c6 <_realloc_r+0x1e>
 8004602:	4635      	mov	r5, r6
 8004604:	e7df      	b.n	80045c6 <_realloc_r+0x1e>

08004606 <memmove>:
 8004606:	4288      	cmp	r0, r1
 8004608:	b510      	push	{r4, lr}
 800460a:	eb01 0402 	add.w	r4, r1, r2
 800460e:	d902      	bls.n	8004616 <memmove+0x10>
 8004610:	4284      	cmp	r4, r0
 8004612:	4623      	mov	r3, r4
 8004614:	d807      	bhi.n	8004626 <memmove+0x20>
 8004616:	1e43      	subs	r3, r0, #1
 8004618:	42a1      	cmp	r1, r4
 800461a:	d008      	beq.n	800462e <memmove+0x28>
 800461c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004620:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004624:	e7f8      	b.n	8004618 <memmove+0x12>
 8004626:	4402      	add	r2, r0
 8004628:	4601      	mov	r1, r0
 800462a:	428a      	cmp	r2, r1
 800462c:	d100      	bne.n	8004630 <memmove+0x2a>
 800462e:	bd10      	pop	{r4, pc}
 8004630:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004634:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004638:	e7f7      	b.n	800462a <memmove+0x24>
	...

0800463c <_sbrk_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d06      	ldr	r5, [pc, #24]	; (8004658 <_sbrk_r+0x1c>)
 8004640:	2300      	movs	r3, #0
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f7fc fab4 	bl	8000bb4 <_sbrk>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_sbrk_r+0x1a>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b103      	cbz	r3, 8004656 <_sbrk_r+0x1a>
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	200002b4 	.word	0x200002b4

0800465c <memcpy>:
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004664:	d100      	bne.n	8004668 <memcpy+0xc>
 8004666:	4770      	bx	lr
 8004668:	b510      	push	{r4, lr}
 800466a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004672:	4291      	cmp	r1, r2
 8004674:	d1f9      	bne.n	800466a <memcpy+0xe>
 8004676:	bd10      	pop	{r4, pc}

08004678 <_free_r>:
 8004678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800467a:	2900      	cmp	r1, #0
 800467c:	d044      	beq.n	8004708 <_free_r+0x90>
 800467e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004682:	9001      	str	r0, [sp, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f1a1 0404 	sub.w	r4, r1, #4
 800468a:	bfb8      	it	lt
 800468c:	18e4      	addlt	r4, r4, r3
 800468e:	f7ff ff7f 	bl	8004590 <__malloc_lock>
 8004692:	4a1e      	ldr	r2, [pc, #120]	; (800470c <_free_r+0x94>)
 8004694:	9801      	ldr	r0, [sp, #4]
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	b933      	cbnz	r3, 80046a8 <_free_r+0x30>
 800469a:	6063      	str	r3, [r4, #4]
 800469c:	6014      	str	r4, [r2, #0]
 800469e:	b003      	add	sp, #12
 80046a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046a4:	f7ff bf7a 	b.w	800459c <__malloc_unlock>
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	d908      	bls.n	80046be <_free_r+0x46>
 80046ac:	6825      	ldr	r5, [r4, #0]
 80046ae:	1961      	adds	r1, r4, r5
 80046b0:	428b      	cmp	r3, r1
 80046b2:	bf01      	itttt	eq
 80046b4:	6819      	ldreq	r1, [r3, #0]
 80046b6:	685b      	ldreq	r3, [r3, #4]
 80046b8:	1949      	addeq	r1, r1, r5
 80046ba:	6021      	streq	r1, [r4, #0]
 80046bc:	e7ed      	b.n	800469a <_free_r+0x22>
 80046be:	461a      	mov	r2, r3
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b10b      	cbz	r3, 80046c8 <_free_r+0x50>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d9fa      	bls.n	80046be <_free_r+0x46>
 80046c8:	6811      	ldr	r1, [r2, #0]
 80046ca:	1855      	adds	r5, r2, r1
 80046cc:	42a5      	cmp	r5, r4
 80046ce:	d10b      	bne.n	80046e8 <_free_r+0x70>
 80046d0:	6824      	ldr	r4, [r4, #0]
 80046d2:	4421      	add	r1, r4
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	d1e0      	bne.n	800469e <_free_r+0x26>
 80046dc:	681c      	ldr	r4, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6053      	str	r3, [r2, #4]
 80046e2:	440c      	add	r4, r1
 80046e4:	6014      	str	r4, [r2, #0]
 80046e6:	e7da      	b.n	800469e <_free_r+0x26>
 80046e8:	d902      	bls.n	80046f0 <_free_r+0x78>
 80046ea:	230c      	movs	r3, #12
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	e7d6      	b.n	800469e <_free_r+0x26>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf04      	itt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	bf04      	itt	eq
 8004700:	1949      	addeq	r1, r1, r5
 8004702:	6021      	streq	r1, [r4, #0]
 8004704:	6054      	str	r4, [r2, #4]
 8004706:	e7ca      	b.n	800469e <_free_r+0x26>
 8004708:	b003      	add	sp, #12
 800470a:	bd30      	pop	{r4, r5, pc}
 800470c:	200002ac 	.word	0x200002ac

08004710 <_malloc_usable_size_r>:
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f18      	subs	r0, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfbc      	itt	lt
 800471a:	580b      	ldrlt	r3, [r1, r0]
 800471c:	18c0      	addlt	r0, r0, r3
 800471e:	4770      	bx	lr

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
