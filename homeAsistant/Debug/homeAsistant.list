
homeAsistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080051b4  080051b4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b4  080051b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  08005218  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005218  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012465  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c7  00000000  00000000  00032534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1a  00000000  00000000  00035990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce95  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015775  00000000  00000000  0005353f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad66a  00000000  00000000  00068cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bb0  00000000  00000000  00116320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050ec 	.word	0x080050ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080050ec 	.word	0x080050ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800028e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800029a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800029c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800029e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80002a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002a2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f80e 	bl	80002d6 <Lcd_init>

	return lcd;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	461d      	mov	r5, r3
 80002be:	f107 0410 	add.w	r4, r7, #16
 80002c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80002ca:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}

080002d6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7d9b      	ldrb	r3, [r3, #22]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10c      	bne.n	8000300 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80002e6:	2133      	movs	r1, #51	; 0x33
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f86f 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80002ee:	2132      	movs	r1, #50	; 0x32
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f86b 	bl	80003cc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80002f6:	2128      	movs	r1, #40	; 0x28
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f867 	bl	80003cc <lcd_write_command>
 80002fe:	e003      	b.n	8000308 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000300:	2138      	movs	r1, #56	; 0x38
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 f862 	bl	80003cc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000308:	2101      	movs	r1, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f85e 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000310:	210c      	movs	r1, #12
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f85a 	bl	80003cc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000318:	2106      	movs	r1, #6
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f000 f856 	bl	80003cc <lcd_write_command>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	4906      	ldr	r1, [pc, #24]	; (8000354 <Lcd_int+0x2c>)
 800033a:	4618      	mov	r0, r3
 800033c:	f004 fa32 	bl	80047a4 <siprintf>

	Lcd_string(lcd, buffer);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f806 	bl	8000358 <Lcd_string>
}
 800034c:	bf00      	nop
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08005104 	.word	0x08005104

08000358 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e00a      	b.n	800037e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 f858 	bl	8000428 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3301      	adds	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	7bfc      	ldrb	r4, [r7, #15]
 8000380:	6838      	ldr	r0, [r7, #0]
 8000382:	f7ff ff25 	bl	80001d0 <strlen>
 8000386:	4603      	mov	r3, r0
 8000388:	429c      	cmp	r4, r3
 800038a:	d3ed      	bcc.n	8000368 <Lcd_string+0x10>
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
 80003a4:	4613      	mov	r3, r2
 80003a6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <Lcd_cursor+0x30>)
 80003ac:	5cd2      	ldrb	r2, [r2, r3]
 80003ae:	78bb      	ldrb	r3, [r7, #2]
 80003b0:	4413      	add	r3, r2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	3b80      	subs	r3, #128	; 0x80
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f806 	bl	80003cc <lcd_write_command>
	#endif
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	08005144 	.word	0x08005144

080003cc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6898      	ldr	r0, [r3, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	f001 fe72 	bl	80020cc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7d9b      	ldrb	r3, [r3, #22]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d111      	bne.n	8000414 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	091b      	lsrs	r3, r3, #4
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2204      	movs	r2, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f842 	bl	8000484 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	f003 030f 	and.w	r3, r3, #15
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2204      	movs	r2, #4
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f839 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000412:	e005      	b.n	8000420 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2208      	movs	r2, #8
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f832 	bl	8000484 <lcd_write>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6898      	ldr	r0, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	899b      	ldrh	r3, [r3, #12]
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	f001 fe44 	bl	80020cc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7d9b      	ldrb	r3, [r3, #22]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d111      	bne.n	8000470 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	091b      	lsrs	r3, r3, #4
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2204      	movs	r2, #4
 8000454:	4619      	mov	r1, r3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f814 	bl	8000484 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	f003 030f 	and.w	r3, r3, #15
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2204      	movs	r2, #4
 8000466:	4619      	mov	r1, r3
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f80b 	bl	8000484 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800046e:	e005      	b.n	800047c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2208      	movs	r2, #8
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f804 	bl	8000484 <lcd_write>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
 8000490:	4613      	mov	r3, r2
 8000492:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e019      	b.n	80004ce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	8819      	ldrh	r1, [r3, #0]
 80004b2:	78fa      	ldrb	r2, [r7, #3]
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	fa42 f303 	asr.w	r3, r2, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	f001 fe02 	bl	80020cc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	3301      	adds	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d3e1      	bcc.n	800049a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6918      	ldr	r0, [r3, #16]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	8a9b      	ldrh	r3, [r3, #20]
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	f001 fdf3 	bl	80020cc <HAL_GPIO_WritePin>
	DELAY(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fd20 	bl	8000f2c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6918      	ldr	r0, [r3, #16]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	8a9b      	ldrh	r3, [r3, #20]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4619      	mov	r1, r3
 80004f8:	f001 fde8 	bl	80020cc <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fca9 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8b3 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fa35 	bl	8000980 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f9af 	bl	8000878 <MX_TIM1_Init>
  MX_I2C1_Init();
 800051a:	f000 f96d 	bl	80007f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 800051e:	f000 f90f 	bl	8000740 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000522:	f000 f9fd 	bl	8000920 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start (&hadc1);

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOB, GPIOB };
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <main+0x14c>)
 8000528:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800052c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_15, GPIO_PIN_14};
 8000532:	4a48      	ldr	r2, [pc, #288]	; (8000654 <main+0x150>)
 8000534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053c:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000540:	4638      	mov	r0, r7
 8000542:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000546:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800054a:	2300      	movs	r3, #0
 800054c:	9303      	str	r3, [sp, #12]
 800054e:	2310      	movs	r3, #16
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	4b41      	ldr	r3, [pc, #260]	; (8000658 <main+0x154>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2320      	movs	r3, #32
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <main+0x154>)
 800055c:	f7ff fe90 	bl	8000280 <Lcd_create>
 8000560:	f107 0418 	add.w	r4, r7, #24
 8000564:	463d      	mov	r5, r7
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800056e:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd,0,0);
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff0c 	bl	8000398 <Lcd_cursor>
  Lcd_string(&lcd,"Ali ACAN");
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4935      	ldr	r1, [pc, #212]	; (800065c <main+0x158>)
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fee6 	bl	8000358 <Lcd_string>
  Lcd_cursor(&lcd,0,9);
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	2209      	movs	r2, #9
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feff 	bl	8000398 <Lcd_cursor>
  Lcd_string(&lcd,"PIR:");
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	4930      	ldr	r1, [pc, #192]	; (8000660 <main+0x15c>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fed9 	bl	8000358 <Lcd_string>
  Lcd_cursor(&lcd,1,0);
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fef2 	bl	8000398 <Lcd_cursor>
  Lcd_string(&lcd,"LIGHT:");
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	492a      	ldr	r1, [pc, #168]	; (8000664 <main+0x160>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fecc 	bl	8000358 <Lcd_string>

 // HAL_ADC_Start_DMA(&hadc1,adc_values, 2);
  HAL_ADC_Start(&hadc1);
 80005c0:	4829      	ldr	r0, [pc, #164]	; (8000668 <main+0x164>)
 80005c2:	f000 fe5d 	bl	8001280 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_PollForConversion (&hadc1,1000);
 80005c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ca:	4827      	ldr	r0, [pc, #156]	; (8000668 <main+0x164>)
 80005cc:	f000 fec6 	bl	800135c <HAL_ADC_PollForConversion>
	  	lightValue = HAL_ADC_GetValue (&hadc1);
 80005d0:	4825      	ldr	r0, [pc, #148]	; (8000668 <main+0x164>)
 80005d2:	f000 ff81 	bl	80014d8 <HAL_ADC_GetValue>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a24      	ldr	r2, [pc, #144]	; (800066c <main+0x168>)
 80005da:	6013      	str	r3, [r2, #0]
	  	Lcd_cursor(&lcd,1,7);
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	2207      	movs	r2, #7
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fed7 	bl	8000398 <Lcd_cursor>
	  	Lcd_int(&lcd,lightValue);
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <main+0x168>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe96 	bl	8000328 <Lcd_int>

	  	Lcd_cursor(&lcd,0,13);
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	220d      	movs	r2, #13
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fec7 	bl	8000398 <Lcd_cursor>
	  	Lcd_string(&lcd,"OFF");
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4918      	ldr	r1, [pc, #96]	; (8000670 <main+0x16c>)
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fea1 	bl	8000358 <Lcd_string>

	  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) // if the pin is HIGH
 8000616:	2102      	movs	r1, #2
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 fd3e 	bl	800209c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d010      	beq.n	8000648 <main+0x144>
	  	  {
	  		 Lcd_cursor(&lcd,0,13);
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	220d      	movs	r2, #13
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff feb2 	bl	8000398 <Lcd_cursor>
	  		 Lcd_string(&lcd," ON");
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <main+0x170>)
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe8c 	bl	8000358 <Lcd_string>
	  		 HAL_Delay(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f000 fc72 	bl	8000f2c <HAL_Delay>
	  	  }


	  	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	; 0xfa
 800064a:	f000 fc6f 	bl	8000f2c <HAL_Delay>
	    HAL_ADC_PollForConversion (&hadc1,1000);
 800064e:	e7ba      	b.n	80005c6 <main+0xc2>
 8000650:	0800512c 	.word	0x0800512c
 8000654:	0800513c 	.word	0x0800513c
 8000658:	48000400 	.word	0x48000400
 800065c:	08005108 	.word	0x08005108
 8000660:	08005114 	.word	0x08005114
 8000664:	0800511c 	.word	0x0800511c
 8000668:	20000078 	.word	0x20000078
 800066c:	200001f0 	.word	0x200001f0
 8000670:	08005124 	.word	0x08005124
 8000674:	08005128 	.word	0x08005128

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	; 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000682:	2228      	movs	r2, #40	; 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 f8ac 	bl	80047e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f89e 	bl	80047e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a8:	2303      	movs	r3, #3
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe38 	bl	8002348 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006de:	f000 f9f7 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fe60 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 f9e1 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800070e:	f241 03a1 	movw	r3, #4257	; 0x10a1
 8000712:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f003 f881 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000734:	f000 f9cc 	bl	8000ad0 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	; 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000766:	2208      	movs	r2, #8
 8000768:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_ADC1_Init+0xb4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000772:	2201      	movs	r2, #1
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000786:	2201      	movs	r2, #1
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_ADC1_Init+0xb4>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000792:	2201      	movs	r2, #1
 8000794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_ADC1_Init+0xb4>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_ADC1_Init+0xb4>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_ADC1_Init+0xb4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ADC1_Init+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_ADC1_Init+0xb4>)
 80007b2:	f000 fbdf 	bl	8000f74 <HAL_ADC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80007bc:	f000 f988 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_ADC1_Init+0xb4>)
 80007de:	f000 fe89 	bl	80014f4 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 f972 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000078 	.word	0x20000078

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_I2C1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_I2C1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_I2C1_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <MX_I2C1_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_I2C1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <MX_I2C1_Init+0x74>)
 8000834:	f001 fc62 	bl	80020fc <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 f947 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_I2C1_Init+0x74>)
 8000846:	f001 fce8 	bl	800221a <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 f93e 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_I2C1_Init+0x74>)
 8000858:	f001 fd2a 	bl	80022b0 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 f935 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000c8 	.word	0x200000c8
 8000870:	40005400 	.word	0x40005400
 8000874:	2000090e 	.word	0x2000090e

08000878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_TIM1_Init+0xa0>)
 8000898:	4a20      	ldr	r2, [pc, #128]	; (800091c <MX_TIM1_Init+0xa4>)
 800089a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM1_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c2:	4815      	ldr	r0, [pc, #84]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008c4:	f003 f946 	bl	8003b54 <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008ce:	f000 f8ff 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_TIM1_Init+0xa0>)
 80008e0:	f003 f98f 	bl	8003c02 <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008ea:	f000 f8f1 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM1_Init+0xa0>)
 8000900:	f003 fb50 	bl	8003fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800090a:	f000 f8e1 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000011c 	.word	0x2000011c
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART1_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x58>)
 8000964:	f003 fb84 	bl	8004070 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f8af 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000168 	.word	0x20000168
 800097c:	40013800 	.word	0x40013800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a4a      	ldr	r2, [pc, #296]	; (8000ac4 <MX_GPIO_Init+0x144>)
 800099c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b48      	ldr	r3, [pc, #288]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a44      	ldr	r2, [pc, #272]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a3e      	ldr	r2, [pc, #248]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <MX_GPIO_Init+0x144>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 fb65 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8000a02:	2200      	movs	r2, #0
 8000a04:	f24c 0170 	movw	r1, #49264	; 0xc070
 8000a08:	482f      	ldr	r0, [pc, #188]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000a0a:	f001 fb5f 	bl	80020cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	482e      	ldr	r0, [pc, #184]	; (8000acc <MX_GPIO_Init+0x14c>)
 8000a14:	f001 fb5a 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4827      	ldr	r0, [pc, #156]	; (8000acc <MX_GPIO_Init+0x14c>)
 8000a2e:	f001 f9c3 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 f9b6 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 f9a7 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8000a6a:	f24c 0370 	movw	r3, #49264	; 0xc070
 8000a6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000a84:	f001 f998 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x14c>)
 8000aa0:	f001 f98a 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000ab8:	f001 f97e 	bl	8001db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	48000800 	.word	0x48000800

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b44:	d124      	bne.n	8000b90 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 f914 	bl	8001db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_I2C_MspInit+0xb8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d145      	bne.n	8000c4a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f001 f8d3 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <HAL_I2C_MspInit+0xc0>)
 8000c2e:	f001 f8c3 	bl	8001db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0xbc>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_TIM_Base_MspInit+0x38>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10b      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x7c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d127      	bne.n	8000d12 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x80>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cf2:	2330      	movs	r3, #48	; 0x30
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x84>)
 8000d0e:	f001 f853 	bl	8001db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000800 	.word	0x48000800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f8ba 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f003 fd22 	bl	80047f4 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20004000 	.word	0x20004000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200001f4 	.word	0x200001f4
 8000de4:	20000348 	.word	0x20000348

08000de8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f003 fce1 	bl	8004800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3e:	f7ff fb61 	bl	8000504 <main>

08000e42 <LoopForever>:

LoopForever:
    b LoopForever
 8000e42:	e7fe      	b.n	8000e42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e44:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	20000344 	.word	0x20000344

08000e5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 ff6d 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe2e 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ff77 	bl	8001d9e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 ff4d 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200001f8 	.word	0x200001f8

08000f14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001f8 	.word	0x200001f8

08000f2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09a      	sub	sp, #104	; 0x68
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e169      	b.n	8001268 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d176      	bne.n	8001094 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d152      	bne.n	8001054 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fdab 	bl	8000b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d13b      	bne.n	8001054 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fd9f 	bl	8001b20 <ADC_Disable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d12f      	bne.n	8001054 <HAL_ADC_Init+0xe0>
 8000ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12b      	bne.n	8001054 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	f043 0202 	orr.w	r2, r3, #2
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800101e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_ADC_Init+0x2fc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a8f      	ldr	r2, [pc, #572]	; (8001274 <HAL_ADC_Init+0x300>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001046:	e002      	b.n	800104e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3b01      	subs	r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f9      	bne.n	8001048 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800106c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001070:	d110      	bne.n	8001094 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 0312 	bic.w	r3, r3, #18
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	f040 80d6 	bne.w	800124e <HAL_ADC_Init+0x2da>
 80010a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80d1 	bne.w	800124e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 80c9 	bne.w	800124e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010c4:	f043 0202 	orr.w	r2, r3, #2
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <HAL_ADC_Init+0x304>)
 80010ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_ADC_Init+0x180>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_ADC_Init+0x180>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_ADC_Init+0x182>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d11c      	bne.n	8001134 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010fa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d010      	beq.n	8001122 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <HAL_ADC_Init+0x1a8>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_Init+0x1a8>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_ADC_Init+0x1aa>
 800111c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800111e:	2b00      	cmp	r3, #0
 8001120:	d108      	bne.n	8001134 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	431a      	orrs	r2, r3
 8001130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001132:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e5b      	ldrb	r3, [r3, #25]
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800113e:	2a01      	cmp	r2, #1
 8001140:	d002      	beq.n	8001148 <HAL_ADC_Init+0x1d4>
 8001142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001146:	e000      	b.n	800114a <HAL_ADC_Init+0x1d6>
 8001148:	2200      	movs	r2, #0
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4313      	orrs	r3, r2
 8001158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800115a:	4313      	orrs	r3, r2
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d11b      	bne.n	80011a0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7e5b      	ldrb	r3, [r3, #25]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	3b01      	subs	r3, #1
 8001176:	045a      	lsls	r2, r3, #17
 8001178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800117a:	4313      	orrs	r3, r2
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
 8001182:	e00d      	b.n	80011a0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800118c:	f043 0220 	orr.w	r2, r3, #32
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d007      	beq.n	80011b8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	4313      	orrs	r3, r2
 80011b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b4:	4313      	orrs	r3, r2
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e1b      	ldrb	r3, [r3, #24]
 80011de:	039a      	lsls	r2, r3, #14
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ec:	4313      	orrs	r3, r2
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_ADC_Init+0x308>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001200:	430b      	orrs	r3, r1
 8001202:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10c      	bne.n	8001226 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f023 010f 	bic.w	r1, r3, #15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e007      	b.n	8001236 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 020f 	bic.w	r2, r2, #15
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f023 0303 	bic.w	r3, r3, #3
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
 800124c:	e00a      	b.n	8001264 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f023 0312 	bic.w	r3, r3, #18
 8001256:	f043 0210 	orr.w	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800125e:	2301      	movs	r3, #1
 8001260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001268:	4618      	mov	r0, r3
 800126a:	3768      	adds	r7, #104	; 0x68
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83
 8001278:	50000300 	.word	0x50000300
 800127c:	fff0c007 	.word	0xfff0c007

08001280 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d158      	bne.n	800134c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_Start+0x28>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e054      	b.n	8001352 <HAL_ADC_Start+0xd2>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fbd1 	bl	8001a58 <ADC_Enable>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d140      	bne.n	8001342 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800130a:	d106      	bne.n	800131a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f023 0206 	bic.w	r2, r3, #6
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
 8001318:	e002      	b.n	8001320 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	221c      	movs	r2, #28
 800132e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0204 	orr.w	r2, r2, #4
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e006      	b.n	8001350 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800134a:	e001      	b.n	8001350 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134c:	2302      	movs	r3, #2
 800134e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d102      	bne.n	8001378 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001372:	2308      	movs	r3, #8
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e02e      	b.n	80013d6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001378:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <HAL_ADC_PollForConversion+0x178>)
 800137a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2b00      	cmp	r3, #0
 8001386:	d112      	bne.n	80013ae <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d11d      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f043 0220 	orr.w	r2, r3, #32
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e08d      	b.n	80014ca <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f043 0220 	orr.w	r2, r3, #32
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e07b      	b.n	80014ca <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013d2:	230c      	movs	r3, #12
 80013d4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80013de:	f7ff fd99 	bl	8000f14 <HAL_GetTick>
 80013e2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013e4:	e021      	b.n	800142a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ec:	d01d      	beq.n	800142a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_ADC_PollForConversion+0xa8>
 80013f4:	f7ff fd8e 	bl	8000f14 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d212      	bcs.n	800142a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10b      	bne.n	800142a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0204 	orr.w	r2, r3, #4
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e04f      	b.n	80014ca <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0d6      	beq.n	80013e6 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800144e:	2b00      	cmp	r3, #0
 8001450:	d131      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001458:	2b00      	cmp	r3, #0
 800145a:	d12c      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b08      	cmp	r3, #8
 8001468:	d125      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d112      	bne.n	800149e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d112      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
 800149c:	e00b      	b.n	80014b6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f043 0220 	orr.w	r2, r3, #32
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	50000300 	.word	0x50000300

080014d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b09b      	sub	sp, #108	; 0x6c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x22>
 8001512:	2302      	movs	r3, #2
 8001514:	e295      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x54e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 8279 	bne.w	8001a20 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d81c      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	461a      	mov	r2, r3
 800154a:	231f      	movs	r3, #31
 800154c:	4093      	lsls	r3, r2
 800154e:	43db      	mvns	r3, r3
 8001550:	4019      	ands	r1, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	e063      	b.n	8001638 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d81e      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3b1e      	subs	r3, #30
 800158c:	221f      	movs	r2, #31
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	4019      	ands	r1, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	3b1e      	subs	r3, #30
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
 80015b4:	e040      	b.n	8001638 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b0e      	cmp	r3, #14
 80015bc:	d81e      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	3b3c      	subs	r3, #60	; 0x3c
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	4019      	ands	r1, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	3b3c      	subs	r3, #60	; 0x3c
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
 80015fa:	e01d      	b.n	8001638 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	3b5a      	subs	r3, #90	; 0x5a
 8001610:	221f      	movs	r2, #31
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	4019      	ands	r1, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	3b5a      	subs	r3, #90	; 0x5a
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80e5 	bne.w	8001812 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b09      	cmp	r3, #9
 800164e:	d91c      	bls.n	800168a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6999      	ldr	r1, [r3, #24]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	3b1e      	subs	r3, #30
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	4019      	ands	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6898      	ldr	r0, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	3b1e      	subs	r3, #30
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	619a      	str	r2, [r3, #24]
 8001688:	e019      	b.n	80016be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6959      	ldr	r1, [r3, #20]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	2207      	movs	r2, #7
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4019      	ands	r1, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6898      	ldr	r0, [r3, #8]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	fa00 f203 	lsl.w	r2, r0, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	3b01      	subs	r3, #1
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d84f      	bhi.n	8001780 <HAL_ADC_ConfigChannel+0x28c>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	0800171b 	.word	0x0800171b
 80016f0:	0800173d 	.word	0x0800173d
 80016f4:	0800175f 	.word	0x0800175f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_ADC_ConfigChannel+0x468>)
 8001700:	4013      	ands	r3, r2
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	0691      	lsls	r1, r2, #26
 8001708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170a:	430a      	orrs	r2, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001716:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001718:	e07b      	b.n	8001812 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001720:	4b8e      	ldr	r3, [pc, #568]	; (800195c <HAL_ADC_ConfigChannel+0x468>)
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	0691      	lsls	r1, r2, #26
 800172a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800172c:	430a      	orrs	r2, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001738:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800173a:	e06a      	b.n	8001812 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001742:	4b86      	ldr	r3, [pc, #536]	; (800195c <HAL_ADC_ConfigChannel+0x468>)
 8001744:	4013      	ands	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	0691      	lsls	r1, r2, #26
 800174c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800174e:	430a      	orrs	r2, r1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800175a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800175c:	e059      	b.n	8001812 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001764:	4b7d      	ldr	r3, [pc, #500]	; (800195c <HAL_ADC_ConfigChannel+0x468>)
 8001766:	4013      	ands	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	0691      	lsls	r1, r2, #26
 800176e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001770:	430a      	orrs	r2, r1
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800177c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800177e:	e048      	b.n	8001812 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	069b      	lsls	r3, r3, #26
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	069b      	lsls	r3, r3, #26
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	069b      	lsls	r3, r3, #26
 80017d8:	429a      	cmp	r2, r3
 80017da:	d107      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	069b      	lsls	r3, r3, #26
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800180e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001810:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x33e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x33e>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_ADC_ConfigChannel+0x340>
 8001832:	2300      	movs	r3, #0
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 80fe 	bne.w	8001a36 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d00f      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43da      	mvns	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	400a      	ands	r2, r1
 800185c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001860:	e049      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d91c      	bls.n	80018be <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6999      	ldr	r1, [r3, #24]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	3b1b      	subs	r3, #27
 8001896:	2207      	movs	r2, #7
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6898      	ldr	r0, [r3, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	3b1b      	subs	r3, #27
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	e01b      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6959      	ldr	r1, [r3, #20]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	2207      	movs	r2, #7
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6898      	ldr	r0, [r3, #8]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_ADC_ConfigChannel+0x46c>)
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d105      	bne.n	800190e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d014      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001912:	2b11      	cmp	r3, #17
 8001914:	d105      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001926:	2b12      	cmp	r3, #18
 8001928:	f040 8085 	bne.w	8001a36 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800192c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d17e      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10c      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x470>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x470>
 8001958:	2301      	movs	r3, #1
 800195a:	e004      	b.n	8001966 <HAL_ADC_ConfigChannel+0x472>
 800195c:	83fff000 	.word	0x83fff000
 8001960:	50000300 	.word	0x50000300
 8001964:	2300      	movs	r3, #0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d150      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800196a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_ADC_ConfigChannel+0x498>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x498>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_ADC_ConfigChannel+0x49a>
 800198c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800198e:	2b00      	cmp	r3, #0
 8001990:	d13c      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d11d      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x4e2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a2:	d118      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_ADC_ConfigChannel+0x55c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_ADC_ConfigChannel+0x560>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9a      	lsrs	r2, r3, #18
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c6:	e002      	b.n	80019ce <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019d4:	e02e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d10b      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x502>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e6:	d106      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019f4:	e01e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d11a      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a08:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a0a:	e013      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a1e:	e00a      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f043 0220 	orr.w	r2, r3, #32
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a32:	e000      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a34:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	376c      	adds	r7, #108	; 0x6c
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <ADC_Enable+0x2c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <ADC_Enable+0x2c>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <ADC_Enable+0x2e>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d143      	bne.n	8001b12 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <ADC_Enable+0xc4>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00d      	beq.n	8001ab4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e02f      	b.n	8001b14 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ac4:	f7ff fa26 	bl	8000f14 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aca:	e01b      	b.n	8001b04 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001acc:	f7ff fa22 	bl	8000f14 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d914      	bls.n	8001b04 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d00d      	beq.n	8001b04 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0210 	orr.w	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e007      	b.n	8001b14 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d1dc      	bne.n	8001acc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	8000003f 	.word	0x8000003f

08001b20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <ADC_Disable+0x2c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <ADC_Disable+0x2c>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <ADC_Disable+0x2e>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d047      	beq.n	8001be2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030d 	and.w	r3, r3, #13
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10f      	bne.n	8001b80 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0202 	orr.w	r2, r2, #2
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2203      	movs	r2, #3
 8001b76:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f9cc 	bl	8000f14 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b7e:	e029      	b.n	8001bd4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f043 0210 	orr.w	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e023      	b.n	8001be4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b9c:	f7ff f9ba 	bl	8000f14 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d914      	bls.n	8001bd4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d10d      	bne.n	8001bd4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e007      	b.n	8001be4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d0dc      	beq.n	8001b9c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff47 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff5c 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffb0 	bl	8001d0c <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e14e      	b.n	8002066 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8140 	beq.w	8002060 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d005      	beq.n	8001df8 <HAL_GPIO_Init+0x40>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 809a 	beq.w	8002060 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b55      	ldr	r3, [pc, #340]	; (8002084 <HAL_GPIO_Init+0x2cc>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a54      	ldr	r2, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x2cc>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x2cc>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f44:	4a50      	ldr	r2, [pc, #320]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1e0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_GPIO_Init+0x2d4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1dc>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a45      	ldr	r2, [pc, #276]	; (8002090 <HAL_GPIO_Init+0x2d8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1d8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a44      	ldr	r2, [pc, #272]	; (8002094 <HAL_GPIO_Init+0x2dc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1d4>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1e2>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1e2>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1e2>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1e2>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001faa:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fdc:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200c:	4b22      	ldr	r3, [pc, #136]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_GPIO_Init+0x2e0>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f aea9 	bne.w	8001dc8 <HAL_GPIO_Init+0x10>
  }
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	48000400 	.word	0x48000400
 8002090:	48000800 	.word	0x48000800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e081      	b.n	8002212 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd3a 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800214c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e006      	b.n	8002184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d104      	bne.n	8002196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69d9      	ldr	r1, [r3, #28]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	d138      	bne.n	80022a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800223a:	2302      	movs	r3, #2
 800223c:	e032      	b.n	80022a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2224      	movs	r2, #36	; 0x24
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800226c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d139      	bne.n	800233a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e033      	b.n	800233c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002302:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800234e:	af00      	add	r7, sp, #0
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002358:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f001 b823 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 817d 	beq.w	800267e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002384:	4bbc      	ldr	r3, [pc, #752]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002390:	4bb9      	ldr	r3, [pc, #740]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d15c      	bne.n	8002456 <HAL_RCC_OscConfig+0x10e>
 800239c:	4bb6      	ldr	r3, [pc, #728]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d155      	bne.n	8002456 <HAL_RCC_OscConfig+0x10e>
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0x94>
 80023d6:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e015      	b.n	8002408 <HAL_RCC_OscConfig+0xc0>
 80023dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002404:	4b9c      	ldr	r3, [pc, #624]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002410:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002414:	fa92 f2a2 	rbit	r2, r2
 8002418:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800241c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f002 021f 	and.w	r2, r2, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 811f 	beq.w	800267c <HAL_RCC_OscConfig+0x334>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8116 	bne.w	800267c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f000 bfaf 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x12e>
 8002468:	4b83      	ldr	r3, [pc, #524]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a82      	ldr	r2, [pc, #520]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e036      	b.n	80024e4 <HAL_RCC_OscConfig+0x19c>
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x158>
 8002486:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7b      	ldr	r2, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b79      	ldr	r3, [pc, #484]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a78      	ldr	r2, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e021      	b.n	80024e4 <HAL_RCC_OscConfig+0x19c>
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x184>
 80024b2:	4b71      	ldr	r3, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a70      	ldr	r2, [pc, #448]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6e      	ldr	r3, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6d      	ldr	r2, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x19c>
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f023 020f 	bic.w	r2, r3, #15
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	495f      	ldr	r1, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d059      	beq.n	80025c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fd01 	bl	8000f14 <HAL_GetTick>
 8002512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fcfc 	bl	8000f14 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 bf43 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 800252e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002532:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002542:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_RCC_OscConfig+0x218>
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e015      	b.n	800258c <HAL_RCC_OscConfig+0x244>
 8002560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002564:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800257c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002590:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002594:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002598:	fa92 f2a2 	rbit	r2, r2
 800259c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0220 	orr.w	r2, r2, #32
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ab      	beq.n	8002518 <HAL_RCC_OscConfig+0x1d0>
 80025c0:	e05d      	b.n	800267e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe fca7 	bl	8000f14 <HAL_GetTick>
 80025c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fca2 	bl	8000f14 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d902      	bls.n	80025e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	f000 bee9 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 80025e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0x2cc>
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e015      	b.n	8002640 <HAL_RCC_OscConfig+0x2f8>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002630:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_RCC_OscConfig+0x330>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002644:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002648:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002654:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f042 0220 	orr.w	r2, r2, #32
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f002 021f 	and.w	r2, r2, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ab      	bne.n	80025cc <HAL_RCC_OscConfig+0x284>
 8002674:	e003      	b.n	800267e <HAL_RCC_OscConfig+0x336>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 817d 	beq.w	800298e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002694:	4ba6      	ldr	r3, [pc, #664]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026a0:	4ba3      	ldr	r3, [pc, #652]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d172      	bne.n	8002792 <HAL_RCC_OscConfig+0x44a>
 80026ac:	4ba0      	ldr	r3, [pc, #640]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d16c      	bne.n	8002792 <HAL_RCC_OscConfig+0x44a>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3a0>
 80026e2:	4b93      	ldr	r3, [pc, #588]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	e013      	b.n	8002710 <HAL_RCC_OscConfig+0x3c8>
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002700:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800270c:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2202      	movs	r2, #2
 8002712:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002716:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002722:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCC_OscConfig+0x410>
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d002      	beq.n	8002758 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 be2e 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	21f8      	movs	r1, #248	; 0xf8
 800276e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002776:	fa91 f1a1 	rbit	r1, r1
 800277a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800277e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002782:	fab1 f181 	clz	r1, r1
 8002786:	b2c9      	uxtb	r1, r1
 8002788:	408b      	lsls	r3, r1
 800278a:	4969      	ldr	r1, [pc, #420]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002790:	e0fd      	b.n	800298e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8088 	beq.w	80028b4 <HAL_RCC_OscConfig+0x56c>
 80027a4:	2301      	movs	r3, #1
 80027a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fba0 	bl	8000f14 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fb9b 	bl	8000f14 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	f000 bde2 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002802:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d8>
 800281a:	4b45      	ldr	r3, [pc, #276]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e013      	b.n	8002848 <HAL_RCC_OscConfig+0x500>
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002838:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2202      	movs	r2, #2
 800284a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800284e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800285a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0af      	beq.n	80027da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	21f8      	movs	r1, #248	; 0xf8
 8002890:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002898:	fa91 f1a1 	rbit	r1, r1
 800289c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028a4:	fab1 f181 	clz	r1, r1
 80028a8:	b2c9      	uxtb	r1, r1
 80028aa:	408b      	lsls	r3, r1
 80028ac:	4920      	ldr	r1, [pc, #128]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
 80028b2:	e06c      	b.n	800298e <HAL_RCC_OscConfig+0x646>
 80028b4:	2301      	movs	r3, #1
 80028b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	461a      	mov	r2, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fb18 	bl	8000f14 <HAL_GetTick>
 80028e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fb13 	bl	8000f14 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f000 bd5a 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d104      	bne.n	8002934 <HAL_RCC_OscConfig+0x5ec>
 800292a:	4b01      	ldr	r3, [pc, #4]	; (8002930 <HAL_RCC_OscConfig+0x5e8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	e015      	b.n	800295c <HAL_RCC_OscConfig+0x614>
 8002930:	40021000 	.word	0x40021000
 8002934:	2302      	movs	r3, #2
 8002936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800294c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002958:	4bc8      	ldr	r3, [pc, #800]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	2202      	movs	r2, #2
 800295e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002962:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800296e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f002 021f 	and.w	r2, r2, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f202 	lsl.w	r2, r1, r2
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ad      	bne.n	80028ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8110 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d079      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x760>
 80029b4:	2301      	movs	r3, #1
 80029b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	4bab      	ldr	r3, [pc, #684]	; (8002c80 <HAL_RCC_OscConfig+0x938>)
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	461a      	mov	r2, r3
 80029da:	2301      	movs	r3, #1
 80029dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fa99 	bl	8000f14 <HAL_GetTick>
 80029e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fa94 	bl	8000f14 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d902      	bls.n	80029fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f000 bcdb 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a18:	2202      	movs	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a64:	2102      	movs	r1, #2
 8002a66:	6019      	str	r1, [r3, #0]
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f1a3 	rbit	r1, r3
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a7e:	6019      	str	r1, [r3, #0]
  return result;
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0a0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x6a0>
 8002aa6:	e08d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x87c>
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aca:	601a      	str	r2, [r3, #0]
  return result;
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ad4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x938>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fa13 	bl	8000f14 <HAL_GetTick>
 8002aee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fa0e 	bl	8000f14 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d902      	bls.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f000 bc55 	b.w	80033b4 <HAL_RCC_OscConfig+0x106c>
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b12:	2202      	movs	r2, #2
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b82:	2102      	movs	r1, #2
 8002b84:	6019      	str	r1, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f1a3 	rbit	r1, r3
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b9c:	6019      	str	r1, [r3, #0]
  return result;
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d197      	bne.n	8002af4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 81a1 	beq.w	8002f1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	61d3      	str	r3, [r2, #28]
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c12:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCC_OscConfig+0x93c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x93c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x93c>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe f96f 	bl	8000f14 <HAL_GetTick>
 8002c36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	e009      	b.n	8002c50 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fe f96a 	bl	8000f14 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e3b1      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x93c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_OscConfig+0x940>
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_RCC_OscConfig+0x934>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e03c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x9ac>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	10908120 	.word	0x10908120
 8002c84:	40007000 	.word	0x40007000
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x96a>
 8002c98:	4bc1      	ldr	r3, [pc, #772]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4ac0      	ldr	r2, [pc, #768]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	4bbe      	ldr	r3, [pc, #760]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4abd      	ldr	r2, [pc, #756]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	e020      	b.n	8002cf4 <HAL_RCC_OscConfig+0x9ac>
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x994>
 8002cc2:	4bb7      	ldr	r3, [pc, #732]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4ab6      	ldr	r2, [pc, #728]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4bb4      	ldr	r3, [pc, #720]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4ab3      	ldr	r2, [pc, #716]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x9ac>
 8002cdc:	4bb0      	ldr	r3, [pc, #704]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4aaf      	ldr	r2, [pc, #700]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	4bad      	ldr	r3, [pc, #692]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4aac      	ldr	r2, [pc, #688]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8081 	beq.w	8002e08 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fe f905 	bl	8000f14 <HAL_GetTick>
 8002d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe f900 	bl	8000f14 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e345      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_OscConfig+0xa4c>
 8002d8e:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	e013      	b.n	8002dbc <HAL_RCC_OscConfig+0xa74>
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	6011      	str	r1, [r2, #0]
 8002dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dcc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	fa92 f1a2 	rbit	r1, r2
 8002dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dda:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dde:	6011      	str	r1, [r2, #0]
  return result;
 8002de0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d084      	beq.n	8002d10 <HAL_RCC_OscConfig+0x9c8>
 8002e06:	e07f      	b.n	8002f08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe f884 	bl	8000f14 <HAL_GetTick>
 8002e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	e00b      	b.n	8002e2a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe f87f 	bl	8000f14 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e2c4      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e32:	2202      	movs	r2, #2
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e56:	2202      	movs	r2, #2
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f2a3 	rbit	r2, r3
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e70:	601a      	str	r2, [r3, #0]
  return result;
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCC_OscConfig+0xb4e>
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	e013      	b.n	8002ebe <HAL_RCC_OscConfig+0xb76>
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ece:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	fa92 f1a2 	rbit	r1, r2
 8002ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002edc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ee0:	6011      	str	r1, [r2, #0]
  return result;
 8002ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f002 021f 	and.w	r2, r2, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d184      	bne.n	8002e12 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8242 	beq.w	80033b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCC_OscConfig+0xc58>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	f000 8213 	beq.w	8003362 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f040 8162 	bne.w	8003212 <HAL_RCC_OscConfig+0xeca>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f72:	601a      	str	r2, [r3, #0]
  return result;
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd ffbe 	bl	8000f14 <HAL_GetTick>
 8002f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9c:	e00c      	b.n	8002fb8 <HAL_RCC_OscConfig+0xc70>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fd ffb6 	bl	8000f14 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1fd      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fdc:	601a      	str	r2, [r3, #0]
  return result;
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fe6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_OscConfig+0xcba>
 8002ffc:	4bb0      	ldr	r3, [pc, #704]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	e027      	b.n	8003052 <HAL_RCC_OscConfig+0xd0a>
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800300a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4b9c      	ldr	r3, [pc, #624]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003056:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800305a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800305e:	6011      	str	r1, [r2, #0]
 8003060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003064:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	fa92 f1a2 	rbit	r1, r2
 800306e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003072:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003076:	6011      	str	r1, [r2, #0]
  return result;
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d182      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309e:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	430b      	orrs	r3, r1
 80030c0:	497f      	ldr	r1, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030ea:	601a      	str	r2, [r3, #0]
  return result;
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	2301      	movs	r3, #1
 800310a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fd ff02 	bl	8000f14 <HAL_GetTick>
 8003110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003114:	e009      	b.n	800312a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7fd fefd 	bl	8000f14 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e144      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_RCC_OscConfig+0xe2c>
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e027      	b.n	80031c4 <HAL_RCC_OscConfig+0xe7c>
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800317c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d0:	6011      	str	r1, [r2, #0]
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fa92 f1a2 	rbit	r1, r2
 80031e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031e8:	6011      	str	r1, [r2, #0]
  return result;
 80031ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f002 021f 	and.w	r2, r2, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d082      	beq.n	8003116 <HAL_RCC_OscConfig+0xdce>
 8003210:	e0cf      	b.n	80033b2 <HAL_RCC_OscConfig+0x106a>
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800321a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003236:	601a      	str	r2, [r3, #0]
  return result;
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003240:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800324c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	2300      	movs	r3, #0
 8003256:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fd fe5c 	bl	8000f14 <HAL_GetTick>
 800325c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003260:	e009      	b.n	8003276 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fe57 	bl	8000f14 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e09e      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800327e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800329a:	601a      	str	r2, [r3, #0]
  return result;
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d104      	bne.n	80032c4 <HAL_RCC_OscConfig+0xf7c>
 80032ba:	4b01      	ldr	r3, [pc, #4]	; (80032c0 <HAL_RCC_OscConfig+0xf78>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e029      	b.n	8003314 <HAL_RCC_OscConfig+0xfcc>
 80032c0:	40021000 	.word	0x40021000
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fa93 f2a3 	rbit	r2, r3
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCC_OscConfig+0x1078>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003318:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800331c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003326:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	fa92 f1a2 	rbit	r1, r2
 8003330:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003334:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003338:	6011      	str	r1, [r2, #0]
  return result;
 800333a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f002 021f 	and.w	r2, r2, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d180      	bne.n	8003262 <HAL_RCC_OscConfig+0xf1a>
 8003360:	e027      	b.n	80033b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e01e      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_OscConfig+0x1078>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800337e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003382:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	429a      	cmp	r2, r3
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003396:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800339a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b09e      	sub	sp, #120	; 0x78
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e162      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b90      	ldr	r3, [pc, #576]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 0207 	bic.w	r2, r3, #7
 80033f2:	498b      	ldr	r1, [pc, #556]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b89      	ldr	r3, [pc, #548]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e14a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b82      	ldr	r3, [pc, #520]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	497f      	ldr	r1, [pc, #508]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80dc 	beq.w	80035f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d13c      	bne.n	80034ba <HAL_RCC_ClockConfig+0xf6>
 8003440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003444:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_RCC_ClockConfig+0xa6>
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e00f      	b.n	800348a <HAL_RCC_ClockConfig+0xc6>
 800346a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	667b      	str	r3, [r7, #100]	; 0x64
 8003478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
 800347e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003486:	4b67      	ldr	r3, [pc, #412]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800348e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f042 0220 	orr.w	r2, r2, #32
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f002 021f 	and.w	r2, r2, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d17b      	bne.n	80035ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0f3      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d13c      	bne.n	800353c <HAL_RCC_ClockConfig+0x178>
 80034c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_ClockConfig+0x128>
 80034e6:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	e00f      	b.n	800350c <HAL_RCC_ClockConfig+0x148>
 80034ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
 80034fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003508:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003510:	63ba      	str	r2, [r7, #56]	; 0x38
 8003512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003514:	fa92 f2a2 	rbit	r2, r2
 8003518:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800351a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f042 0220 	orr.w	r2, r2, #32
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d13a      	bne.n	80035ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0b2      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
 800353c:	2302      	movs	r3, #2
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e00d      	b.n	8003580 <HAL_RCC_ClockConfig+0x1bc>
 8003564:	2302      	movs	r3, #2
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	2302      	movs	r3, #2
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	61ba      	str	r2, [r7, #24]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	617a      	str	r2, [r7, #20]
  return result;
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	fab2 f282 	clz	r2, r2
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f042 0220 	orr.w	r2, r2, #32
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f002 021f 	and.w	r2, r2, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e079      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd fca8 	bl	8000f14 <HAL_GetTick>
 80035c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fca4 	bl	8000f14 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e061      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d214      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4906      	ldr	r1, [pc, #24]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e040      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2de>
 8003620:	40022000 	.word	0x40022000
 8003624:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_ClockConfig+0x2e8>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	491a      	ldr	r1, [pc, #104]	; (80036ac <HAL_RCC_ClockConfig+0x2e8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x2e8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4912      	ldr	r1, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003666:	f000 f829 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800366a:	4601      	mov	r1, r0
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_RCC_ClockConfig+0x2e8>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003674:	22f0      	movs	r2, #240	; 0xf0
 8003676:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	fa92 f2a2 	rbit	r2, r2
 800367e:	60fa      	str	r2, [r7, #12]
  return result;
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	40d3      	lsrs	r3, r2
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x2ec>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	fa21 f303 	lsr.w	r3, r1, r3
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <HAL_RCC_ClockConfig+0x2f0>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_RCC_ClockConfig+0x2f4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fbf6 	bl	8000e8c <HAL_InitTick>
  
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3778      	adds	r7, #120	; 0x78
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08005148 	.word	0x08005148
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b08b      	sub	sp, #44	; 0x2c
 80036c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d002      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x30>
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x36>
 80036ea:	e03c      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ee:	623b      	str	r3, [r7, #32]
      break;
 80036f0:	e03c      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	fa92 f2a2 	rbit	r2, r2
 8003704:	607a      	str	r2, [r7, #4]
  return result;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	fab2 f282 	clz	r2, r2
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	40d3      	lsrs	r3, r2
 8003710:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	220f      	movs	r2, #15
 8003720:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	60fa      	str	r2, [r7, #12]
  return result;
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	40d3      	lsrs	r3, r2
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003744:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	fbb2 f2f3 	udiv	r2, r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	e004      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a0c      	ldr	r2, [pc, #48]	; (800378c <HAL_RCC_GetSysClockFreq+0xd0>)
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	623b      	str	r3, [r7, #32]
      break;
 8003764:	e002      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003768:	623b      	str	r3, [r7, #32]
      break;
 800376a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376c:	6a3b      	ldr	r3, [r7, #32]
}
 800376e:	4618      	mov	r0, r3
 8003770:	372c      	adds	r7, #44	; 0x2c
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	007a1200 	.word	0x007a1200
 8003784:	08005160 	.word	0x08005160
 8003788:	08005170 	.word	0x08005170
 800378c:	003d0900 	.word	0x003d0900

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037ae:	f7ff ffef 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	603a      	str	r2, [r7, #0]
  return result;
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08005158 	.word	0x08005158

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037f2:	f7ff ffcd 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037f6:	4601      	mov	r1, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003800:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003804:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	603a      	str	r2, [r7, #0]
  return result;
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	40d3      	lsrs	r3, r2
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <HAL_RCC_GetPCLK2Freq+0x40>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	08005158 	.word	0x08005158

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80d4 	beq.w	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003854:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
 800386c:	4b48      	ldr	r3, [pc, #288]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fd fb3d 	bl	8000f14 <HAL_GetTick>
 800389a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7fd fb39 	bl	8000f14 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e14b      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8084 	beq.w	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d07c      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04b      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd fae9 	bl	8000f14 <HAL_GetTick>
 8003942:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fae5 	bl	8000f14 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0f5      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	61fb      	str	r3, [r7, #28]
  return result;
 8003974:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d108      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800398a:	4b01      	ldr	r3, [pc, #4]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	e00d      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003990:	40021000 	.word	0x40021000
 8003994:	40007000 	.word	0x40007000
 8003998:	10908100 	.word	0x10908100
 800399c:	2302      	movs	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2202      	movs	r2, #2
 80039ae:	613a      	str	r2, [r7, #16]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	fa92 f2a2 	rbit	r2, r2
 80039b6:	60fa      	str	r2, [r7, #12]
  return result;
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	fab2 f282 	clz	r2, r2
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f002 021f 	and.w	r2, r2, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0b7      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039d6:	4b5e      	ldr	r3, [pc, #376]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	495b      	ldr	r1, [pc, #364]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a08:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f023 0203 	bic.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494e      	ldr	r1, [pc, #312]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f023 0210 	bic.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4947      	ldr	r1, [pc, #284]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a44:	4b42      	ldr	r3, [pc, #264]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	493f      	ldr	r1, [pc, #252]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f023 0220 	bic.w	r2, r3, #32
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4938      	ldr	r1, [pc, #224]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4930      	ldr	r1, [pc, #192]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4929      	ldr	r1, [pc, #164]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	4921      	ldr	r1, [pc, #132]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	491a      	ldr	r1, [pc, #104]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4912      	ldr	r1, [pc, #72]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	490b      	ldr	r1, [pc, #44]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3748      	adds	r7, #72	; 0x48
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000

08003b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e049      	b.n	8003bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd f870 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f000 f8fe 	bl	8003d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_ConfigClockSource+0x1c>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0b6      	b.n	8003d8c <HAL_TIM_ConfigClockSource+0x18a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	d03e      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xd8>
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	f200 8087 	bhi.w	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	f000 8086 	beq.w	8003d78 <HAL_TIM_ConfigClockSource+0x176>
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d87f      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c72:	2b70      	cmp	r3, #112	; 0x70
 8003c74:	d01a      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xaa>
 8003c76:	2b70      	cmp	r3, #112	; 0x70
 8003c78:	d87b      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c7a:	2b60      	cmp	r3, #96	; 0x60
 8003c7c:	d050      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x11e>
 8003c7e:	2b60      	cmp	r3, #96	; 0x60
 8003c80:	d877      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c82:	2b50      	cmp	r3, #80	; 0x50
 8003c84:	d03c      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0xfe>
 8003c86:	2b50      	cmp	r3, #80	; 0x50
 8003c88:	d873      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d058      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0x13e>
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d86f      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d064      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x15e>
 8003c96:	2b30      	cmp	r3, #48	; 0x30
 8003c98:	d86b      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d060      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x15e>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d867      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d05c      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x15e>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d05a      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x15e>
 8003caa:	e062      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cbc:	f000 f952 	bl	8003f64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
      break;
 8003cd8:	e04f      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	f000 f93b 	bl	8003f64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfc:	609a      	str	r2, [r3, #8]
      break;
 8003cfe:	e03c      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f000 f8af 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2150      	movs	r1, #80	; 0x50
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f908 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d1e:	e02c      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f000 f8ce 	bl	8003ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2160      	movs	r1, #96	; 0x60
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f8f8 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e01c      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f000 f88f 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2140      	movs	r1, #64	; 0x40
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f8e8 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e00c      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 f8df 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d70:	e003      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      break;
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <TIM_Base_SetConfig+0xcc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x20>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <TIM_Base_SetConfig+0xcc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00f      	beq.n	8003dee <TIM_Base_SetConfig+0x5a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d00b      	beq.n	8003dee <TIM_Base_SetConfig+0x5a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <TIM_Base_SetConfig+0xd0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <TIM_Base_SetConfig+0x5a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <TIM_Base_SetConfig+0xd4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_Base_SetConfig+0x5a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <TIM_Base_SetConfig+0xd8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d108      	bne.n	8003e00 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <TIM_Base_SetConfig+0xcc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00b      	beq.n	8003e44 <TIM_Base_SetConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <TIM_Base_SetConfig+0xd0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d007      	beq.n	8003e44 <TIM_Base_SetConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <TIM_Base_SetConfig+0xd4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <TIM_Base_SetConfig+0xd8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	615a      	str	r2, [r3, #20]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800

08003e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 030a 	bic.w	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	031b      	lsls	r3, r3, #12
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e04f      	b.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d108      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d004      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e040      	b.n	8004104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fe04 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	; 0x24
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f82c 	bl	800410c <UART_SetConfig>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e022      	b.n	8004104 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f956 	bl	8004378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f9dd 	bl	80044bc <UART_CheckIdleState>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8a      	ldr	r3, [pc, #552]	; (8004360 <UART_SetConfig+0x254>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	430b      	orrs	r3, r1
 8004142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a78      	ldr	r2, [pc, #480]	; (8004364 <UART_SetConfig+0x258>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d120      	bne.n	80041ca <UART_SetConfig+0xbe>
 8004188:	4b77      	ldr	r3, [pc, #476]	; (8004368 <UART_SetConfig+0x25c>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b03      	cmp	r3, #3
 8004192:	d817      	bhi.n	80041c4 <UART_SetConfig+0xb8>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x90>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041b9 	.word	0x080041b9
 80041a4:	080041bf 	.word	0x080041bf
 80041a8:	080041b3 	.word	0x080041b3
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e01d      	b.n	80041ee <UART_SetConfig+0xe2>
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e01a      	b.n	80041ee <UART_SetConfig+0xe2>
 80041b8:	2304      	movs	r3, #4
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e017      	b.n	80041ee <UART_SetConfig+0xe2>
 80041be:	2308      	movs	r3, #8
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e014      	b.n	80041ee <UART_SetConfig+0xe2>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e011      	b.n	80041ee <UART_SetConfig+0xe2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a67      	ldr	r2, [pc, #412]	; (800436c <UART_SetConfig+0x260>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d102      	bne.n	80041da <UART_SetConfig+0xce>
 80041d4:	2300      	movs	r3, #0
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e009      	b.n	80041ee <UART_SetConfig+0xe2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a64      	ldr	r2, [pc, #400]	; (8004370 <UART_SetConfig+0x264>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d102      	bne.n	80041ea <UART_SetConfig+0xde>
 80041e4:	2300      	movs	r3, #0
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e001      	b.n	80041ee <UART_SetConfig+0xe2>
 80041ea:	2310      	movs	r3, #16
 80041ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f6:	d15a      	bne.n	80042ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d827      	bhi.n	800424e <UART_SetConfig+0x142>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0xf8>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	0800424f 	.word	0x0800424f
 8004214:	0800423f 	.word	0x0800423f
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
 8004224:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7ff fabe 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 800422c:	61b8      	str	r0, [r7, #24]
        break;
 800422e:	e013      	b.n	8004258 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7ff fadc 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8004234:	61b8      	str	r0, [r7, #24]
        break;
 8004236:	e00f      	b.n	8004258 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004238:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <UART_SetConfig+0x268>)
 800423a:	61bb      	str	r3, [r7, #24]
        break;
 800423c:	e00c      	b.n	8004258 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423e:	f7ff fa3d 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8004242:	61b8      	str	r0, [r7, #24]
        break;
 8004244:	e008      	b.n	8004258 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	61bb      	str	r3, [r7, #24]
        break;
 800424c:	e004      	b.n	8004258 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	77bb      	strb	r3, [r7, #30]
        break;
 8004256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d074      	beq.n	8004348 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	005a      	lsls	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d916      	bls.n	80042a8 <UART_SetConfig+0x19c>
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d212      	bcs.n	80042a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f023 030f 	bic.w	r3, r3, #15
 800428a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	b29b      	uxth	r3, r3
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	b29a      	uxth	r2, r3
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	4313      	orrs	r3, r2
 800429c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	89fa      	ldrh	r2, [r7, #14]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	e04f      	b.n	8004348 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77bb      	strb	r3, [r7, #30]
 80042ac:	e04c      	b.n	8004348 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d828      	bhi.n	8004306 <UART_SetConfig+0x1fa>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x1b0>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	08004307 	.word	0x08004307
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	08004307 	.word	0x08004307
 80042d4:	08004307 	.word	0x08004307
 80042d8:	08004307 	.word	0x08004307
 80042dc:	080042ff 	.word	0x080042ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7ff fa62 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e013      	b.n	8004310 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff fa80 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 80042ec:	61b8      	str	r0, [r7, #24]
        break;
 80042ee:	e00f      	b.n	8004310 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <UART_SetConfig+0x268>)
 80042f2:	61bb      	str	r3, [r7, #24]
        break;
 80042f4:	e00c      	b.n	8004310 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f6:	f7ff f9e1 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 80042fa:	61b8      	str	r0, [r7, #24]
        break;
 80042fc:	e008      	b.n	8004310 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	61bb      	str	r3, [r7, #24]
        break;
 8004304:	e004      	b.n	8004310 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	77bb      	strb	r3, [r7, #30]
        break;
 800430e:	bf00      	nop
    }

    if (pclk != 0U)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	085a      	lsrs	r2, r3, #1
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	441a      	add	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b0f      	cmp	r3, #15
 800432e:	d909      	bls.n	8004344 <UART_SetConfig+0x238>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d205      	bcs.n	8004344 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	e001      	b.n	8004348 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004354:	7fbb      	ldrb	r3, [r7, #30]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	efff69f3 	.word	0xefff69f3
 8004364:	40013800 	.word	0x40013800
 8004368:	40021000 	.word	0x40021000
 800436c:	40004400 	.word	0x40004400
 8004370:	40004800 	.word	0x40004800
 8004374:	007a1200 	.word	0x007a1200

08004378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01a      	beq.n	800448e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d10a      	bne.n	800448e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b098      	sub	sp, #96	; 0x60
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044cc:	f7fc fd22 	bl	8000f14 <HAL_GetTick>
 80044d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d12e      	bne.n	800453e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	2200      	movs	r2, #0
 80044ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f88c 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
 800451a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800451e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e062      	b.n	8004604 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d149      	bne.n	80045e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f856 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03c      	beq.n	80045e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	623b      	str	r3, [r7, #32]
   return(result);
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b8:	61fa      	str	r2, [r7, #28]
 80045ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	69b9      	ldr	r1, [r7, #24]
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	617b      	str	r3, [r7, #20]
   return(result);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e011      	b.n	8004604 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3758      	adds	r7, #88	; 0x58
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461c:	e049      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004624:	d045      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fc fc75 	bl	8000f14 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <UART_WaitOnFlagUntilTimeout+0x30>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e048      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d031      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b08      	cmp	r3, #8
 800465a:	d110      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f838 	bl	80046da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2208      	movs	r2, #8
 800466e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e029      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468c:	d111      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f81e 	bl	80046da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0a6      	beq.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b095      	sub	sp, #84	; 0x54
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
 8004702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e6      	bne.n	80046e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	61fb      	str	r3, [r7, #28]
   return(result);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3308      	adds	r3, #8
 8004732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	2b01      	cmp	r3, #1
 800474e:	d118      	bne.n	8004782 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	60bb      	str	r3, [r7, #8]
   return(result);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0310 	bic.w	r3, r3, #16
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	613b      	str	r3, [r7, #16]
   return(result);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e6      	bne.n	8004750 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004796:	bf00      	nop
 8004798:	3754      	adds	r7, #84	; 0x54
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <siprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	b500      	push	{lr}
 80047a8:	b09c      	sub	sp, #112	; 0x70
 80047aa:	ab1d      	add	r3, sp, #116	; 0x74
 80047ac:	9002      	str	r0, [sp, #8]
 80047ae:	9006      	str	r0, [sp, #24]
 80047b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b4:	4809      	ldr	r0, [pc, #36]	; (80047dc <siprintf+0x38>)
 80047b6:	9107      	str	r1, [sp, #28]
 80047b8:	9104      	str	r1, [sp, #16]
 80047ba:	4909      	ldr	r1, [pc, #36]	; (80047e0 <siprintf+0x3c>)
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	9105      	str	r1, [sp, #20]
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	a902      	add	r1, sp, #8
 80047c8:	f000 f89a 	bl	8004900 <_svfiprintf_r>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	b01c      	add	sp, #112	; 0x70
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	20000058 	.word	0x20000058
 80047e0:	ffff0208 	.word	0xffff0208

080047e4 <memset>:
 80047e4:	4402      	add	r2, r0
 80047e6:	4603      	mov	r3, r0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d100      	bne.n	80047ee <memset+0xa>
 80047ec:	4770      	bx	lr
 80047ee:	f803 1b01 	strb.w	r1, [r3], #1
 80047f2:	e7f9      	b.n	80047e8 <memset+0x4>

080047f4 <__errno>:
 80047f4:	4b01      	ldr	r3, [pc, #4]	; (80047fc <__errno+0x8>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000058 	.word	0x20000058

08004800 <__libc_init_array>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	4d0d      	ldr	r5, [pc, #52]	; (8004838 <__libc_init_array+0x38>)
 8004804:	4c0d      	ldr	r4, [pc, #52]	; (800483c <__libc_init_array+0x3c>)
 8004806:	1b64      	subs	r4, r4, r5
 8004808:	10a4      	asrs	r4, r4, #2
 800480a:	2600      	movs	r6, #0
 800480c:	42a6      	cmp	r6, r4
 800480e:	d109      	bne.n	8004824 <__libc_init_array+0x24>
 8004810:	4d0b      	ldr	r5, [pc, #44]	; (8004840 <__libc_init_array+0x40>)
 8004812:	4c0c      	ldr	r4, [pc, #48]	; (8004844 <__libc_init_array+0x44>)
 8004814:	f000 fc6a 	bl	80050ec <_init>
 8004818:	1b64      	subs	r4, r4, r5
 800481a:	10a4      	asrs	r4, r4, #2
 800481c:	2600      	movs	r6, #0
 800481e:	42a6      	cmp	r6, r4
 8004820:	d105      	bne.n	800482e <__libc_init_array+0x2e>
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	f855 3b04 	ldr.w	r3, [r5], #4
 8004828:	4798      	blx	r3
 800482a:	3601      	adds	r6, #1
 800482c:	e7ee      	b.n	800480c <__libc_init_array+0xc>
 800482e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004832:	4798      	blx	r3
 8004834:	3601      	adds	r6, #1
 8004836:	e7f2      	b.n	800481e <__libc_init_array+0x1e>
 8004838:	080051b4 	.word	0x080051b4
 800483c:	080051b4 	.word	0x080051b4
 8004840:	080051b4 	.word	0x080051b4
 8004844:	080051b8 	.word	0x080051b8

08004848 <__retarget_lock_acquire_recursive>:
 8004848:	4770      	bx	lr

0800484a <__retarget_lock_release_recursive>:
 800484a:	4770      	bx	lr

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	461f      	mov	r7, r3
 8004854:	42be      	cmp	r6, r7
 8004856:	680b      	ldr	r3, [r1, #0]
 8004858:	4682      	mov	sl, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4690      	mov	r8, r2
 800485e:	d82c      	bhi.n	80048ba <__ssputs_r+0x6e>
 8004860:	898a      	ldrh	r2, [r1, #12]
 8004862:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004866:	d026      	beq.n	80048b6 <__ssputs_r+0x6a>
 8004868:	6965      	ldr	r5, [r4, #20]
 800486a:	6909      	ldr	r1, [r1, #16]
 800486c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004870:	eba3 0901 	sub.w	r9, r3, r1
 8004874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004878:	1c7b      	adds	r3, r7, #1
 800487a:	444b      	add	r3, r9
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d527      	bpl.n	80048d8 <__ssputs_r+0x8c>
 8004888:	4629      	mov	r1, r5
 800488a:	f000 f957 	bl	8004b3c <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b360      	cbz	r0, 80048ec <__ssputs_r+0xa0>
 8004892:	6921      	ldr	r1, [r4, #16]
 8004894:	464a      	mov	r2, r9
 8004896:	f000 fbc7 	bl	8005028 <memcpy>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	6126      	str	r6, [r4, #16]
 80048a8:	6165      	str	r5, [r4, #20]
 80048aa:	444e      	add	r6, r9
 80048ac:	eba5 0509 	sub.w	r5, r5, r9
 80048b0:	6026      	str	r6, [r4, #0]
 80048b2:	60a5      	str	r5, [r4, #8]
 80048b4:	463e      	mov	r6, r7
 80048b6:	42be      	cmp	r6, r7
 80048b8:	d900      	bls.n	80048bc <__ssputs_r+0x70>
 80048ba:	463e      	mov	r6, r7
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	4632      	mov	r2, r6
 80048c0:	4641      	mov	r1, r8
 80048c2:	f000 fb86 	bl	8004fd2 <memmove>
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	1b9b      	subs	r3, r3, r6
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	4433      	add	r3, r6
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	2000      	movs	r0, #0
 80048d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d8:	462a      	mov	r2, r5
 80048da:	f000 fb4b 	bl	8004f74 <_realloc_r>
 80048de:	4606      	mov	r6, r0
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d1e0      	bne.n	80048a6 <__ssputs_r+0x5a>
 80048e4:	6921      	ldr	r1, [r4, #16]
 80048e6:	4650      	mov	r0, sl
 80048e8:	f000 fbac 	bl	8005044 <_free_r>
 80048ec:	230c      	movs	r3, #12
 80048ee:	f8ca 3000 	str.w	r3, [sl]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048fe:	e7e9      	b.n	80048d4 <__ssputs_r+0x88>

08004900 <_svfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	4698      	mov	r8, r3
 8004906:	898b      	ldrh	r3, [r1, #12]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	b09d      	sub	sp, #116	; 0x74
 800490c:	4607      	mov	r7, r0
 800490e:	460d      	mov	r5, r1
 8004910:	4614      	mov	r4, r2
 8004912:	d50e      	bpl.n	8004932 <_svfiprintf_r+0x32>
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	b963      	cbnz	r3, 8004932 <_svfiprintf_r+0x32>
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	f000 f90f 	bl	8004b3c <_malloc_r>
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	6128      	str	r0, [r5, #16]
 8004922:	b920      	cbnz	r0, 800492e <_svfiprintf_r+0x2e>
 8004924:	230c      	movs	r3, #12
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800492c:	e0d0      	b.n	8004ad0 <_svfiprintf_r+0x1d0>
 800492e:	2340      	movs	r3, #64	; 0x40
 8004930:	616b      	str	r3, [r5, #20]
 8004932:	2300      	movs	r3, #0
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	2320      	movs	r3, #32
 8004938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004940:	2330      	movs	r3, #48	; 0x30
 8004942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ae8 <_svfiprintf_r+0x1e8>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494a:	f04f 0901 	mov.w	r9, #1
 800494e:	4623      	mov	r3, r4
 8004950:	469a      	mov	sl, r3
 8004952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004956:	b10a      	cbz	r2, 800495c <_svfiprintf_r+0x5c>
 8004958:	2a25      	cmp	r2, #37	; 0x25
 800495a:	d1f9      	bne.n	8004950 <_svfiprintf_r+0x50>
 800495c:	ebba 0b04 	subs.w	fp, sl, r4
 8004960:	d00b      	beq.n	800497a <_svfiprintf_r+0x7a>
 8004962:	465b      	mov	r3, fp
 8004964:	4622      	mov	r2, r4
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ff6f 	bl	800484c <__ssputs_r>
 800496e:	3001      	adds	r0, #1
 8004970:	f000 80a9 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004976:	445a      	add	r2, fp
 8004978:	9209      	str	r2, [sp, #36]	; 0x24
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a1 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004984:	2300      	movs	r3, #0
 8004986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800498a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498e:	f10a 0a01 	add.w	sl, sl, #1
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499a:	931a      	str	r3, [sp, #104]	; 0x68
 800499c:	4654      	mov	r4, sl
 800499e:	2205      	movs	r2, #5
 80049a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a4:	4850      	ldr	r0, [pc, #320]	; (8004ae8 <_svfiprintf_r+0x1e8>)
 80049a6:	f7fb fc1b 	bl	80001e0 <memchr>
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	b9d8      	cbnz	r0, 80049e6 <_svfiprintf_r+0xe6>
 80049ae:	06d0      	lsls	r0, r2, #27
 80049b0:	bf44      	itt	mi
 80049b2:	2320      	movmi	r3, #32
 80049b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b8:	0711      	lsls	r1, r2, #28
 80049ba:	bf44      	itt	mi
 80049bc:	232b      	movmi	r3, #43	; 0x2b
 80049be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c2:	f89a 3000 	ldrb.w	r3, [sl]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d015      	beq.n	80049f6 <_svfiprintf_r+0xf6>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	4654      	mov	r4, sl
 80049ce:	2000      	movs	r0, #0
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4621      	mov	r1, r4
 80049d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049da:	3b30      	subs	r3, #48	; 0x30
 80049dc:	2b09      	cmp	r3, #9
 80049de:	d94d      	bls.n	8004a7c <_svfiprintf_r+0x17c>
 80049e0:	b1b0      	cbz	r0, 8004a10 <_svfiprintf_r+0x110>
 80049e2:	9207      	str	r2, [sp, #28]
 80049e4:	e014      	b.n	8004a10 <_svfiprintf_r+0x110>
 80049e6:	eba0 0308 	sub.w	r3, r0, r8
 80049ea:	fa09 f303 	lsl.w	r3, r9, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	46a2      	mov	sl, r4
 80049f4:	e7d2      	b.n	800499c <_svfiprintf_r+0x9c>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9103      	str	r1, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfbb      	ittet	lt
 8004a02:	425b      	neglt	r3, r3
 8004a04:	f042 0202 	orrlt.w	r2, r2, #2
 8004a08:	9307      	strge	r3, [sp, #28]
 8004a0a:	9307      	strlt	r3, [sp, #28]
 8004a0c:	bfb8      	it	lt
 8004a0e:	9204      	strlt	r2, [sp, #16]
 8004a10:	7823      	ldrb	r3, [r4, #0]
 8004a12:	2b2e      	cmp	r3, #46	; 0x2e
 8004a14:	d10c      	bne.n	8004a30 <_svfiprintf_r+0x130>
 8004a16:	7863      	ldrb	r3, [r4, #1]
 8004a18:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1a:	d134      	bne.n	8004a86 <_svfiprintf_r+0x186>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bfb8      	it	lt
 8004a28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a2c:	3402      	adds	r4, #2
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004af8 <_svfiprintf_r+0x1f8>
 8004a34:	7821      	ldrb	r1, [r4, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fbd1 	bl	80001e0 <memchr>
 8004a3e:	b138      	cbz	r0, 8004a50 <_svfiprintf_r+0x150>
 8004a40:	9b04      	ldr	r3, [sp, #16]
 8004a42:	eba0 000a 	sub.w	r0, r0, sl
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	4082      	lsls	r2, r0
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a54:	4825      	ldr	r0, [pc, #148]	; (8004aec <_svfiprintf_r+0x1ec>)
 8004a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	f7fb fbc0 	bl	80001e0 <memchr>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d038      	beq.n	8004ad6 <_svfiprintf_r+0x1d6>
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <_svfiprintf_r+0x1f0>)
 8004a66:	bb1b      	cbnz	r3, 8004ab0 <_svfiprintf_r+0x1b0>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	3307      	adds	r3, #7
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	3308      	adds	r3, #8
 8004a72:	9303      	str	r3, [sp, #12]
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	4433      	add	r3, r6
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	e768      	b.n	800494e <_svfiprintf_r+0x4e>
 8004a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a80:	460c      	mov	r4, r1
 8004a82:	2001      	movs	r0, #1
 8004a84:	e7a6      	b.n	80049d4 <_svfiprintf_r+0xd4>
 8004a86:	2300      	movs	r3, #0
 8004a88:	3401      	adds	r4, #1
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f04f 0c0a 	mov.w	ip, #10
 8004a92:	4620      	mov	r0, r4
 8004a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a98:	3a30      	subs	r2, #48	; 0x30
 8004a9a:	2a09      	cmp	r2, #9
 8004a9c:	d903      	bls.n	8004aa6 <_svfiprintf_r+0x1a6>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0c6      	beq.n	8004a30 <_svfiprintf_r+0x130>
 8004aa2:	9105      	str	r1, [sp, #20]
 8004aa4:	e7c4      	b.n	8004a30 <_svfiprintf_r+0x130>
 8004aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aaa:	4604      	mov	r4, r0
 8004aac:	2301      	movs	r3, #1
 8004aae:	e7f0      	b.n	8004a92 <_svfiprintf_r+0x192>
 8004ab0:	ab03      	add	r3, sp, #12
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <_svfiprintf_r+0x1f4>)
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	4638      	mov	r0, r7
 8004abc:	f3af 8000 	nop.w
 8004ac0:	1c42      	adds	r2, r0, #1
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	d1d6      	bne.n	8004a74 <_svfiprintf_r+0x174>
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	065b      	lsls	r3, r3, #25
 8004aca:	f53f af2d 	bmi.w	8004928 <_svfiprintf_r+0x28>
 8004ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad0:	b01d      	add	sp, #116	; 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_svfiprintf_r+0x1f4>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f000 f919 	bl	8004d18 <_printf_i>
 8004ae6:	e7eb      	b.n	8004ac0 <_svfiprintf_r+0x1c0>
 8004ae8:	08005180 	.word	0x08005180
 8004aec:	0800518a 	.word	0x0800518a
 8004af0:	00000000 	.word	0x00000000
 8004af4:	0800484d 	.word	0x0800484d
 8004af8:	08005186 	.word	0x08005186

08004afc <sbrk_aligned>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4e0e      	ldr	r6, [pc, #56]	; (8004b38 <sbrk_aligned+0x3c>)
 8004b00:	460c      	mov	r4, r1
 8004b02:	6831      	ldr	r1, [r6, #0]
 8004b04:	4605      	mov	r5, r0
 8004b06:	b911      	cbnz	r1, 8004b0e <sbrk_aligned+0x12>
 8004b08:	f000 fa7e 	bl	8005008 <_sbrk_r>
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 fa79 	bl	8005008 <_sbrk_r>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d00a      	beq.n	8004b30 <sbrk_aligned+0x34>
 8004b1a:	1cc4      	adds	r4, r0, #3
 8004b1c:	f024 0403 	bic.w	r4, r4, #3
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	d007      	beq.n	8004b34 <sbrk_aligned+0x38>
 8004b24:	1a21      	subs	r1, r4, r0
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fa6e 	bl	8005008 <_sbrk_r>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d101      	bne.n	8004b34 <sbrk_aligned+0x38>
 8004b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b34:	4620      	mov	r0, r4
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	2000033c 	.word	0x2000033c

08004b3c <_malloc_r>:
 8004b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b40:	1ccd      	adds	r5, r1, #3
 8004b42:	f025 0503 	bic.w	r5, r5, #3
 8004b46:	3508      	adds	r5, #8
 8004b48:	2d0c      	cmp	r5, #12
 8004b4a:	bf38      	it	cc
 8004b4c:	250c      	movcc	r5, #12
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	4607      	mov	r7, r0
 8004b52:	db01      	blt.n	8004b58 <_malloc_r+0x1c>
 8004b54:	42a9      	cmp	r1, r5
 8004b56:	d905      	bls.n	8004b64 <_malloc_r+0x28>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	4630      	mov	r0, r6
 8004b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c38 <_malloc_r+0xfc>
 8004b68:	f000 f9f8 	bl	8004f5c <__malloc_lock>
 8004b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b70:	461c      	mov	r4, r3
 8004b72:	bb5c      	cbnz	r4, 8004bcc <_malloc_r+0x90>
 8004b74:	4629      	mov	r1, r5
 8004b76:	4638      	mov	r0, r7
 8004b78:	f7ff ffc0 	bl	8004afc <sbrk_aligned>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	4604      	mov	r4, r0
 8004b80:	d155      	bne.n	8004c2e <_malloc_r+0xf2>
 8004b82:	f8d8 4000 	ldr.w	r4, [r8]
 8004b86:	4626      	mov	r6, r4
 8004b88:	2e00      	cmp	r6, #0
 8004b8a:	d145      	bne.n	8004c18 <_malloc_r+0xdc>
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d048      	beq.n	8004c22 <_malloc_r+0xe6>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	4631      	mov	r1, r6
 8004b94:	4638      	mov	r0, r7
 8004b96:	eb04 0903 	add.w	r9, r4, r3
 8004b9a:	f000 fa35 	bl	8005008 <_sbrk_r>
 8004b9e:	4581      	cmp	r9, r0
 8004ba0:	d13f      	bne.n	8004c22 <_malloc_r+0xe6>
 8004ba2:	6821      	ldr	r1, [r4, #0]
 8004ba4:	1a6d      	subs	r5, r5, r1
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7ff ffa7 	bl	8004afc <sbrk_aligned>
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d037      	beq.n	8004c22 <_malloc_r+0xe6>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	442b      	add	r3, r5
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d038      	beq.n	8004c32 <_malloc_r+0xf6>
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	42a2      	cmp	r2, r4
 8004bc4:	d12b      	bne.n	8004c1e <_malloc_r+0xe2>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	e00f      	b.n	8004bec <_malloc_r+0xb0>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	1b52      	subs	r2, r2, r5
 8004bd0:	d41f      	bmi.n	8004c12 <_malloc_r+0xd6>
 8004bd2:	2a0b      	cmp	r2, #11
 8004bd4:	d917      	bls.n	8004c06 <_malloc_r+0xca>
 8004bd6:	1961      	adds	r1, r4, r5
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	6059      	strne	r1, [r3, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	bf08      	it	eq
 8004be4:	f8c8 1000 	streq.w	r1, [r8]
 8004be8:	5162      	str	r2, [r4, r5]
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	4638      	mov	r0, r7
 8004bee:	f104 060b 	add.w	r6, r4, #11
 8004bf2:	f000 f9b9 	bl	8004f68 <__malloc_unlock>
 8004bf6:	f026 0607 	bic.w	r6, r6, #7
 8004bfa:	1d23      	adds	r3, r4, #4
 8004bfc:	1af2      	subs	r2, r6, r3
 8004bfe:	d0ae      	beq.n	8004b5e <_malloc_r+0x22>
 8004c00:	1b9b      	subs	r3, r3, r6
 8004c02:	50a3      	str	r3, [r4, r2]
 8004c04:	e7ab      	b.n	8004b5e <_malloc_r+0x22>
 8004c06:	42a3      	cmp	r3, r4
 8004c08:	6862      	ldr	r2, [r4, #4]
 8004c0a:	d1dd      	bne.n	8004bc8 <_malloc_r+0x8c>
 8004c0c:	f8c8 2000 	str.w	r2, [r8]
 8004c10:	e7ec      	b.n	8004bec <_malloc_r+0xb0>
 8004c12:	4623      	mov	r3, r4
 8004c14:	6864      	ldr	r4, [r4, #4]
 8004c16:	e7ac      	b.n	8004b72 <_malloc_r+0x36>
 8004c18:	4634      	mov	r4, r6
 8004c1a:	6876      	ldr	r6, [r6, #4]
 8004c1c:	e7b4      	b.n	8004b88 <_malloc_r+0x4c>
 8004c1e:	4613      	mov	r3, r2
 8004c20:	e7cc      	b.n	8004bbc <_malloc_r+0x80>
 8004c22:	230c      	movs	r3, #12
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4638      	mov	r0, r7
 8004c28:	f000 f99e 	bl	8004f68 <__malloc_unlock>
 8004c2c:	e797      	b.n	8004b5e <_malloc_r+0x22>
 8004c2e:	6025      	str	r5, [r4, #0]
 8004c30:	e7dc      	b.n	8004bec <_malloc_r+0xb0>
 8004c32:	605b      	str	r3, [r3, #4]
 8004c34:	deff      	udf	#255	; 0xff
 8004c36:	bf00      	nop
 8004c38:	20000338 	.word	0x20000338

08004c3c <_printf_common>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	4616      	mov	r6, r2
 8004c42:	4699      	mov	r9, r3
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bfb8      	it	lt
 8004c50:	4613      	movlt	r3, r2
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c58:	4607      	mov	r7, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	b10a      	cbz	r2, 8004c62 <_printf_common+0x26>
 8004c5e:	3301      	adds	r3, #1
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	0699      	lsls	r1, r3, #26
 8004c66:	bf42      	ittt	mi
 8004c68:	6833      	ldrmi	r3, [r6, #0]
 8004c6a:	3302      	addmi	r3, #2
 8004c6c:	6033      	strmi	r3, [r6, #0]
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	f015 0506 	ands.w	r5, r5, #6
 8004c74:	d106      	bne.n	8004c84 <_printf_common+0x48>
 8004c76:	f104 0a19 	add.w	sl, r4, #25
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	6832      	ldr	r2, [r6, #0]
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dc26      	bgt.n	8004cd2 <_printf_common+0x96>
 8004c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c88:	1e13      	subs	r3, r2, #0
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	bf18      	it	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	0692      	lsls	r2, r2, #26
 8004c92:	d42b      	bmi.n	8004cec <_printf_common+0xb0>
 8004c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c0      	blx	r8
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d01e      	beq.n	8004ce0 <_printf_common+0xa4>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	6922      	ldr	r2, [r4, #16]
 8004ca6:	f003 0306 	and.w	r3, r3, #6
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	bf02      	ittt	eq
 8004cae:	68e5      	ldreq	r5, [r4, #12]
 8004cb0:	6833      	ldreq	r3, [r6, #0]
 8004cb2:	1aed      	subeq	r5, r5, r3
 8004cb4:	68a3      	ldr	r3, [r4, #8]
 8004cb6:	bf0c      	ite	eq
 8004cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cbc:	2500      	movne	r5, #0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bfc4      	itt	gt
 8004cc2:	1a9b      	subgt	r3, r3, r2
 8004cc4:	18ed      	addgt	r5, r5, r3
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	341a      	adds	r4, #26
 8004cca:	42b5      	cmp	r5, r6
 8004ccc:	d11a      	bne.n	8004d04 <_printf_common+0xc8>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e008      	b.n	8004ce4 <_printf_common+0xa8>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4638      	mov	r0, r7
 8004cda:	47c0      	blx	r8
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d103      	bne.n	8004ce8 <_printf_common+0xac>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	3501      	adds	r5, #1
 8004cea:	e7c6      	b.n	8004c7a <_printf_common+0x3e>
 8004cec:	18e1      	adds	r1, r4, r3
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	2030      	movs	r0, #48	; 0x30
 8004cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf6:	4422      	add	r2, r4
 8004cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d00:	3302      	adds	r3, #2
 8004d02:	e7c7      	b.n	8004c94 <_printf_common+0x58>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4622      	mov	r2, r4
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d0e6      	beq.n	8004ce0 <_printf_common+0xa4>
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7d9      	b.n	8004cca <_printf_common+0x8e>
	...

08004d18 <_printf_i>:
 8004d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	7e0f      	ldrb	r7, [r1, #24]
 8004d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d20:	2f78      	cmp	r7, #120	; 0x78
 8004d22:	4691      	mov	r9, r2
 8004d24:	4680      	mov	r8, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2e:	d807      	bhi.n	8004d40 <_printf_i+0x28>
 8004d30:	2f62      	cmp	r7, #98	; 0x62
 8004d32:	d80a      	bhi.n	8004d4a <_printf_i+0x32>
 8004d34:	2f00      	cmp	r7, #0
 8004d36:	f000 80d4 	beq.w	8004ee2 <_printf_i+0x1ca>
 8004d3a:	2f58      	cmp	r7, #88	; 0x58
 8004d3c:	f000 80c0 	beq.w	8004ec0 <_printf_i+0x1a8>
 8004d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d48:	e03a      	b.n	8004dc0 <_printf_i+0xa8>
 8004d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4e:	2b15      	cmp	r3, #21
 8004d50:	d8f6      	bhi.n	8004d40 <_printf_i+0x28>
 8004d52:	a101      	add	r1, pc, #4	; (adr r1, 8004d58 <_printf_i+0x40>)
 8004d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004dc5 	.word	0x08004dc5
 8004d60:	08004d41 	.word	0x08004d41
 8004d64:	08004d41 	.word	0x08004d41
 8004d68:	08004d41 	.word	0x08004d41
 8004d6c:	08004d41 	.word	0x08004d41
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004d41 	.word	0x08004d41
 8004d78:	08004d41 	.word	0x08004d41
 8004d7c:	08004d41 	.word	0x08004d41
 8004d80:	08004d41 	.word	0x08004d41
 8004d84:	08004ec9 	.word	0x08004ec9
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004e83 	.word	0x08004e83
 8004d90:	08004d41 	.word	0x08004d41
 8004d94:	08004d41 	.word	0x08004d41
 8004d98:	08004eeb 	.word	0x08004eeb
 8004d9c:	08004d41 	.word	0x08004d41
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004d41 	.word	0x08004d41
 8004da8:	08004d41 	.word	0x08004d41
 8004dac:	08004e8b 	.word	0x08004e8b
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e09f      	b.n	8004f04 <_printf_i+0x1ec>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	0607      	lsls	r7, r0, #24
 8004dca:	f103 0104 	add.w	r1, r3, #4
 8004dce:	6029      	str	r1, [r5, #0]
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0xbe>
 8004dd2:	681e      	ldr	r6, [r3, #0]
 8004dd4:	e003      	b.n	8004dde <_printf_i+0xc6>
 8004dd6:	0646      	lsls	r6, r0, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0xba>
 8004dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	da03      	bge.n	8004dea <_printf_i+0xd2>
 8004de2:	232d      	movs	r3, #45	; 0x2d
 8004de4:	4276      	negs	r6, r6
 8004de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dea:	485a      	ldr	r0, [pc, #360]	; (8004f54 <_printf_i+0x23c>)
 8004dec:	230a      	movs	r3, #10
 8004dee:	e012      	b.n	8004e16 <_printf_i+0xfe>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6029      	str	r1, [r5, #0]
 8004df8:	0605      	lsls	r5, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xe8>
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0xee>
 8004e00:	0641      	lsls	r1, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xe4>
 8004e04:	881e      	ldrh	r6, [r3, #0]
 8004e06:	4853      	ldr	r0, [pc, #332]	; (8004f54 <_printf_i+0x23c>)
 8004e08:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2308      	moveq	r3, #8
 8004e0e:	230a      	movne	r3, #10
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e16:	6865      	ldr	r5, [r4, #4]
 8004e18:	60a5      	str	r5, [r4, #8]
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	bfa2      	ittt	ge
 8004e1e:	6821      	ldrge	r1, [r4, #0]
 8004e20:	f021 0104 	bicge.w	r1, r1, #4
 8004e24:	6021      	strge	r1, [r4, #0]
 8004e26:	b90e      	cbnz	r6, 8004e2c <_printf_i+0x114>
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d04b      	beq.n	8004ec4 <_printf_i+0x1ac>
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e32:	fb03 6711 	mls	r7, r3, r1, r6
 8004e36:	5dc7      	ldrb	r7, [r0, r7]
 8004e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3c:	4637      	mov	r7, r6
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	460e      	mov	r6, r1
 8004e42:	d9f4      	bls.n	8004e2e <_printf_i+0x116>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10b      	bne.n	8004e60 <_printf_i+0x148>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07de      	lsls	r6, r3, #31
 8004e4c:	d508      	bpl.n	8004e60 <_printf_i+0x148>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4299      	cmp	r1, r3
 8004e54:	bfde      	ittt	le
 8004e56:	2330      	movle	r3, #48	; 0x30
 8004e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e60:	1b52      	subs	r2, r2, r5
 8004e62:	6122      	str	r2, [r4, #16]
 8004e64:	f8cd a000 	str.w	sl, [sp]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	aa03      	add	r2, sp, #12
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fee4 	bl	8004c3c <_printf_common>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d14a      	bne.n	8004f0e <_printf_i+0x1f6>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e7c:	b004      	add	sp, #16
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	4833      	ldr	r0, [pc, #204]	; (8004f58 <_printf_i+0x240>)
 8004e8c:	2778      	movs	r7, #120	; 0x78
 8004e8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	6829      	ldr	r1, [r5, #0]
 8004e96:	061f      	lsls	r7, r3, #24
 8004e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e9c:	d402      	bmi.n	8004ea4 <_printf_i+0x18c>
 8004e9e:	065f      	lsls	r7, r3, #25
 8004ea0:	bf48      	it	mi
 8004ea2:	b2b6      	uxthmi	r6, r6
 8004ea4:	07df      	lsls	r7, r3, #31
 8004ea6:	bf48      	it	mi
 8004ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8004eac:	6029      	str	r1, [r5, #0]
 8004eae:	bf48      	it	mi
 8004eb0:	6023      	strmi	r3, [r4, #0]
 8004eb2:	b91e      	cbnz	r6, 8004ebc <_printf_i+0x1a4>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	f023 0320 	bic.w	r3, r3, #32
 8004eba:	6023      	str	r3, [r4, #0]
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	e7a7      	b.n	8004e10 <_printf_i+0xf8>
 8004ec0:	4824      	ldr	r0, [pc, #144]	; (8004f54 <_printf_i+0x23c>)
 8004ec2:	e7e4      	b.n	8004e8e <_printf_i+0x176>
 8004ec4:	4615      	mov	r5, r2
 8004ec6:	e7bd      	b.n	8004e44 <_printf_i+0x12c>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	6826      	ldr	r6, [r4, #0]
 8004ecc:	6961      	ldr	r1, [r4, #20]
 8004ece:	1d18      	adds	r0, r3, #4
 8004ed0:	6028      	str	r0, [r5, #0]
 8004ed2:	0635      	lsls	r5, r6, #24
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	d501      	bpl.n	8004edc <_printf_i+0x1c4>
 8004ed8:	6019      	str	r1, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <_printf_i+0x1ca>
 8004edc:	0670      	lsls	r0, r6, #25
 8004ede:	d5fb      	bpl.n	8004ed8 <_printf_i+0x1c0>
 8004ee0:	8019      	strh	r1, [r3, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	e7bc      	b.n	8004e64 <_printf_i+0x14c>
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	1d1a      	adds	r2, r3, #4
 8004eee:	602a      	str	r2, [r5, #0]
 8004ef0:	681d      	ldr	r5, [r3, #0]
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7fb f972 	bl	80001e0 <memchr>
 8004efc:	b108      	cbz	r0, 8004f02 <_printf_i+0x1ea>
 8004efe:	1b40      	subs	r0, r0, r5
 8004f00:	6060      	str	r0, [r4, #4]
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	2300      	movs	r3, #0
 8004f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0c:	e7aa      	b.n	8004e64 <_printf_i+0x14c>
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	462a      	mov	r2, r5
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	47d0      	blx	sl
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d0ad      	beq.n	8004e78 <_printf_i+0x160>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	079b      	lsls	r3, r3, #30
 8004f20:	d413      	bmi.n	8004f4a <_printf_i+0x232>
 8004f22:	68e0      	ldr	r0, [r4, #12]
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	4298      	cmp	r0, r3
 8004f28:	bfb8      	it	lt
 8004f2a:	4618      	movlt	r0, r3
 8004f2c:	e7a6      	b.n	8004e7c <_printf_i+0x164>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4632      	mov	r2, r6
 8004f32:	4649      	mov	r1, r9
 8004f34:	4640      	mov	r0, r8
 8004f36:	47d0      	blx	sl
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d09d      	beq.n	8004e78 <_printf_i+0x160>
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	68e3      	ldr	r3, [r4, #12]
 8004f40:	9903      	ldr	r1, [sp, #12]
 8004f42:	1a5b      	subs	r3, r3, r1
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	dcf2      	bgt.n	8004f2e <_printf_i+0x216>
 8004f48:	e7eb      	b.n	8004f22 <_printf_i+0x20a>
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	f104 0619 	add.w	r6, r4, #25
 8004f50:	e7f5      	b.n	8004f3e <_printf_i+0x226>
 8004f52:	bf00      	nop
 8004f54:	08005191 	.word	0x08005191
 8004f58:	080051a2 	.word	0x080051a2

08004f5c <__malloc_lock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_lock+0x8>)
 8004f5e:	f7ff bc73 	b.w	8004848 <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000334 	.word	0x20000334

08004f68 <__malloc_unlock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_unlock+0x8>)
 8004f6a:	f7ff bc6e 	b.w	800484a <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000334 	.word	0x20000334

08004f74 <_realloc_r>:
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4614      	mov	r4, r2
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	b921      	cbnz	r1, 8004f8a <_realloc_r+0x16>
 8004f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	4611      	mov	r1, r2
 8004f86:	f7ff bdd9 	b.w	8004b3c <_malloc_r>
 8004f8a:	b92a      	cbnz	r2, 8004f98 <_realloc_r+0x24>
 8004f8c:	f000 f85a 	bl	8005044 <_free_r>
 8004f90:	4625      	mov	r5, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f98:	f000 f8a0 	bl	80050dc <_malloc_usable_size_r>
 8004f9c:	4284      	cmp	r4, r0
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	d802      	bhi.n	8004fa8 <_realloc_r+0x34>
 8004fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fa6:	d812      	bhi.n	8004fce <_realloc_r+0x5a>
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff fdc6 	bl	8004b3c <_malloc_r>
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0ed      	beq.n	8004f92 <_realloc_r+0x1e>
 8004fb6:	42bc      	cmp	r4, r7
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4631      	mov	r1, r6
 8004fbc:	bf28      	it	cs
 8004fbe:	463a      	movcs	r2, r7
 8004fc0:	f000 f832 	bl	8005028 <memcpy>
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f000 f83c 	bl	8005044 <_free_r>
 8004fcc:	e7e1      	b.n	8004f92 <_realloc_r+0x1e>
 8004fce:	4635      	mov	r5, r6
 8004fd0:	e7df      	b.n	8004f92 <_realloc_r+0x1e>

08004fd2 <memmove>:
 8004fd2:	4288      	cmp	r0, r1
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	eb01 0402 	add.w	r4, r1, r2
 8004fda:	d902      	bls.n	8004fe2 <memmove+0x10>
 8004fdc:	4284      	cmp	r4, r0
 8004fde:	4623      	mov	r3, r4
 8004fe0:	d807      	bhi.n	8004ff2 <memmove+0x20>
 8004fe2:	1e43      	subs	r3, r0, #1
 8004fe4:	42a1      	cmp	r1, r4
 8004fe6:	d008      	beq.n	8004ffa <memmove+0x28>
 8004fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ff0:	e7f8      	b.n	8004fe4 <memmove+0x12>
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	428a      	cmp	r2, r1
 8004ff8:	d100      	bne.n	8004ffc <memmove+0x2a>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005000:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005004:	e7f7      	b.n	8004ff6 <memmove+0x24>
	...

08005008 <_sbrk_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_sbrk_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fb feb2 	bl	8000d7c <_sbrk>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_sbrk_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_sbrk_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000340 	.word	0x20000340

08005028 <memcpy>:
 8005028:	440a      	add	r2, r1
 800502a:	4291      	cmp	r1, r2
 800502c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005030:	d100      	bne.n	8005034 <memcpy+0xc>
 8005032:	4770      	bx	lr
 8005034:	b510      	push	{r4, lr}
 8005036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503e:	4291      	cmp	r1, r2
 8005040:	d1f9      	bne.n	8005036 <memcpy+0xe>
 8005042:	bd10      	pop	{r4, pc}

08005044 <_free_r>:
 8005044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005046:	2900      	cmp	r1, #0
 8005048:	d044      	beq.n	80050d4 <_free_r+0x90>
 800504a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504e:	9001      	str	r0, [sp, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f1a1 0404 	sub.w	r4, r1, #4
 8005056:	bfb8      	it	lt
 8005058:	18e4      	addlt	r4, r4, r3
 800505a:	f7ff ff7f 	bl	8004f5c <__malloc_lock>
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <_free_r+0x94>)
 8005060:	9801      	ldr	r0, [sp, #4]
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	b933      	cbnz	r3, 8005074 <_free_r+0x30>
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6014      	str	r4, [r2, #0]
 800506a:	b003      	add	sp, #12
 800506c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005070:	f7ff bf7a 	b.w	8004f68 <__malloc_unlock>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d908      	bls.n	800508a <_free_r+0x46>
 8005078:	6825      	ldr	r5, [r4, #0]
 800507a:	1961      	adds	r1, r4, r5
 800507c:	428b      	cmp	r3, r1
 800507e:	bf01      	itttt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	1949      	addeq	r1, r1, r5
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	e7ed      	b.n	8005066 <_free_r+0x22>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x50>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x46>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1855      	adds	r5, r2, r1
 8005098:	42a5      	cmp	r5, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x70>
 800509c:	6824      	ldr	r4, [r4, #0]
 800509e:	4421      	add	r1, r4
 80050a0:	1854      	adds	r4, r2, r1
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1e0      	bne.n	800506a <_free_r+0x26>
 80050a8:	681c      	ldr	r4, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6053      	str	r3, [r2, #4]
 80050ae:	440c      	add	r4, r1
 80050b0:	6014      	str	r4, [r2, #0]
 80050b2:	e7da      	b.n	800506a <_free_r+0x26>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x78>
 80050b6:	230c      	movs	r3, #12
 80050b8:	6003      	str	r3, [r0, #0]
 80050ba:	e7d6      	b.n	800506a <_free_r+0x26>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1949      	addeq	r1, r1, r5
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	6054      	str	r4, [r2, #4]
 80050d2:	e7ca      	b.n	800506a <_free_r+0x26>
 80050d4:	b003      	add	sp, #12
 80050d6:	bd30      	pop	{r4, r5, pc}
 80050d8:	20000338 	.word	0x20000338

080050dc <_malloc_usable_size_r>:
 80050dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e0:	1f18      	subs	r0, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfbc      	itt	lt
 80050e6:	580b      	ldrlt	r3, [r1, r0]
 80050e8:	18c0      	addlt	r0, r0, r3
 80050ea:	4770      	bx	lr

080050ec <_init>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr

080050f8 <_fini>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr
